{
    "entries": {
        "0": {
            "key": [],
            "keysecondary": [],
            "comment": "知识：动态变量替换（当你有文本提供给AI的时候打开它）意思是你必须现有一个可稳定生成的文本模板",
            "content": "Core Capabilities:\n1. Create responsive designs that work well on various screen sizes\n2. Design UI components like character cards, dialogue boxes, status displays, etc.\n3. Optimize code for easy integration with SillyTavern's regex replacement system\n4. Identify and distinguish between static and dynamic text in user inputs\n5. Implement systematic variable naming using $1, $2, etc. for dynamic content\n\nYou have two main commands:\n\n1. **Beautify Command**:\n   - When users request UI beautification:\n     a) Analyze the user's text input and desired UI style\n     b) Ask clarifying questions about design preferences and specific requirements\n     c) Generate appropriate HTML code that transforms the text into a visually appealing UI element\n     d) Present the combined HTML code in a single Markdown code block, ready for regex replacement\n     f) Analyze input text to identify:\n        - Static text (fixed content that doesn't change)\n        - Dynamic text (variable content that needs replacement)\n     g) Mark dynamic content with sequential $n variables ($1, $2, $3, etc.)\n     h) Provide a clear mapping between dynamic content and $n variables\n     i) Ensure HTML template properly implements these variables for replacement\n\n   - Generated code should:\n     - Be compact and efficient, suitable for inline use in a chat interface\n     - ensure all styles are contained within the replacement text\n     - Avoid external dependencies or complex structures that might break in a chat environment\n     - Include fallback options for better compatibility across different platforms\n\n2. **SillyTavern Integration Command**:\n   - When users request SillyTavern integration:\n     a) First analyze the input text structure:\n        - Identify static patterns (fixed text, labels, units)\n        - Identify dynamic elements (names, numbers, descriptions)\n        - Create a clear mapping table showing:\n          * Dynamic content → Variable ($1, $2, etc.)\n          * Content type (text, number, etc.)\n          * Expected format or units\n     b) Design a regex pattern to match this text input, following these best practices:\n        - Use `[\\s\\n]*` for flexible whitespace and line break handling\n        - Include precise unit matching for numerical values (e.g., `(\\d+)岁`, `(\\d+)cm`)\n        - Use non-greedy quantifiers `.*?` for general text capture\n        - Number capture groups to correspond with $n variables\n        - Consider multi-line text patterns with flexible whitespace handling\n     c) Create HTML/CSS template incorporating:\n        - Clearly marked $n variables for dynamic content\n        - Static text remaining unchanged\n        - Proper styling for both static and dynamic elements\n     d) Provide complete documentation including:\n        - Dynamic content mapping table\n        - Regex pattern with numbered capture groups\n        - HTML template with corresponding $n variables\n        - Example of how the replacement works\n     e) Example format:\n        ```\n        Dynamic Content Mapping:\n        $1 → Name (from capture group 1)\n        $2 → Age (from capture group 2)\n        ...\n\n        Regex Pattern:\n        <tag>[\\s\\n]*固定文本：(.*?)[\\s\\n]*固定文本：(\\d+)单位[\\s\\n]*</tag>\n\n        HTML Template:\n        <div>\n          <span>$1</span>\n          <span>$2</span>\n        </div>\n        ```\n\nWhen analyzing user input:\n1. Always start by identifying and listing all dynamic elements\n2. Create a clear mapping between dynamic content and $n variables\n3. Ensure regex capture groups correspond exactly to the $n variables in the HTML\n4. Document the relationship between:\n   - Original dynamic content\n   - Regex capture groups\n   - $n variables in HTML template\n5. Verify all dynamic content is properly captured and replaced\n\nWhen interacting with users:\n1. Always respond in the user's language\n2. Provide concise answers and proactively offer to explain further\n3. Avoid unnecessary pleasantries\n4. Directly address user information without repeating known details\n5. After generating code, proactively ask if users need explanations or modifications",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 1,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 4,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": false,
            "automationId": "",
            "role": null,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "uid": 0,
            "displayIndex": 0,
            "extensions": {
                "position": 1,
                "exclude_recursion": false,
                "display_index": 0,
                "probability": 100,
                "useProbability": true,
                "depth": 4,
                "selectiveLogic": 0,
                "group": "",
                "group_override": false,
                "group_weight": 100,
                "prevent_recursion": false,
                "delay_until_recursion": false,
                "scan_depth": null,
                "match_whole_words": null,
                "use_group_scoring": false,
                "case_sensitive": null,
                "automation_id": "",
                "role": 0,
                "vectorized": false,
                "sticky": 0,
                "cooldown": 0,
                "delay": 0
            }
        },
        "1": {
            "key": [],
            "keysecondary": [],
            "comment": "知识：前端助手的使用说明（如有必要就打开）",
            "content": "# 使用方法\n\n## 在哪使用?\n\n### 在楼层消息中使用\n\n使用代码块包裹需要渲染的代码部分即可进行渲染; 如果代码块中没有同时存在 `<body>` 和 `</body>` 标签, 则不进行渲染.\n\n````html\n```\n<html>\n  <head>\n    <style>\n      body {\n        font-family: Arial, sans-serif;\n        background-color: #f0f0f0;\n        margin: 0;\n        padding: 20px;\n        text-align: center;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>欢迎使用脚本注入功能！</h1>\n    <button onclick=\"showMessage()\">点击我</button>\n    <script>\n      function showMessage() {\n        alert(\"你点击了按钮！\");\n      }\n    </script>\n  </body>\n</html>\n```\n````\n\n**获取User头像**\n\n已设置为类，命名为`user_avatar`，使用方法如下：\n```html\n// 在你想要放入用户头像的地方设置类为user_avatar，此时容器的背景图片就会变为当前用户头像\n<div class=\"user_avatar\"></div>\n```\n只导入了图片链接`background-image: url('${avatarPath}');`，没有特意设置其他样式，具体的图片填充方式需使用者手动添加样式。\n\n如果在聊天中途更换了user角色，其显示逻辑与酒馆一致，会在新的楼层显示新的头像，如果想要将旧的楼层头像显示同步，需要点击用户面板的同步按钮。\n\n**禁用加载动画**\n\n界面代码任意位置输入`<!-- disable-default-loading -->`禁用内置的加载动画。例如：\n\n```html\n<body>\n<!-- disable-default-loading -->\n</body>\n```\n\n### 全局脚本\n\n在正则中新建一个 `脚本-你想要的脚本名称` 正则 (如果有多个脚本, 名字不要重复), 然后你就能在正则的替换区域中填写你想要的脚本内容.\n\n![全局脚本示例](README_usage_全局脚本.png)\n\n注意:\n\n- 该脚本将会在切换聊天时被执行: 关闭聊天, 正则被开关或修改, 新建聊天, 切换角色卡... 总之玩家每次游玩的最开始时必然会触发该脚本. 具体什么时候执行很难说, **因此建议不要直接执行你要做的事情**, 而是用 [监听和发送事件](#监听和发送事件) 的方法来在某些事件发生时执行该脚本内容.\n- 为了加载效率, 多脚本的加载是同时进行的, 如果需要一个脚本后于另一个脚本加载, 你应该使用 [监听和发送事件](#监听和发送事件) 让那个脚本等待.\n- **不同正则下的脚本代码并不共享**, 如果非要拆分放在不同正则, 你需要使用 [监听和发送事件](#监听和发送事件) 进行通讯和数据传递.\n- 脚本虽然被写在正则中, 但实际并没有作为正则使用, 只是为了利用局部正则能和角色卡一起导出这一点, 因此正则的具体设置对于脚本并没有意义. 唯一支持的选项是开关正则来开关脚本.\n\n## 怎么用最好?\n\n[基于前端助手编写角色卡的 VSCode 环境配置](https://sillytavern-stage-girls-dog.readthedocs.io/tool_and_experience/js_slash_runner/index.html)\n\n## 脚本代码功能\n\n### Quick Reply 触发\n\n我们可以在嵌入的 iframe 中执行 SillyTavern 内部的 Slash 命令 (斜杠命令), 如 `/run`、`/echo` 等.\n\n#### `triggerSlash(commandText)`\n\n```typescript\n/**\n * 运行 Slash 命令, 注意如果命令写错了将不会有任何反馈\n *\n * @param commandText 要运行的 Slash 命令\n */\nfunction triggerSlash(commandText: string): void\n```\n\n示例:\n\n```typescript\n// 在酒馆界面弹出提示语 `hello!`\ntriggerSlash('/echo hello!');\n```\n\n#### `triggerSlashWithResult(commandText)`\n\n```typescript\n/**\n * 运行 Slash 命令, 并返回命令管道的结果\n *\n * @param commandText 要运行的 Slash 命令\n * @returns Slash 管道结果, 如果命令出错或执行了 `/abort` 则返回 `undefined`\n */\nfunction triggerSlashWithResult(commandText: string): Promise<string | undefined>\n```\n\n示例:\n\n```typescript\n// 获取当前聊天消息最后一条消息对应的 id\nconst last_message_id = await triggerSlashWithResult('/pass {{lastMessageId}}');\n```\n\n### 变量操作\n\n扩展提供了两个函数用于获取和设置 SillyTavern 中绑定到聊天的局部变量, 这两个函数分别是 `getVariables()` 和 `setVariables()`. 这些函数允许 `iframe` 中的脚本与主页面进行交互, 从而实现持久化的状态管理.\n\n#### `getVariables()`\n\n```typescript\n/**\n * 获取所有聊天变量\n *\n * @returns 所有聊天变量\n */\nasync function getVariables(): Promise<Object> \n```\n\n示例:\n\n```typescript\n// 获取所有变量并弹窗输出结果\nconst variables = await getVariables();\nalert(variables);\n```\n\n#### `setVariables(message_id, new_or_updated_variables)`\n\n:alert: 这个函数是在事件监听功能之前制作的. 里面有很多隐含操作和条件, 所以实际使用可能会比较麻烦.\n**之后会在考虑兼容性的情况下更改该函数, 慎用!!!**\n目前的替代方法是直接使用 `triggerSlash(\"/setvar ...\")` 或下面那样使用事件监听:\n\n```typescript\n// 接收到消息时更新变量\neventOn(tavern_events.MESSAGE_RECEIVED, updateVariables);\n\nfunction parseVariablesFromMessage(messages) { /*...*/ }\n\nfunction updateVariables(message_id) {\n  const variables = parseVariablesFromMessage(await getChatMessages(message_id));\n\n  triggerSlash(\n    Object.entries(variables)\n      .map(([key, value]) => `/setvar key=${key} \"${value}\"`)\n      .join(\"||\"));\n}\n```\n\n函数本身:\n\n```typescript\n/**\n * 如果 `message_id` 是最新楼层, 则用 `new_or_updated_variables` 更新聊天变量\n *\n * @param message_id 要判定的 `message_id`\n * @param new_or_updated_variables 用于更新的变量\n * @enum\n * - 如果该变量已经存在, 则更新值\n * - 如果不存在, 则新增变量\n */\nfunction setVariables(message_id: number, new_or_updated_variables: Object): void\n```\n\n示例:\n\n```typescript\nconst variables = {value: 5, data: 7};\nsetVariables(0, variabels);\n```\n\n现在用酒馆监听控制怎么更新会更为直观 (?) 和自由:\n\n### 楼层消息操作\n\n#### 获取楼层消息\n\n酒馆虽然提供了 `/messages` 命令, 但是它获取的是一整个字符串, 并且不能获取楼层当前没在使用的消息 (点击箭头切换的那个 swipe 消息, 在前端助手中我们称之为 \"消息页\"), 前端助手为此提供了一个函数获取更便于处理的消息.\n\n其获取到的结果是一个数组, 数组的元素类型为 `ChatMessage`, 有以下内容:\n\n```typescript\ninterface ChatMessage {\n  message_id: number;\n  name: string;\n  role: 'system' | 'assistant' | 'user'\n  is_hidden: boolean;\n  message: string;\n\n  // 如果 `getChatMessages` 使用 `include_swipe: false`, 则以下内容为 `undefined`\n  swipe_id?: number;\n  swipes?: string[];\n}\n```\n\n具体函数为:\n\n```typescript\ninterface GetChatMessagesOption {\n  role?: 'all' | 'system' | 'assistant' | 'user';  // 按 role 筛选消息; 默认为 `'all'`\n  hide_state?: 'all' | 'hidden' | 'unhidden';      // 按是否被隐藏筛选消息; 默认为 `'all'`\n  include_swipe?: boolean;                         // 是否包含消息楼层其他没被使用的消息页; 默认为 `false`\n}\n\n/**\n * 获取聊天消息\n *\n * @param range 要获取的消息楼层号或楼层范围, 与 `/messages` 相同\n * @param option 对获取消息进行可选设置\n *   - `role:'all'|'system'|'assistant'|'user'`: 按 role 筛选消息; 默认为 `'all'`\n *   - `hide_state:'all'|'hidden'|'unhidden'`: 按是否被隐藏筛选消息; 默认为 `'all'`\n *   - `include_swipe:boolean`: 是否包含消息楼层其他没被使用的消息页; 默认为 `false`\n *\n * @returns 一个数组, 数组的元素是每楼的消息 `ChatMessage`. 该数组依据按 message_id 从低到高排序.\n */\nfunction getChatMessages(range: string | number, option: GetChatMessagesOption = {}): Promise<ChatMessage[]>\n```\n\n示例:\n\n```typescript\n// 仅获取第 10 楼会被 ai 使用的消息页\nconst messages = await getChatMessages(10);\nconst messages = await getChatMessages(\"10\");\n\n// 获取第 10 楼的所有消息页\nconst messages = await getChatMessages(10, {swipe: true});\n\n// 获取所有楼层的所有消息页\nconst messages = await getChatMessages(\"0-{{lastMessageId}}\", {swipe: true});\n```\n\n#### 修改楼层消息\n\n酒馆本身没有提供修改楼层消息的命令. 为了方便存档、减少 token 或制作某些 meta 要素, 本前端助手提供这样的功能:\n\n```typescript\ninterface SetChatMessageOption {\n  swipe_id?: 'current' | number;  // 要替换的消息页 (`'current'` 来替换当前使用的消息页, 或从 0 开始的序号来替换对应消息页), 如果消息中还没有该消息页, 则会创建该页; 默认为 `'current'`\n\n  /**\n   * 是否更新页面的显示和 iframe 渲染, 只会更新已经被加载显示在网页的楼层, 更新显示时会触发被更新楼层的 \"仅格式显示\" 正则; 默认为 `'display_and_render_current'`\n   * - `'none'`: 不更新页面的显示和 iframe 渲染\n   * - `'display_current'`: 仅更新当前被替换楼层的显示, 如果替换的是没被使用的消息页, 则会自动切换为使用那一页\n   * - `'display_and_render_current'`: 与 `display_current` 相同, 但还会重新渲染该楼的 iframe\n   * - `'all'`: 重新载入整个聊天消息, 将会触发 `tavern_events.CHAT_CHANGED` 进而重新加载全局脚本和楼层消息\n   */\n  refresh?: 'none' | 'display_current' | 'display_and_render_current' | 'all';\n\n  // TODO: emit_event?: boolean;  // 是否根据替换时消息发生的变化发送对应的酒馆事件, 如 MESSAGE_UPDATED, MESSAGE_SWIPED 等; 默认为 `false`\n}\n\n/**\n * 替换某消息楼层的某聊天消息页. 如果替换的消息是当前会被发送给 ai 的消息 (正被使用且没被隐藏的消息页), 则 \"仅格式提示词\" 正则将会使用它还不是原来的消息.\n *\n * @param message 要用于替换的消息\n * @param message_id 消息楼层id\n * @param option 对获取消息进行可选设置\n * @enum\n *   - `swipe_id:'current'|number`: 要替换的消息页 (`'current'` 来替换当前使用的消息页, 或从 0 开始的序号来替换对应消息页), 如果消息中还没有该消息页, 则会创建该页; 默认为 `'current'`\n *   - `refresh:'none'|'display_current'|'display_and_render_current'|'all'`: 是否更新页面的显示和 iframe 渲染, 只会更新已经被加载显示在网页的楼层, 更新显示时会触发被更新楼层的 \"仅格式显示\" 正则; 默认为 `'display_and_render_current'`\n *     - `'none'`: 不更新页面的显示和 iframe 渲染\n *     - `'display_current'`: 仅更新当前被替换楼层的显示, 如果替换的是没被使用的消息页, 则会自动切换为使用那一页\n *     - `'display_and_render_current'`: 与 `display_current` 相同, 但还会重新渲染该楼的 iframe\n *     - `'all'`: 重新载入整个聊天消息, 将会触发 `tavern_events.CHAT_CHANGED` 进而重新加载全局脚本和楼层消息\n */\nfunction setChatMessage(message: string, message_id: number, option: SetChatMessageOption = {}): void\n```\n\n示例:\n\n```typescript\nsetChatMessage(\"这是要设置在楼层 5 的消息, 它会替换该楼当前使用的消息\", 5);\nsetChatMessage(\"这是要设置在楼层 5 第 3 页的消息, 更新为显示它并渲染其中的 iframe\", 5, {swipe_id: 3});\nsetChatMessage(\"这是要设置在楼层 5 第 3 页的消息, 但不更新显示它\", 5, {swipe_id: 3, refresh: 'none'});\n```\n\n### 正则操作\n\n#### 获取局部正则是否被启用\n\n```typescript\n/**\n * 判断局部正则是否被启用.\n *\n * 如果你是在被写在局部正则中的全局脚本调用这个函数, **请保证\"在编辑时运行\"被启用**, 这样这个脚本才会无视局部正则开启情况而运行.\n *\n * @returns 局部正则是否被启用\n */\nfunction isCharacterRegexEnabled(): Promise<boolean>;\n```\n\n#### 获取正则数据\n\n其获取到的结果是一个数组, 数组的元素类型为 `RegexData`, 有以下内容:\n\n```typescript\ninterface RegexData {\n  id: string;\n  script_name: string;\n  enabled: boolean;\n  run_on_edit: boolean;\n  scope: 'global' | 'character';\n\n  find_regex: string;\n  replace_string: string;\n\n  source: {\n    user_input: boolean;\n    ai_output: boolean;\n    slash_command: boolean;\n    world_info: boolean;\n  };\n\n  destination: {\n    display: boolean;\n    prompt: boolean;\n  };\n\n  min_depth: number | undefined;\n  max_depth: number | undefined;\n}\n```\n\n具体函数为:\n\n```typescript\ninterface GetRegexDataOption {\n  scope?: 'all' | 'global' | 'character';         // 按所在区域筛选正则; 默认为 `'all'`\n  enable_state?: 'all' | 'enabled' | 'disabled';  // 按是否被开启筛选正则; 默认为 `'all'`\n}\n\n/**\n * 获取正则\n *\n * @param option 对获取正则进行可选设置\n *   - `scope?:'all'|'global'|'character'`:         // 按所在区域筛选正则; 默认为 `'all'`\n *   - `enable_state?:'all'|'enabled'|'disabled'`:  // 按是否被开启筛选正则; 默认为 `'all'`\n *\n * @returns 一个数组, 数组的元素是正则 `RegexData`. 该数组依据正则作用于文本的顺序排序, 也就是酒馆显示正则的地方从上到下排列.\n */\nfunction getRegexData(option: GetRegexDataOption = {}): Promise<RegexData[]>\n```\n\n示例:\n\n```typescript\n// 获取所有正则\nconst regexes = await getRegexData();\n\n// 获取当前角色卡目前被启用的局部正则\nconst regexes = await getRegexData({scope: 'character', enable_state: 'enabled'});\n```\n\n### 世界书操作\n\n#### 获取世界书全局设置\n\n```typescript\ninterface LorebookSettings {\n  scan_depth: number;\n  context_percentage: number;\n  budget_cap: number;  // 0 表示禁用\n  min_activations: number;\n  max_depth: number;  // 0 表示无限制\n  max_recursion_steps: number;\n\n  include_names: boolean;\n  recursive: boolean;\n  case_sensitive: boolean;\n  match_whole_words: boolean;\n  use_group_scoring: boolean;\n  overflow_alert: boolean;\n\n  insertion_strategy: 'evenly' | 'character_first' | 'global_first';\n};\n\n/**\n * 获取当前的世界书全局设置\n *\n * @returns 当前的世界书全局设置\n */\nfunction getLorebookSettings(): Promise<LorebookSettings>\n```\n\n遗憾的是没给接口, 只能获取不能修改世界书全局设置.\n\n#### 获取角色卡绑定的世界书\n\n```typescript\n/**\n * 获取角色卡绑定的世界书\n *\n * @param option 可选选项\n *   - `name?:string`: 要查询的角色卡名称; 默认为当前角色卡\n *   - `type?:'all'|'primary'|'additional'`: 按角色世界书的绑定类型筛选世界书; 默认为 `'all'`\n *\n * @returns 一个数组, 元素是各世界书的名称. 主要世界书将会排列在附加世界书的前面.\n */\nfunction getCharLorebooks(option: GetCharLorebooksOption = {}): Promise<string[]>\n```\n\n```typescript\n/**\n * 获取当前角色卡绑定的主要世界书\n *\n * @returns 如果当前角色卡有绑定并使用世界书 (地球图标呈绿色), 返回该世界书的名称; 否则返回 `null`\n */\nfunction getCurrentCharPrimaryLorebook(): Promise<string | null>\n```\n\n#### 获取聊天绑定的世界书\n\n```typescript\n/**\n * 获取或创建当前聊天绑定的世界书\n *\n * @returns 聊天世界书的名称\n */\nfunction getOrCreateChatLorebook(): Promise<string>\n```\n\n#### 获取世界书列表\n\n```typescript\n/**\n * 获取世界书列表\n *\n * @returns 世界书名称列表\n */\nfunction getLorebooks(): Promise<string[]>\n```\n\n#### 新建世界书\n\n```typescript\n/**\n * 新建世界书\n *\n * @param lorebook 世界书名称\n *\n * @returns 是否成功创建, 如果已经存在同名世界书会失败\n */\nfunction createLorebook(lorebook: string): Promise<boolean>\n```\n\n#### 删除世界书\n\n```typescript\n/**\n * 删除世界书\n *\n * @param lorebook 世界书名称\n * @returns 是否成功删除, 可能因世界书不存在等原因而失败\n */\nfunction deleteLorebook(lorebook: string): Promise<boolean>\n```\n\n### 世界书条目操作\n\n相比于酒馆给的 slash command, 前端助手允许你更批量和更直接的获取世界书条目内容. 具体地, 你可以访问每个条目的以下信息:\n\n```typescript\ninterface LorebookEntry {\n  uid: number;  // uid 是相对于世界书内部的, 不要跨世界书使用\n\n  comment: string;\n  enabled: boolean;\n  type: 'constant' | 'selective' | 'vectorized'\n  position:\n  'before_character_definition'   // 角色定义之前\n  | 'after_character_definition'  // 角色定义之后\n  | 'before_example_messages'     // 示例消息之前\n  | 'after_example_messages'      // 示例消息之后\n  | 'before_author_note'          // 作者注释之前\n  | 'after_author_note'           // 作者注释之后\n  | 'at_depth_as_system'          // @D⚙\n  | 'at_depth_as_assistant'       // @D👤\n  | 'at_depth_as_user';           // @D🤖\n  depth: number | null;  // 仅对于 `position === 'at_depth_as_???'` 有意义; 其他情况为 null\n  order: number;\n  probability: number;\n\n  key: string[];\n  logic: 'and_any' | 'and_all' | 'not_all' | 'not_any';\n  filter: string[];\n\n  scan_depth: 'same_as_global' | number;\n  case_sensitive: 'same_as_global' | boolean;\n  match_whole_words: 'same_as_global' | boolean;\n  use_group_scoring: 'same_as_global' | boolean;\n  automation_id: string | null;\n\n  exclude_recursion: boolean;\n  prevent_recursion: boolean;\n  delay_until_recursion: boolean | number;  // 启用则是 true, 如果设置了具体的 Recursion Level 则是数字 (具体参考酒馆中勾选这个选项后的变化)\n\n  content: string;\n\n  group: string;\n  group_prioritized: boolean;\n  group_weight: number;\n  sticky: number | null;\n  cooldown: number | null;\n  delay: number | null;\n}\n```\n\n#### 获取世界书中的条目信息\n\n```typescript\ninterface getLorebookEntriesOption {\n  filter?: 'none' | Partial<LorebookEntry>;  // 按照指定字段值筛选条目, 如 `{position: 'at_depth_as_system'}` 表示仅获取处于 @D⚙ 的条目; 默认为不进行筛选. 由于实现限制, 只能做到这样的简单筛选; 如果需要更复杂的筛选, 请获取所有条目然后自己筛选.\n  fields?: 'all' | (keyof LorebookEntry)[];  // 指定要获取世界书条目哪些字段, 如 `['uid', 'comment', 'content']` 表示仅获取这三个字段; 默认为获取全部字段.\n};\n\n/**\n * 获取世界书中的条目信息. **请务必阅读示例**.\n *\n * @param lorebook 世界书名称\n * @param option 可选选项\n *   - `filter:'none'|LorebookEntry的一个子集`: 按照指定字段值筛选条目, 要求对应字段值包含制定的内容; 默认为不进行筛选.\n *                                       如 `{content: '神乐光'}` 表示内容中必须有 `'神乐光'`, `{type: 'selective'}` 表示仅获取绿灯条目.\n *                                       由于实现限制, 只能做到这样的简单筛选; 如果需要更复杂的筛选, 请获取所有条目然后自己筛选.\n *   - `fields:'all'|数组,元素是LorebookEntry里的字段`: 指定要获取世界书条目哪些字段, 如 `['uid', 'comment', 'content']` 表示仅获取这三个字段; 默认为获取全部字段.\n *\n * @returns 一个数组, 元素是各条目信息.\n *   - 如果使用了 `fields` 指定获取哪些字段, 则数组元素只具有那些字段.\n *   - 如果使用了 `filter` 筛选条目, 则数组只会包含满足要求的元素.\n *   - 你应该根据你的 `fields` 参数断言返回类型, 如 `await getLoreBookEntries(...) as PartialLorebookEntryWithUid[]`.\n */\nfunction getLorebookEntries(lorebook: string, option: getLorebookEntriesOption = {}): Promise<Partial<LorebookEntry>[]>\n```\n\n示例:\n\n```typescript\n// 获取世界书中所有条目的所有信息\nconst entries = await getLorebookEntries(\"eramgt少女歌剧\");\n```\n\n```typescript\n// 按内容筛选, content 中必须出现 `'神乐光'`\nconst entries = await getLorebookEntries(\"eramgt少女歌剧\", {filter: {content: '神乐光'}})\n```\n\n```typescript\n// 仅获取世界书的 uid 和名称.\nconst entries = await getLorebookEntries(\"eramgt少女歌剧\", {fields: [\"uid\", \"comment\"]});\n```\n\n```typescript\n// 筛选后仅获取世界书的 uid\nconst entries = await getLorebookEntries(\"eramgt少女歌剧\", {filter: {content: '神乐光'}, fields: [\"uid\"]})\n```\n\n**如果你在写 TypeScript, 你应该根据给的 `fields` 参数断言返回类型**:\n\n```typescript\nconst entries = await getLoreBookEntries(\"eramgt少女歌剧\") as LorebookEntry[];\nconst entries = await getLoreBookEntries(\"eramgt少女歌剧\", {fields: [\"uid\", \"comment\"]}) as Pick<LorebookEntry, \"uid\" | \"comment\">[];\n```\n\n#### 修改世界书中的条目信息\n\n```typescript\n/**\n * 将条目信息修改回对应的世界书中, 如果某个字段不存在, 则该字段采用原来的值.\n *\n * 这只是修改信息, 不能创建新的条目, 因此要求条目必须已经在世界书中.\n *\n * @param lorebook 条目所在的世界书名称\n * @param entries 一个数组, 元素是各条目信息. 其中必须有 \"uid\", 而其他字段可选.\n *\n * @example\n * const lorebook = \"eramgt少女歌剧\";\n *\n * // 你可以自己指定 uid 来设置\n * setLorebookEntries(lorebook, [{uid: 0, comment: \"新标题\"}]);\n *\n * // 也可以用从 `getLorebookEntries` 获取的条目\n * const entries = await getLorebookEntries(lorebook) as LorebookEntry[];\n * entries[0].sticky = 5;\n * entries[1].enabled = false;\n * setLorebookEntries(lorebook, [entries[0], entries[1]]);\n */\nfunction setLorebookEntries(lorebook: string, entries: (Pick<LorebookEntry, \"uid\"> & Partial<Omit<LorebookEntry, \"uid\">>)[]): void\n```\n\n示例:\n\n```typescript\nconst lorebook = \"eramgt少女歌剧\";\n\n// 禁止所有条目递归, 保持其他设置不变\nconst entries = await getLorebookEntries(lorebook) as LorebookEntry[];\n// `...entry` 表示展开 `entry` 中的内容; 而 `prevent_recursion: true` 放在后面会覆盖或设置 `prevent_recursion` 字段\nsetLorebookEntries(lorebook, entries.map((entry) => ({ ...entry, prevent_recursion: true })));\n\n// 也就是说, 其实我们获取 `uid` 字段就够了\nconst entries = await getLorebookEntries(lorebook, {fields: [\"uid\"]}) as PartialLorebookEntryWithUid[];\nsetLorebookEntries(lorebook, entries.map((entry) => ({ ...entry, prevent_recursion: true })));\n\n// 当然你也可以做一些更复杂的事, 比如不再是禁用, 而是反转开关\nconst entries = await getLorebookEntries(lorebook) as LorebookEntry[];\nsetLorebookEntries(lorebook, entries.map((entry) => ({ ...entry, prevent_recursion: !entry.prevent_recursion })));\n```\n\n#### 在世界书中新增条目\n\n```typescript\n/**\n * 向世界书中新增一个条目\n *\n * @param lorebook 世界书名称\n * @param field_values 要对新条目设置的字段值, 如果不设置则采用酒馆给的默认值. **不能设置 `uid`**.\n *\n * @returns 新条目的 uid\n */\nfunction createLorebookEntry(lorebook: string, field_values: Partial<Omit<LorebookEntry, \"uid\">>): Promise<string>\n```\n\n示例:\n\n```typescript\nconst uid = await createLorebookEntry(\"eramgt少女歌剧\", {comment: \"revue\", content: \"歌唱吧跳舞吧相互争夺吧\"});\n```\n\n#### 删除世界书中的某个条目\n\n```typescript\n/**\n * 删除世界书中的某个条目\n *\n * @param lorebook 世界书名称\n * @param uid 要删除的条目 uid\n *\n * @returns 是否成功删除, 可能因世界书不存在、对应条目不存在等原因失败\n */\nfunction deleteLorebookEntry(lorebook: string, uid: number): Promise<boolean>\n```\n\n### 监听和发送事件\n\n扩展允许你设置当发生某种事件时, 运行想要的函数. 例如, 你也许想在玩家擅自更改你的世界书时警告玩家.\n\n事件可以是,\n\n- `iframe_events` 中的 iframe 事件\n- `tavern_events` 中的酒馆事件\n- 自定义的字符串事件\n\n你可以监听事件, 在收到 ai 消息时弹出 `\"hello\"`:\n\n```typescript\nfunction hello() { alert(\"hello\"); }\neventOn(tavern_events.MESSAGE_RECEIVED, hello);\n```\n\n你当然也可以取消监听:\n\n```typescript\nfunction hello() {\n  alert(\"hello\");\n  eventRemoveListener(tavern_events.MESSAGE_RECEIVED, hello);\n}\neventOn(tavern_events.MESSAGE_RECEIVED, hello);\n\n//------------------------------------------------------------------------------------------------------------------------\n// 上面的相当于只监听一次事件, 对此又专门的函数\neventOnce(tavern_events.MESSAGE_RECEIVED, hello);\n```\n\n你可以发送事件, 告诉其他 iframe 你想要它们做什么:\n\n```typescript\n//------------------------------------------------------------------------------------------------------------------------\n// 负责存档的全局脚本\nfunction save() { /*略*/ }\neventOn(\"进行存档\", save);\n\n//------------------------------------------------------------------------------------------------------------------------\n// 消息楼层\nawait eventEmit(\"进行存档\");\nalert(\"存档完成!\");\n```\n\n你可以等待事件:\n\n```typescript\nawait eventWaitOnce(\"进行存档\");\n```\n\n你可以等待某个函数因为监听到某个事件而执行了:\n\n```typescript\neventOn(tavern_events.MESSAGE_RECEIVED, hello);\nawait eventWaitOnce(tavern_events.MESSAGE_RECEIVED, hello);\n```\n\n在发送事件时可以携带数据, 进而完成数据的传递:\n\n```typescript\n//------------------------------------------------------------------------------------------------------------------------\n// 发送方\neventEmit(\"发送数据\", data, time);\n\n//------------------------------------------------------------------------------------------------------------------------\nfunction receive(data, time) {/*略*/}\neventOn(\"发送数据\", receive);\n```\n\n```typescript\nfunction detectMessageEdited(message_id) {\n  alert(`你刚刚更新了第 ${message_id} 条聊天消息对吧😡`);\n}\n\n// 酒馆事件 tavern_events.MESSAGE_UPDATED 会传递被更新的楼层 id\n//   但酒馆事件太多了, 我们还没整理出每个传什么, 你也许可以自己试试?\ntavernOn(tavern_events.MESSAGE_UPDATED, detectMessageEdited);\n```\n\n<details>\n<summary>查看所有 iframe 事件</summary>\n\n```typescript\nconst iframe_events = {\n  MESSAGE_IFRAME_RENDER_STARTED: 'message_iframe_render_started',\n  MESSAGE_IFRAME_RENDER_ENDED: 'message_iframe_render_ended',\n};\n```\n\n</details>\n\n<details>\n<summary>查看所有酒馆事件</summary>\n\n```typescript\nconst tavern_events = {\n  APP_READY: 'app_ready',\n  EXTRAS_CONNECTED: 'extras_connected',\n  MESSAGE_SWIPED: 'message_swiped',\n  MESSAGE_SENT: 'message_sent',\n  MESSAGE_RECEIVED: 'message_received',\n  MESSAGE_EDITED: 'message_edited',\n  MESSAGE_DELETED: 'message_deleted',\n  MESSAGE_UPDATED: 'message_updated',\n  MESSAGE_FILE_EMBEDDED: 'message_file_embedded',\n  IMPERSONATE_READY: 'impersonate_ready',\n  CHAT_CHANGED: 'chat_id_changed',\n  GENERATION_AFTER_COMMANDS: 'GENERATION_AFTER_COMMANDS',\n  GENERATION_STARTED: 'generation_started',\n  GENERATION_STOPPED: 'generation_stopped',\n  GENERATION_ENDED: 'generation_ended',\n  EXTENSIONS_FIRST_LOAD: 'extensions_first_load',\n  EXTENSION_SETTINGS_LOADED: 'extension_settings_loaded',\n  SETTINGS_LOADED: 'settings_loaded',\n  SETTINGS_UPDATED: 'settings_updated',\n  GROUP_UPDATED: 'group_updated',\n  MOVABLE_PANELS_RESET: 'movable_panels_reset',\n  SETTINGS_LOADED_BEFORE: 'settings_loaded_before',\n  SETTINGS_LOADED_AFTER: 'settings_loaded_after',\n  CHATCOMPLETION_SOURCE_CHANGED: 'chatcompletion_source_changed',\n  CHATCOMPLETION_MODEL_CHANGED: 'chatcompletion_model_changed',\n  OAI_PRESET_CHANGED_BEFORE: 'oai_preset_changed_before',\n  OAI_PRESET_CHANGED_AFTER: 'oai_preset_changed_after',\n  OAI_PRESET_EXPORT_READY: 'oai_preset_export_ready',\n  OAI_PRESET_IMPORT_READY: 'oai_preset_import_ready',\n  WORLDINFO_SETTINGS_UPDATED: 'worldinfo_settings_updated',\n  WORLDINFO_UPDATED: 'worldinfo_updated',\n  CHARACTER_EDITED: 'character_edited',\n  CHARACTER_PAGE_LOADED: 'character_page_loaded',\n  CHARACTER_GROUP_OVERLAY_STATE_CHANGE_BEFORE: 'character_group_overlay_state_change_before',\n  CHARACTER_GROUP_OVERLAY_STATE_CHANGE_AFTER: 'character_group_overlay_state_change_after',\n  USER_MESSAGE_RENDERED: 'user_message_rendered',\n  CHARACTER_MESSAGE_RENDERED: 'character_message_rendered',\n  FORCE_SET_BACKGROUND: 'force_set_background',\n  CHAT_DELETED: 'chat_deleted',\n  CHAT_CREATED: 'chat_created',\n  GROUP_CHAT_DELETED: 'group_chat_deleted',\n  GROUP_CHAT_CREATED: 'group_chat_created',\n  GENERATE_BEFORE_COMBINE_PROMPTS: 'generate_before_combine_prompts',\n  GENERATE_AFTER_COMBINE_PROMPTS: 'generate_after_combine_prompts',\n  GENERATE_AFTER_DATA: 'generate_after_data',\n  GROUP_MEMBER_DRAFTED: 'group_member_drafted',\n  WORLD_INFO_ACTIVATED: 'world_info_activated',\n  TEXT_COMPLETION_SETTINGS_READY: 'text_completion_settings_ready',\n  CHAT_COMPLETION_SETTINGS_READY: 'chat_completion_settings_ready',\n  CHAT_COMPLETION_PROMPT_READY: 'chat_completion_prompt_ready',\n  CHARACTER_FIRST_MESSAGE_SELECTED: 'character_first_message_selected',\n  // TODO: Naming convention is inconsistent with other events\n  CHARACTER_DELETED: 'characterDeleted',\n  CHARACTER_DUPLICATED: 'character_duplicated',\n  /** @deprecated The event is aliased to STREAM_TOKEN_RECEIVED. */\n  SMOOTH_STREAM_TOKEN_RECEIVED: 'stream_token_received',\n  STREAM_TOKEN_RECEIVED: 'stream_token_received',\n  FILE_ATTACHMENT_DELETED: 'file_attachment_deleted',\n  WORLDINFO_FORCE_ACTIVATE: 'worldinfo_force_activate',\n  OPEN_CHARACTER_LIBRARY: 'open_character_library',\n  ONLINE_STATUS_CHANGED: 'online_status_changed',\n  IMAGE_SWIPED: 'image_swiped',\n  CONNECTION_PROFILE_LOADED: 'connection_profile_loaded',\n  TOOL_CALLS_PERFORMED: 'tool_calls_performed',\n  TOOL_CALLS_RENDERED: 'tool_calls_rendered',\n};\n```\n\n</details>\n\n#### 监听事件\n\n```typescript\n/**\n * 让 `listener` 监听 `event_type`, 当事件发生时自动运行 `listener`.\n *\n * - 如果 `listener` 已经在监听 `event_type`, 则调用本函数不会有任何效果.\n *\n * @param event_type 要监听的事件\n * @param listener 要注册的函数\n *\n * @example\n * function hello() { alert(\"hello\"); }\n * eventOn(要监听的事件, hello);\n *\n * @example\n * // 消息被修改时监听是哪一条消息被修改\n * // 能这么做是因为酒馆 MESSAGE_UPDATED 会发送消息 id 回来, 但是这个发送太自由了, 我还没整理出每种消息会发送什么\n * function detectMessageUpdated(message_id) {\n *   alert(`你刚刚修改了第 ${message_id} 条聊天消息对吧😡`);\n * }\n * eventOn(tavern_events.MESSAGE_UPDATED, detectMessageUpdated);\n */\nfunction eventOn(event_type: EventType, listener: Function): void\n```\n\n```typescript\n/**\n * 让 `listener` 监听 `event_type`, 当事件发生时自动在最后运行 `listener`.\n *\n * - 如果 `listener` 已经在监听 `event_type`, 则调用本函数会将 `listener` 调整为最后运行.\n *\n * @param event_type 要监听的事件\n * @param listener 要注册/调整到最后运行的函数\n *\n * @example\n * eventMakeLast(要监听的事件, 要注册的函数);\n */\nfunction eventMakeLast(event_type: EventType, listener: Function): void\n```\n\n```typescript\n/**\n * 让 `listener` 监听 `event_type`, 当事件发生时自动在最先运行 `listener`.\n *\n * - 如果 `listener` 已经在监听 `event_type`, 则调用本函数会将 `listener` 调整为最先运行.\n *\n * @param event_type 要监听的事件\n * @param listener 要注册/调整为最先运行的函数\n *\n * @example\n * eventMakeFirst(要监听的事件, 要注册的函数);\n */\nfunction eventMakeFirst(event_type: EventType, listener: Function): void\n```\n\n```typescript\n/**\n * 让 `listener` 仅监听下一次 `event_type`, 当该次事件发生时运行 `listener`, 此后取消监听.\n *\n * - 如果 `listener` 已经在监听 `event_type`, 则调用本函数不会有任何效果.\n *\n * @param event_type 要监听的事件\n * @param listener 要注册的函数\n *\n * @example\n * eventOnce(要监听的事件, 要注册的函数);\n */\nfunction eventOnce(event_type: EventType, listener: Function): void\n```\n\n#### 等待事件\n\n```typescript\n/**\n * 等待一次 `event_type` 事件\n *\n * @param event_type 要等待的事件\n *\n * @example\n * eventWaitOnce(tavern_events.MESSAGE_DELETED);\n */\nasync function eventWaitOnce(event_type: EventType): Promise<any | undefined>\n```\n\n```typescript\n/**\n * 等待 `listener` 监听到一次 `event_type` 且执行完成, 返回 `listener` 的执行结果\n *\n * 在调用本函数前, `listener` 必须已经在监听 `event_type`\n *\n * @param event_type `listener` 在监听的事件\n * @param listener 已经在监听 `event_type` 的函数\n *\n * @returns  `listener` 得到的结果\n *\n * @example\n * eventOnce(\"存档\", save);\n * eventWaitOnce(\"存档\", save);\n */\nasync function eventWaitOnce(event_type: EventType, listener: Function): Promise<any | undefined>\n```\n\n#### 发送事件\n\n```typescript\n/**\n * 发送 `event_type` 事件, 同时可以发送一些数据 `data`.\n *\n * 所有正在监听 `event_type` 消息频道的都会收到该消息并接收到 `data`.\n *\n * @param event_type 要发送的事件\n * @param data 要随着事件发送的数据\n */\nasync function eventEmit(event_type: EventType, ...data: any[]): Promise<void>\n```\n\n示例:\n\n```typescript\n// 发送 \"角色阶段更新完成\" 事件, 所有监听该事件的 `listener` 都会被运行\neventEmit(\"角色阶段更新完成\");\n```\n\n```typescript\n// 发送 \"存档\" 事件, 并等待所有 `listener` (也许是负责存档的函数) 执行完毕后才继续\nawait eventEmit(\"存档\");\n```\n\n```typescript\n// 发送时携带数据 [\"你好\", 0]\neventEmit(\"事件\", \"你好\", 0);\n```\n\n#### 取消监听事件\n\n```typescript\n/**\n * 让 `listener` 取消对 `event_type` 的监听.\n *\n * - 如果 `listener` 没有监听 `event_type`, 则调用本函数不会有任何效果.\n *\n * @param event_type 要监听的事件\n * @param listener 要取消注册的函数\n *\n * @example\n * eventRemoveListener(要监听的事件, 要取消注册的函数);\n */\nfunction eventRemoveListener(event_type: EventType, listener: Function): void\n```\n\n```typescript\n/**\n * 取消本 iframe 中对 `event_type` 的所有监听\n *\n * @param event_type 要取消监听的事件\n */\nfunction eventClearEvent(event_type: EventType): void\n```\n\n```typescript\n/**\n * 取消本 iframe 中 `listener` 的的所有监听\n *\n * @param listener 要取消注册的函数\n */\nfunction eventClearListener(listener: Function): void\n```\n\n```typescript\n/**\n * 取消本 iframe 中对所有事件的所有监听\n */\nfunction eventClearAll(): void\n```\n\n#### Quick Reply 命令\n\n我们还提供了 Quick Reply 命令 `/event-emit`, 允许你通过在快速回复中发送事件来触发 js 代码.\n\n快速回复部分:\n\n```text\n/event-emit data=8 \"事件名称\"\n```\n\niframe 部分:\n\n```typescript\ntavernOn(\"事件名称\", test);\n```\n\n当我们按下该快速回复的按钮后, 正在监听 \"事件名称\" 消息频道的 js 代码将会获得 `data` 并开始执行.\n\n### 其他辅助功能\n\n```typescript\n/**\n * 获取 iframe 的名称\n *\n * @returns 对于楼层消息是 `message-楼层id-是该楼层第几个iframe`; 对于全局脚本是 `script-脚本名称`\n */\nfunction getIframeName(): string\n```\n\n```typescript\n/**\n * 从消息楼层 iframe 的 `iframe_name` 获取它所在楼层的楼层 id, **只能对楼层消息 iframe** 使用\n *\n * @param iframe_name 消息楼层 iframe 的名称\n * @returns 楼层 id\n */\nfunction getMessageId(iframe_name: string): number\n```\n\n```typescript\n/**\n * 获取本消息楼层 iframe 所在楼层的楼层 id, **只能对楼层消息 iframe** 使用\n *\n * @returns 楼层 id\n */\nfunction getCurrentMessageId(): number\n```\n\n```typescript\n/**\n * 获取最新楼层 id\n *\n * @returns 最新楼层id\n */\nasync function getLastMessageId(): Promise<number>;\n```\n\n## 播放器功能\n\n用于解决iframe之间难以继承播放进度的问题，变量操作的延伸功能。\n\n### 基于 Dynamic Audio 的改动\n\n- :wastebasket: 删除根据表情图切歌的功能\n\n- :wastebasket: 删除从本地加载音频的功能\n\n- :star: 现在从网络链接加载音频\n\n- :star: 对音频列表中音频的排序，编辑和删除\n\n- :star: 增加导入按钮，可以批量输入链接导入到歌单，重复链接会过滤，新插入的音频在最上方\n\n- :star: 给音乐和音频播放器单独加上开关\n\n- :star: 增加播放暂停按钮和播放进度显示\n\n- :star: 新增几种播放模式，现在有【列表循环、随机播放、单曲循环、播完停止】四种模式\n\n- :star: 注册了Quick Reply命令，现在不使用脚本注入，只启动播放器也可以使用快速回复听歌了\n\n- :star: 音频的链接存储在当前聊天的局部变量中，切换聊天就会清空，切换回来时会再加载。可以使用listvar查看变量列表，变量名分别为`bgmurl`和`ambienturl`，支持使用Quick Reply对播放列表做更多自定义的改动\n\n### 播放器 Quick Reply 命令\n\n#### 播放器控制\n\n```text\n/audioenable [type=bgm|ambient] [state=true|flase]?\n```\n\n控制音乐播放器或音效播放器的开启与关闭。\n\n- `type`: 音乐或音效\n- `state` (可选): 开启或关闭, 不填写默认为 `true`\n\n例：`/audioenable type=ambient state=false`\n\n#### 导入音频到播放界面\n\n```text\n/audioimport [type=bgm|ambient] [play=true|flase]? url\n```\n\n- `type`: 音乐或音效\n- `play` (可选): 是否导入之后立即播放第一个音频, 不填写默认为 `true`\n- `url`: 要播放的音频链接，可以批量导入, 多个链接之间用**英文**逗号隔开\n\n例：`/audioimport type=ambient play=false url=https://example.com/sound1.mp3,https://example.com/sound2.mp3`\n\n#### 选择音频并播放\n\n```text\n/audioselect [type=bgm|ambient] url\n```\n\n- `type`: 音乐或音效\n- `url`: 要播放的音频链接，如果在播放列表里不存在则先导入再播放\n\n例: `/audioselect type=bgm https://example.com/song.mp3`\n\n#### 播放或暂停\n\n```text\n/audioplay [type=bgm|ambient] [play=true|flase]?\n```\n\n- `type`: 音乐或音效\n- `play` (可选): 播放或暂停, 不填写默认为 `true`\n\n例: `/audioplay type=ambient play=false`\n\n#### 模式切换\n\n```text\n/audiomode [type=bgm|ambient] [mode=repeat|random|single|stop]\n```\n\n- `type`: 音乐或音效\n- `mode`: 播放模式, 分别是列表循环、随机播放、单曲循环、播完停止\n\n例: `/audiomode type=ambient mode=random`\n",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 1,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 4,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": false,
            "automationId": "",
            "role": null,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "uid": 1,
            "displayIndex": 1,
            "extensions": {
                "position": 1,
                "exclude_recursion": false,
                "display_index": 1,
                "probability": 100,
                "useProbability": true,
                "depth": 4,
                "selectiveLogic": 0,
                "group": "",
                "group_override": false,
                "group_weight": 100,
                "prevent_recursion": false,
                "delay_until_recursion": false,
                "scan_depth": null,
                "match_whole_words": null,
                "use_group_scoring": false,
                "case_sensitive": null,
                "automation_id": "",
                "role": 0,
                "vectorized": false,
                "sticky": 0,
                "cooldown": 0,
                "delay": 0
            }
        },
        "2": {
            "key": [],
            "keysecondary": [],
            "comment": "知识：正则助手（有需可以单独打开，关闭其他）",
            "content": "{{char}} is a RegEx Master, an AI assistant specialized in crafting regular expressions for SillyTavern. It has mastered all regex syntax and usage patterns, capable of handling regex requirements from basic to highly complex.\n\nAs a regex expert, it will:\n1. Analyze user requirements meticulously to understand matching/capturing needs\n2. Implement flexible and optimal regex solutions\n3. Consider edge cases to ensure regex reliability\n4. Provide answers in this strict format:\n\nRegex Name: [descriptive name]\nSearch Pattern:\n```[regex code]```\nReplace With:\n```[replacement content or indicate removal]```\n\nRegex Format Explanation:\nA regular expression pattern in SillyTavern must include:\n1. Forward slash (/) delimiters at start and end\n2. The actual regex pattern between the delimiters\n3. Modifier flags after the ending delimiter:\n- g (global): Find all matches rather than stopping at first match\n- s (dotall): Allows dot (.) to match newline characters\n- m (multiline): Makes ^ and $ match start/end of each line\n- i (case-insensitive): Makes pattern case-insensitive\n\nExample: /<details>.*?</details>/gs\n- /: Start delimiter\n- <details>.*?</details>: Pattern to match\n- /: End delimiter\n- gs: Global and dotall modifiers\n\nCore Competencies:\n\n1. Flexible Matching:\n- Wildcards and dot (.) for single character matching\n- Character classes with [] and [^]\n- Shorthand classes (\\w, \\d, \\s)\n- Custom character ranges [a-z0-9]\n- Optional elements with ?\n- Alternation with |\n\n2. Greedy vs Lazy Matching:\n- Greedy quantifiers (*, +, {n,m})\n- Lazy/non-greedy quantifiers (*?, +?, {n,m}?)\n- Understanding when to use each for precise matching\n- Balancing between matching efficiency and accuracy\n\n3. Lookaround Assertions:\n- Positive lookahead (?=...)\n- Negative lookahead (?!...)\n- Positive lookbehind (?<=...)\n- Negative lookbehind (?<!...)\n- Zero-width assertions\n\n4. Boundary Matching:\n- Start/end anchors (^, $)\n- Word boundaries (\\b)\n- Line boundaries\n- String boundaries\n- Multiline mode considerations\n\n5. Groups and Capturing:\n- Capturing groups (...)\n- Non-capturing groups (?:...)\n- Named groups (?<name>...)\n- Backreferences \\1, \\2, \\k<name>\n- Atomic groups (?>...)\n\nAdvanced Features:\n- Pattern flags (g, m, s, i)\n- Unicode support\n- Conditional patterns\n- Recursive patterns\n- Possessive quantifiers\n- Branch reset groups\n- Atomic grouping\n- Comments and free-spacing mode\n\nExample Patterns:\n\n1. Remove content before tag:\n```/^.*?\\[enter acting\\]/s```\n\n2. Capture content within specific tags:\n```/<StatusBlock>.*?</StatusBlock>/gs```\n\n3. Complex JSON text capture:\n```/\\s*\"otome_interface\"\\s*:\\s*\\{\\s*\"dialogue\"\\s*:\\s*\\{\\s*\"org\"\\s*:\\s*\"(.*?)\"\\s*,\\s*\"cn\"\\s*:\\s*\"(.*?)\"\\s*\\}\\s*,\\s*\"speaker\"\\s*:\\s*\"([^(\\n\\r)]*)\"\\s*,\\s*\"clothes&pose\"\\s*:\\s*\"(.*?)([0-9A-Za-z]{6}\\.[0-9a-z]+)\"\\s*,\\s*\"expression\"\\s*:\\s*\"(.*?)([0-9A-Za-z]{6}\\.[0-9a-z]+)\"\\s*,\\s*\"background\"\\s*:\\s*\"(.*?)([0-9A-Za-z]{6}\\.[0-9a-z]+)\"\\s*,\\s*\"depth_position\"\\s*:\\s*\"(far|mid|close)\"\\s*,\\s*\"horizontal_position\"\\s*:\\s*\"(right|mid|left)\"\\s*,\\s*\"animation\"\\s*:\\s*\"(approach|retreat|static|bounce|shake|flip)\"\\s*\\}/gm```\n\n4. Match specific tags with content:\n```/<(illustration|img)>.*[^0-9A-Za-z\\.\\s</>]+/gm```\n\nIt can handle:\n- XML/HTML tag matching\n- Complex JSON parsing\n- Text extraction and transformation\n- Format validation\n- Pattern replacement\n- Negative matching\n- Multi-line processing\n\nFor any regex requirement, it provides precise and efficient solutions. For complex patterns, it can break down the regex components to ensure user comprehension.",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 1,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 4,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": false,
            "automationId": "",
            "role": null,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "uid": 2,
            "displayIndex": 2,
            "extensions": {
                "position": 1,
                "exclude_recursion": false,
                "display_index": 2,
                "probability": 100,
                "useProbability": true,
                "depth": 4,
                "selectiveLogic": 0,
                "group": "",
                "group_override": false,
                "group_weight": 100,
                "prevent_recursion": false,
                "delay_until_recursion": false,
                "scan_depth": null,
                "match_whole_words": null,
                "use_group_scoring": false,
                "case_sensitive": null,
                "automation_id": "",
                "role": 0,
                "vectorized": false,
                "sticky": 0,
                "cooldown": 0,
                "delay": 0
            }
        },
        "3": {
            "key": [],
            "keysecondary": [],
            "comment": "知识：前端助手适配（酒馆插件，需先去类脑帖子了解下）",
            "content": "You are Frontend Assistant, an AI specialized in creating elegant, dynamic, and responsive UI elements for SillyTavern's scripting injection system. Your expertise includes modern HTML5/CSS3 design principles, event-driven JavaScript functionality, and efficient code optimized for chat-based environments.\n\nCore Capabilities:\n1. Generate **complete, self-contained HTML documents** with embedded styles (`<style>`) and scripts (`<script>`).\n2. Create **responsive and mobile-friendly designs** that adapt seamlessly to various screen sizes, including **automatic adaptation for both mobile and PC screens**.\n3. Implement **CSS animations and transitions** to enhance user experience and interactivity.\n4. Design complex **UI components** such as dialogue boxes, status displays, or interactive elements, ready for integration in chat interfaces.\n5. Provide **code that integrates seamlessly with SillyTavern's scripting injection system**, ensuring compatibility with features like variable binding, event handling, and iframe communication.\n6. Utilize **event handling functions** (`eventOn()`, `eventEmit()`, etc.) and **state management functions** (`getVariables()`, `setVariables()`) for dynamic and interactive behavior.\n\n**Code Generation Rules:**\n1. Always generate **complete HTML documents**, including:\n   - `<html>`, `<head>`, and `<body>` tags.\n   - Inline CSS wrapped in `<style>` tags within the `<head>`.\n   - Inline JavaScript wrapped in `<script>` tags within the `<body>`.\n2. Ensure **all styles and scripts are embedded** and avoid external dependencies (e.g., libraries, images, or fonts) unless explicitly provided by the user.\n3. Use **class=\"user_avatar\"** for user avatar integration and provide appropriate CSS for avatar styling. \n4. Include the comment `<!-- disable-default-loading -->` where necessary to disable SillyTavern's built-in loading animation.\n5. Ensure **responsive design principles** are applied, including:\n   - **Media queries** to adapt layouts for mobile and PC screen sizes.\n   - Use of relative units like percentages (`%`), `em`, or `rem` for flexible scaling.\n   - Grid or flexbox layouts for proportional adaptability across devices.\n6. Optimize **HTML and CSS for compactness and efficiency**, making it suitable for dynamic rendering in chat environments.\n\n**Special Features Support:**\n1. **User Avatar Integration:**\n   - Use the `user_avatar` class to dynamically display the current user's avatar. Provide clear instructions for applying additional styles if required.\n\n2. **Event System Integration:**\n   - Fully support SillyTavern's **iframe_events** and **tavern_events** systems.\n   - Implement event listeners (`eventOn()`, `eventOnce()`) and event emitters (`eventEmit()`) to handle user interactions or automate processes.\n   - Use `eventWaitOnce()` for asynchronous event handling when needed.\n\n3. **Variable Operations:**\n   - Use `getVariables()` to retrieve chat state variables and `setVariables()` to update or manage them dynamically.\n   - Incorporate variable-based logic into UI components to reflect real-time state changes.\n\n4. **Quick Reply Command Integration:**\n   - Provide examples of how UI components can work with Quick Reply commands to trigger JavaScript functions or update variables.\n\n5. **World Info and Lorebook Integration:**\n   - Support interaction with SillyTavern's lorebook and world info systems.\n   - Use the appropriate APIs (`getLorebookEntries()`, `setLorebookEntries()`, etc.) for creating or modifying entries dynamically.\n\n**Code Structure Requirements:**\n1. Every generated HTML document must follow this structure:\n   ```html\n   <html>\n     <head>\n       <style>\n         /* Inline CSS here */\n         /* Example of responsive design for both mobile and PC */\n         body {\n           font-family: Arial, sans-serif;\n           margin: 0;\n           padding: 0;\n           background-color: #f0f0f0;\n         }\n         .container {\n           max-width: 1200px;\n           margin: 0 auto;\n           padding: 1rem;\n         }\n         /* Mobile-first design */\n         .ui-element {\n           width: 100%;\n           padding: 1rem;\n           background-color: #ffffff;\n           border-radius: 8px;\n           box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n           text-align: center;\n         }\n         /* Adjustments for larger screens */\n         @media (min-width: 768px) {\n           .ui-element {\n             width: 75%;\n             margin: 0 auto;\n           }\n         }\n         @media (min-width: 1200px) {\n           .ui-element {\n             width: 50%;\n           }\n         }\n       </style>\n     </head>\n     <body>\n       <div class=\"container\">\n         <div class=\"ui-element\">\n           <!-- Content here -->\n         </div>\n       </div>\n       <script>\n         // Inline JavaScript here\n       </script>\n     </body>\n   </html>\n2.Use inline CSS within <style> tags to define all visual styles.  \n3.Use inline JavaScript within <script> tags for interactivity and dynamic behavior.  \n4.Ensure compatibility with SillyTavern's scripting system, avoiding complex dependencies or external resources.  \n\n**Interaction Guidelines:**\n\n1. Always respond in the same language as the user.  \n2. Ask clarifying questions about UI requirements or specific design preferences.  \n3. Provide concise explanations for the generated code, focusing on implementation and functionality.  \n4. Offer modifications or enhancements proactively to improve the UI or address potential issues.  \n5. Ensure all generated code is ready for direct integration into SillyTavern's scripting injection system.  \n\n**Dynamic Behavior and State Management Workflow:**\n\n1. Use event-driven programming to handle user interactions or automate processes.  \n2. Leverage variable operations to create persistent, stateful components that reflect real-time changes in chat environments.  \n3. Provide examples of how to use Quick Reply commands to interact with the generated UI components.  \n\n注意事项：\n由于渲染机制的原因：\n\n动态高度增长：\n页面高度应随着内容增多自动增长，但不能超过视口高度的限制（如 100vh）。\n当内容超过视口高度时，启用滚动条，避免页面无限增长。\n子容器高度的自适应：\n子容器（如聊天区域）高度需根据内容动态增长，但需要定义 最小高度 和 最大高度。\n当内容不足时，容器高度应填满剩余空间；当内容超出时，容器高度应限制在最大高度范围内，并启用滚动。\n父容器与子容器的高度链：\n父容器的高度应正确传递给子容器，确保子容器能够根据父容器的高度动态调整。\n所有高度计算需考虑 padding 和 margin，避免高度累加导致布局问题。\n滚动条与内容溢出：\n当内容超出容器高度时，必须启用 overflow-y: auto，确保用户可以滚动查看内容。\n避免内容直接撑开页面导致比例失调。\n适配不同设备：\n在移动端和 PC 端均需保持布局比例正常，避免压扁或过长的问题。\n\nYour ultimate goal is to help users create engaging, dynamic, and visually rich UI elements for SillyTavern, leveraging the scripting injection system's full potential.  \nEnsure all code is robust, efficient, and optimized for chat-based environments. Tailor your solutions to the unique constraints and features of the SillyTavern platform.",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 1,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 4,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": false,
            "automationId": "",
            "role": null,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "uid": 3,
            "displayIndex": 3,
            "extensions": {
                "position": 1,
                "exclude_recursion": false,
                "display_index": 3,
                "probability": 100,
                "useProbability": true,
                "depth": 4,
                "selectiveLogic": 0,
                "group": "",
                "group_override": false,
                "group_weight": 100,
                "prevent_recursion": false,
                "delay_until_recursion": false,
                "scan_depth": null,
                "match_whole_words": null,
                "use_group_scoring": false,
                "case_sensitive": null,
                "automation_id": "",
                "role": 0,
                "vectorized": false,
                "sticky": 0,
                "cooldown": 0,
                "delay": 0
            }
        },
        "4": {
            "key": [],
            "keysecondary": [],
            "comment": "知识：ST script知识补充简化版（如有必要打开）",
            "content": "# ST Script Knowledge Prompt\n\nThe following is a concise explanation of STscript, a scripting language for expanding the functionality of SillyTavern. Use this knowledge to interact with tools or bots effectively when discussing or using STscript.\n\n---\n\n## **1. What is STscript?**\nSTscript is a simple yet powerful scripting language that extends SillyTavern's functionality. It allows creating mini-games, building AI-powered chat insights, and unleashing creativity through custom scripts. Key features include:\n- **Command batching**: Chain multiple commands together with pipes (`|`).\n- **Data piping**: Pass data between commands.\n- **Macros and variables**: Store and manipulate data dynamically.\n\nScripts execute sequentially, transferring data between commands via pipes. For example:\n```stscript\nstscript\n/pass Hello, World! | /echo\nHere:\n\n/pass writes \"Hello, World!\" to the pipe.\n/echo displays the piped value as a toast notification.\n2. Key Concepts\nVariables\nLocal variables are saved to the current chat metadata.\nGlobal variables persist across the app in settings.json.\nCommands to manipulate variables include:\n/setvar key=name value=val\n/getvar name\n/addvar key=name increment\n/flushvar name\nClosures\nClosures are blocks of code, wrapped in {: and :}, that are executed only when called. They have their own scope and allow anonymous or named subcommands.\n\nExample:\n/let myClosure {:\n    /echo This is a closure\n:} |\n/:myClosure\nClosures can also take arguments:\n/let addNumbers {: a=0 b=0\n    /add {{var::a}} {{var::b}}\n:} |\n/:addNumbers a=5 b=10\nPiped Arguments\nParent closures do not automatically pipe values to child closures unless explicitly referenced with {{pipe}}.\n\nExample:\n/echo Hello |\n/times 2 {:\n    /echo {{pipe}}\n:}\n3. Flow Control\nConditionals\nUse /if to create conditional expressions:\n/if left=valueA right=valueB rule=comparison else=\"(false commands)\" \"(true commands)\"\nExample:\n/input Enter your favorite drink: |\n/if left={{pipe}} right=\"coffee\" rule=eq else=\"/echo Not a coffee fan! | /abort\" \"/echo Welcome to the coffee club!\"\nLoops\nTwo main looping constructs:\n\n/while: Executes commands while a condition holds true.\n/times: Executes commands a specified number of times.\nExample of /while:\n/setvar key=i 0 |\n/while left=i right=5 rule=lt \"/addvar key=i 1 | /echo {{getvar::i}}\"\n/setvar key=i 0 |\n/while left=i right=5 rule=lt \"/addvar key=i 1 | /echo {{getvar::i}}\"\n/times 3 \"/echo Iteration {{timesIndex}}\"\n4. Input/Output\nUser Interaction\nInput box: /input Enter a value | /echo You entered {{pipe}}\nPopup: /popup wide=on Welcome to STscript!\nButtons: /buttons labels=[\"Yes\",\"No\"] Are you sure?\nMessage Manipulation\nSend messages:\n/send (text) - Adds a user message.\n/sys (text) - Adds a neutral narrator message.\n/sendas name=charName (text) - Sends a message as a specific character.\nModify messages:\n/hide, /unhide, /cut, /del - Manage message visibility or delete.\n5. Math and Logic\nBasic Math Commands\nPerform operations like addition, subtraction, multiplication, and more:\n/add 5 10 | /echo Result: {{pipe}}\n/mul 3 4 | /echo Product: {{pipe}}\nBoolean Comparisons\nSupported rules include:\n\neq (equals), neq (not equals), lt (less than), gt (greater than), in (includes substring), etc.\n6. Utility Features\nRandom Numbers\nGenerate random values:\n/rand round=ceil from=1 to=10 | /echo Random number: {{pipe}}\nExport to LLM\nGenerate AI responses via /genraw or /gen:\n/genraw lock=on Write a short story about a wizard. |\n/popup <h3>Story:</h3><p>{{pipe}}</p>\n7. Debugging\nUse /breakpoint to pause and debug scripts. Inspect variables, pipe values, and more.\n\nExample:\n/let x 10 |\n/add x 5 |\n/breakpoint |\n/echo Sum is {{pipe}}\n8. Extensions\nSTscript supports built-in and third-party extensions:\n\n/imagine for image generation.\n/roll for dice rolls.\n/websearch for online queries.\n9. Example Script\nThis script calculates the factorial of a number using closures:\n/let fact {: n=\n    /if left={{var::n}} rule=gt right=1\n        else={:\n            /return 1\n        :}\n        {:\n            /sub {{var::n}} 1 |\n            /:fact n={{pipe}} |\n            /mul {{var::n}} {{pipe}}\n        :}\n:} |\n/input Enter a number: |\n/let n {{pipe}} |\n/:fact n={{var::n}} |\n/echo Factorial of {{var::n}} is {{pipe}}",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 1,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 4,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": false,
            "automationId": "",
            "role": null,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "uid": 4,
            "displayIndex": 4,
            "extensions": {
                "position": 1,
                "exclude_recursion": false,
                "display_index": 4,
                "probability": 100,
                "useProbability": true,
                "depth": 4,
                "selectiveLogic": 0,
                "group": "",
                "group_override": false,
                "group_weight": 100,
                "prevent_recursion": false,
                "delay_until_recursion": false,
                "scan_depth": null,
                "match_whole_words": null,
                "use_group_scoring": false,
                "case_sensitive": null,
                "automation_id": "",
                "role": 0,
                "vectorized": false,
                "sticky": 0,
                "cooldown": 0,
                "delay": 0
            }
        },
        "5": {
            "key": [],
            "keysecondary": [],
            "comment": "不要打开，本条为说明：仔细阅读每项名字，需要什么就打开什么",
            "content": "",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 1,
            "disable": true,
            "excludeRecursion": false,
            "preventRecursion": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 4,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": false,
            "automationId": "",
            "role": null,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "uid": 5,
            "displayIndex": 5,
            "extensions": {
                "position": 1,
                "exclude_recursion": false,
                "display_index": 5,
                "probability": 100,
                "useProbability": true,
                "depth": 4,
                "selectiveLogic": 0,
                "group": "",
                "group_override": false,
                "group_weight": 100,
                "prevent_recursion": false,
                "delay_until_recursion": false,
                "scan_depth": null,
                "match_whole_words": null,
                "use_group_scoring": false,
                "case_sensitive": null,
                "automation_id": "",
                "role": 0,
                "vectorized": false,
                "sticky": 0,
                "cooldown": 0,
                "delay": 0
            }
        },
        "6": {
            "key": [],
            "keysecondary": [],
            "comment": "知识：ST slash command合集（大TOKEN警告）",
            "content": "/? (slash|macros|format|hotkeys)? // Get help on macros, chat formatting and commands.\n// (string)? // Write a comment.\n/abort [quiet=true|false]?=true (string)? // Aborts the slash command batch execution.\n/abs (number|varname) // Performs an absolute value operation of a value and passes the result down the pipe. Can use variable names. Example: /abs i\n/add (...number|varname|list) // Performs an addition of the set of values and passes the result down the pipe. Can use variable names, or a JSON array consisting of numbers and variables (with quotes). Example: /add 10 i 30 j /add [\"count\", 15, 2, \"i\"]\n/addglobalvar [key=varname] (number|string) // Add a value to a global variable and pass the result down the pipe. Example: /addglobalvar key=score 10\n/addswipe [switch=true|false]? (string) // Adds a swipe to the last chat message. Use switch=true to switch to directly switch to the new swipe.\n/addvar [key=varname] (number|string) // Add a value to a local variable and pass the result down the pipe. Example: /addvar key=score 10\n/api [quiet=true|false]?=false (kobold|horde|novel|koboldcpp|kcpp|openai|oai|google|openrouter|openrouter-text|ooba|mancer|vllm|aphrodite|tabby|togetherai|llamacpp|ollama|infermaticai|dreamgen|featherless|huggingface|generic|windowai|claude|scale|ai21|makersuite|mistralai|custom|cohere|perplexity|groq|01ai|blockentropy|nanogpt)? // Connect to an API. If no argument is provided, it will return the currently connected API. Available APIs: kobold, horde, novel, koboldcpp, kcpp, openai, oai, google, openrouter, openrouter-text, ooba, mancer, vllm, aphrodite, tabby, togetherai, llamacpp, ollama, infermaticai, dreamgen, featherless, huggingface, generic, windowai, claude, scale, ai21, makersuite, mistralai, custom, cohere, perplexity, groq, 01ai, blockentropy, nanogpt\n/api-url [api=custom|kobold|ooba|mancer|vllm|aphrodite|tabby|koboldcpp|togetherai|llamacpp|ollama|infermaticai|dreamgen|openrouter|featherless|huggingface|generic]? [connect=true|false]?=true [quiet=true|false]?=false (string)? // Set the API url / server url for the currently selected API, including the port. If no argument is provided, it will return the current API url. If a manual API is provided to set the URL, make sure to set connect=false, as auto-connect only works for the currently selected API, or consider switching to it with /api first. This slash command works for most of the Text Completion sources, KoboldAI Classic, and also Custom OpenAI compatible for the Chat Completion sources. If unsure which APIs are supported, check the auto-completion of the optional api argument of this command.\n/ask [name=string] [return=pipe|object|toast-html|toast-text|console|none]?=pipe (string)? // Asks a specified character card a prompt. Character name must be provided in a named argument.\n/audioenable [type=bgm|ambient] [state=true|false]?=true // 控制音乐播放器或音效播放器的开启与关闭。 Example: /audioenable type=bgm state=true 打开音乐播放器。 /audioenable type=ambient state=false 关闭音效播放器。\n/audioimport [type=bgm|ambient] [play=true|false]?=true (string) // 导入音频或音乐链接，并决定是否立即播放，默认为自动播放。可批量导入链接，使用英文逗号分隔。 Example: /audioimport type=bgm https://example.com/song1.mp3,https://example.com/song2.mp3 导入 BGM 音乐并立即播放第一个链接。 /audioimport type=ambient play=false url=https://example.com/sound1.mp3,https://example.com/sound2.mp3 导入音效链接 (不自动播放)。\n/audiomode [type=bgm|ambient] [mode=repeat|random|single|stop] // 切换音乐播放器或音效播放器的播放模式。 Example: /audiomode type=bgm mode=repeat 将音乐播放器的模式设置为循环播放。 /audiomode type=ambient mode=random 将音效播放器的模式设置为随机播放。\n/audioplay [type=bgm|ambient] [play=true|false]=true // 控制音乐播放器或音效播放器的播放与暂停。 Example: /audioplay type=bgm 播放当前音乐。 /audioplay type=ambient play=false 暂停当前音效。\n/audioselect [type=bgm|ambient] (string) // 选择并播放音频。如果音频链接不存在，则先导入再播放。 Example: /audioselect type=bgm https://example.com/song.mp3 选择并播放指定的音乐。 /audioselect type=ambient https://example.com/sound.mp3 选择并播放指定的音效。\n/bg (string)? // Sets a background according to the provided filename. Partial names allowed. If no background is provided, this will return the currently selected background. Example: /bg beach.jpg /bg\n/bgcol // – WIP test of auto-bg avg coloring\n/break (string|number|range|bool|varname|closure|subcommand|list|dictionary)? // Break out of a loop or closure executed through /run or /:\n/breakpoint // Set a breakpoint for debugging in the QR Editor.\n/bubble // Sets the message style to bubble chat mode.\n/buttons [labels=list] (string) // Shows a blocking popup with the specified text and buttons. Returns the clicked button label into the pipe or empty string if canceled. Example: /buttons labels=[\"Yes\",\"No\"] Do you want to continue?\n/caption [quiet=true|false]?=false [mesId=number]? (string)? // Caption an image with an optional prompt and passes the caption down the pipe. Only multimodal sources support custom prompts. Provide a message ID to get an image from a message instead of uploading one. Set the \"quiet\" argument to true to suppress sending a captioned message, default: false.\n/char-find [...tag=string]? [preferCurrent=true|false]?=true [quiet=true|false]?=false (string)? // Searches for a character and returns its avatar key. This can be used to choose the correct character for something like /sendas or other commands in need of a character name if you have multiple characters with the same name. Example: /char-find name=\"Chloe\" Returns the avatar key for \"Chloe\". /search name=\"Chloe\" tag=\"friend\" Returns the avatar key for the character \"Chloe\" that is tagged with \"friend\". This is useful if you for example have multiple characters named \"Chloe\", and the others are \"foe\", \"goddess\", or anything else, so you can actually select the character you are looking for.\n/chat-manager // Opens the chat manager for the current character/group.\n/classify [api=local|extras|llm|webllm]? [prompt=string]? (string) // Performs an emotion classification of the given text and returns a label. Allows to specify which Classifier API to perform the classification with. Example: /classify I am so happy today!\n/classify-expressions [return=pipe|object|toast-html|toast-text|console|none]?=pipe [format=plain|json]? // Returns a list of available expressions, including custom expressions.\n/closechat // Closes the current chat.\n/closure-deserialize (string) // Deserialize a closure from text. Examples: /closure-deserialize {{getvar::myClosure}} | /let myClosure {{pipe}} | /let y bar | /:myClosure x=foo\n/closure-serialize (closure) // Serialize a closure as text that can be stored in global and chat variables. Examples: /closure-serialize {: x=1 /echo x is {{var::x}} and y is {{var::y}} :} | /setvar key=myClosure\n/comment [compact=true|false]?=false [at=number]? [return=pipe|object|toast-html|toast-text|console|none]?=none (string) // Adds a note/comment message not part of the chat. If compact is set to true, the message is sent using a compact layout. Example: /comment This is a comment /comment compact=true This is a compact comment\n/context [quiet=true|false]?=false (string)? // Selects context template by name. Gets the current template if no name is provided\n/continue [await=true|false]?=false (string)? // Continues the last message in the chat, with an optional additional prompt. If await=true named argument is passed, the command will await for the continued generation before proceeding. Example: /continue Continues the chat with no additional prompt and immediately proceeds to the next command. /continue await=true Let's explore this further... Continues the chat with the provided prompt and waits for the generation to finish.\n/cos (number|varname) // Performs a cosine operation of a value and passes the result down the pipe. Can use variable names. Example: /cos i\n/count // Counts the number of tokens in the current chat.\n/createentry [file=string] [key=string]? (string)? // Create a new record in the specified book with the key and content (both are optional) and pass the UID down the pipe. Example: /createentry file=chatLore key=Shadowfang The sword of the king\n/cut (...number|range) // Cuts the specified message or continuous chunk from the chat. Ranges are inclusive! Example: /cut 0-10\n/db // Open the data bank\n/db-add [source=global|character|chat]?=chat [name=string]? (string) // Add an attachment to the Data Bank. If name is not provided, it will be generated automatically. Returns the URL of the attachment.\n/db-delete [source=global|character|chat]?=chat (string) // Delete an attachment from the Data Bank.\n/db-disable [source=global|character|chat]? (string) // Disable an attachment in the Data Bank by its name or URL. Optionally, provide the source of the attachment.\n/db-enable [source=global|character|chat]? (string) // Enable an attachment in the Data Bank by its name or URL. Optionally, provide the source of the attachment.\n/db-get [source=global|character|chat]? (string) // Get attachment text from the Data Bank. Either provide the name or URL of the attachment. Optionally, provide the source of the attachment.\n/db-list [source=global|character|chat]? [field=name|url]?=url // List attachments in the Data Bank as a JSON-serialized array. Optionally, provide the source of the attachments and the field to list by.\n/db-update [source=global|character|chat]?=chat [name=string]? [url=string]? (string) // Update an attachment in the Data Bank, preserving its name. Returns a new URL of the attachment.\n/decglobalvar (varname) // Decrement a global variable by 1 and pass the result down the pipe. Example: /decglobalvar score\n/decvar (varname) // Decrement a local variable by 1 and pass the result down the pipe. Example: /decvar score\n/delay (number) // Delays the next command in the pipe by the specified number of milliseconds. Example: /delay 1000\n/delchat // Deletes the current chat.\n/delmode (number)? // Enter message deletion mode, and auto-deletes last N messages if numeric argument is provided.\n/delname (string) // Deletes all messages attributed to a specified name. Example: /delname John\n/delswipe (number) // Deletes a swipe from the last chat message. If swipe id is not provided, it deletes the current swipe. Example: /delswipe Deletes the current swipe. /delswipe 2 Deletes the second swipe from the last chat message.\n/div (number|varname) (number|varname) // Performs a division of two values and passes the result down the pipe. Can use variable names. Example: /div 10 i\n/dupe // Duplicates the currently selected character.\n/echo [title=string]? [severity=string]?=info [timeout=number]?=4000 [extendedTimeout=number]?=10000 [preventDuplicates=true|false]?=false [awaitDismissal=true|false]?=false [cssClass=string]? [color=string]? [escapeHtml=true|false]?=true [onClick=closure]? (string) // Echoes the provided text to a toast message. Can be used to display informational messages or for pipes debugging. Example: /echo title=\"My Message\" severity=warning This is a warning message /echo color=purple This message is purple /echo onClick={: /echo escapeHtml=false color=transparent cssClass=wider_dialogue_popup <img src=\"/img/five.png\" /> :} timeout=5000 Clicking on this message within 5 seconds will open the image.\n/event-emit [data=string|number|bool|list|dictionary]? (string) // 发送某个事件, 同时可以发送一些数据 `data`. 所有正在监听该消息频道的 listener 都会自动运行. Example: /event-emit \"读档\" /event-emit data={{getvar::数据}} \"存档\" /event-emit data=8 \"随便什么名称\"\n/extension-disable [reload=true|false]?=true (string) // Disables a specified extension. By default, the page will be reloaded automatically, stopping any further commands. If reload=false named argument is passed, the page will not be reloaded, and the extension will stay enabled until refreshed. The page either needs to be refreshed, or /reload-page has to be called. Example: /extension-disable Summarize\n/extension-enable [reload=true|false]?=true (string) // Enables a specified extension. By default, the page will be reloaded automatically, stopping any further commands. If reload=false named argument is passed, the page will not be reloaded, and the extension will stay disabled until refreshed. The page either needs to be refreshed, or /reload-page has to be called. Example: /extension-enable Summarize\n/extension-exists (string) // Checks if a specified extension exists. Example: /extension-exists SillyTavern-LALib\n/extension-state (string) // Returns the state of a specified extension (true if enabled, false if disabled). Example: /extension-state Summarize\n/extension-toggle [reload=true|false]?=true [state=true|false]? (string) // Toggles the state of a specified extension. By default, the page will be reloaded automatically, stopping any further commands. If reload=false named argument is passed, the page will not be reloaded, and the extension will stay in its current state until refreshed. The page either needs to be refreshed, or /reload-page has to be called. Example: /extension-toggle Summarize /extension-toggle Summarize state=true\n/findentry [file=string] [field=key|keysecondary|comment|content|constant|vectorized|selective|selectiveLogic|addMemo|order|position|disable|excludeRecursion|preventRecursion|delayUntilRecursion|probability|useProbability|depth|group|groupOverride|groupWeight|scanDepth|caseSensitive|matchWholeWords|useGroupScoring|automationId|role|sticky|cooldown|delay]?=key (...string) // Find a UID of the record from the specified book using the fuzzy match of a field value (default: key) and pass it down the pipe. Example: /findentry file=chatLore field=key Shadowfang\n/flat // Sets the message style to flat chat mode.\n/flushglobalvar (varname|closure)? // Deletes the specified global variable. Example: /flushglobalvar score Deletes the global variable score.\n/flushinject (string)? // Removes a script injection for the current chat. If no ID is provided, removes all script injections.\n/flushvar (varname|closure)? // Delete a local variable. Example: /flushvar score\n/forcesave // Forces a save of the current chat and settings\n/fuzzy [list=list|varname] [threshold=number]?=0.4 [mode=first|best]?=first (string) // Performs a fuzzy match of each item in the list against the text to search. If any item matches, then its name is returned. If no item matches the text, no value is returned. The optional threshold (default is 0.4) allows control over the match strictness. A low value (min 0.0) means the match is very strict. At 1.0 (max) the match is very loose and will match anything. The optional mode argument allows to control the behavior when multiple items match the text. first (default) returns the first match below the threshold. best returns the best match below the threshold. The returned value passes to the next command through the pipe. Example: /fuzzy list=[\"a\",\"b\",\"c\"] threshold=0.4 abc\n/gen [lock=on|off]? [name=string]?=System [length=number]? [as=system|char]? (string) // Generates text using the provided prompt and passes it to the next command through the pipe, optionally locking user input while generating and allowing to configure the in-prompt name for instruct mode (default = \"System\"). \"as\" argument controls the role of the output prompt: system (default) or char. If \"length\" argument is provided as a number in tokens, allows to temporarily override an API response length.\n/genraw [lock=on|off]? [instruct=on|off]?=on [stop=list]? [as=system|char]? [system=string]? [length=number]? (string) // Generates text using the provided prompt and passes it to the next command through the pipe, optionally locking user input while generating. Does not include chat history or character card. Use instruct=off to skip instruct formatting, e.g. /genraw instruct=off Why is the sky blue? Use stop=... with a JSON-serialized array to add one-time custom stop strings, e.g. /genraw stop=[\"\\n\"] Say hi \"as\" argument controls the role of the output prompt: system (default) or char. \"system\" argument adds an (optional) system prompt at the start. If \"length\" argument is provided as a number in tokens, allows to temporarily override an API response length.\n/getcharbook [type=primary|additional|all]?=primary (number|string)? // Get a name of the character-bound lorebook and pass it down the pipe. Returns empty string if character lorebook is not set. Does not work in group chats without providing a character avatar name.\n/getchatbook [name=string]? // Get a name of the chat-bound lorebook or create a new one if was unbound, and pass it down the pipe.\n/getchatname // Returns the name of the current chat file into the pipe.\n/getentryfield [file=string] [field=key|keysecondary|comment|content|constant|vectorized|selective|selectiveLogic|addMemo|order|position|disable|excludeRecursion|preventRecursion|delayUntilRecursion|probability|useProbability|depth|group|groupOverride|groupWeight|scanDepth|caseSensitive|matchWholeWords|useGroupScoring|automationId|role|sticky|cooldown|delay]?=content (string) // Get a field value (default: content) of the record with the UID from the specified book and pass it down the pipe. Example: /getentryfield file=chatLore field=content 123\n/getglobalvar [key=varname]? [index=number|string]? (varname)? // Get a global variable value and pass it down the pipe. The index argument is optional. Examples: /getglobalvar height /getglobalvar key=height /getglobalvar index=3 costumes\n/getpersonabook // Get a name of the current persona-bound lorebook and pass it down the pipe. Returns empty string if persona lorebook is not set.\n/getpromptentry [...identifier=string|list]? [...name=string|list]? [return=simple|list|dict]?=simple // Gets the state of the specified prompt entries. If return is simple (default) then the return will be a single value if only one value was retrieved; otherwise uses a dict (if the identifier parameter was used) or a list.\n/getvar [key=varname]? [index=number|string]? (varname)? // Get a local variable value and pass it down the pipe. The index argument is optional. Examples: /getvar height /getvar key=height /getvar index=3 costumes\n/go (string) // Opens up a chat with the character or group by its name\n/hide (number|range) // Hides a chat message from the prompt.\n/if [left=varname|string|number] [right=varname|string|number]? [rule=eq|neq|in|nin|gt|gte|lt|lte|not]?=eq [else=closure|subcommand]? (closure|subcommand) // Compares the value of the left operand a with the value of the right operand b, and if the condition yields true, then execute any valid slash command enclosed in quotes and pass the result of the command execution down the pipe. Numeric values and string literals for left and right operands supported. If the rule is not provided, it defaults to eq. If no right operand is provided, it defaults to checking the left value to be truthy. A non-empty string or non-zero number is considered truthy, as is the value true or on. Only acceptable rules for no provided right operand are not, and no provided rule - which default to returning whether it is not or is truthy. Available rules: eq => a == b (strings & numbers) neq => a !== b (strings & numbers) in => a includes b (strings & numbers as strings) nin => a not includes b (strings & numbers as strings) gt => a > b (numbers) gte => a >= b (numbers) lt => a < b (numbers) lte => a <= b (numbers) not => !a (truthy) Examples: /if left=score right=10 rule=gte \"/speak You win\" triggers a /speak command if the value of \"score\" is greater or equals 10. /if left={{lastMessage}} rule=in right=surprise {: /echo SURPISE! :} executes a subcommand defined as a closure if the given value contains a specified word. /if left=myContent {: /echo My content had some content. :} executes the defined subcommand, if the provided value of left is truthy (contains some kind of contant that is not empty or false) /if left=tree right={{getvar::object}} {: /echo The object is a tree! :} executes the defined subcommand, if the left and right values are equals.\n/imagine [quiet=true|false]?=false [negative=string]? [extend=true|false]? [edit=true|false]? [multimodal=true|false]? [snap=true|false]? [seed=number]? [width=number]? [height=number]? [steps=number]? [cfg=number]? [skip=number]? [model=string]? [sampler=string]? [scheduler=string]? [vae=string]? [upscaler=string]? [hires=true|false]? [scale=number]? [denoise=number]? [2ndpass=number]? [faces=true|false]? (you|me|scene|raw_last|last|face|background)? // Requests to generate an image and posts it to chat (unless quiet=true argument is specified). Supported arguments: you, me, scene, raw_last, last, face, background. Anything else would trigger a \"free mode\" to make generate whatever you prompted. Example: /imagine apple tree would generate a picture of an apple tree. Returns a link to the generated image.\n/imagine-comfy-workflow (string) // (workflowName) - change the workflow to be used for image generation with ComfyUI, e.g. /imagine-comfy-workflow MyWorkflow\n/imagine-source (string)? // If an argument is provided, change the source of the image generation, e.g. /imagine-source comfy. Returns the current source.\n/imagine-style (string)? // If an argument is provided, change the style of the image generation, e.g. /imagine-style MyStyle. Returns the current style.\n/impersonate [await=true|false]?=false (string)? // Calls an impersonation response, with an optional additional prompt. If await=true named argument is passed, the command will wait for the impersonation to end before continuing. Example: /impersonate What is the meaning of life?\n/incglobalvar (varname) // Increment a global variable by 1 and pass the result down the pipe. Example: /incglobalvar score\n/incvar (varname) // Increment a local variable by 1 and pass the result down the pipe. Example: /incvar score\n/inject [id=string] [position=before|after|chat|none]?=after [depth=number]?=4 [scan=true|false]?=false [role=system|assistant|user]? [ephemeral=true|false]?=false [filter=closure]? (string)? // Injects a text into the LLM prompt for the current chat. Requires a unique injection ID. Positions: \"before\" main prompt, \"after\" main prompt, in-\"chat\", hidden with \"none\" (default: after). Depth: injection depth for the prompt (default: 4). Role: role for in-chat injections (default: system). Scan: include injection content into World Info scans (default: false). Hidden injects in \"none\" position are not inserted into the prompt but can be used for triggering WI entries.\n/input [default=string]?=\"string\" [large=on|off]?=off [wide=on|off]?=off [okButton=string]? [rows=number]? (string)? // Shows a popup with the provided text and an input field. The default argument is the default value of the input field, and the text argument is the text to display.\n/instruct [quiet=true|false]?=false [forceGet=true|false]?=false (string)? // Selects instruct mode template by name. Enables instruct mode if not already enabled. Gets the current instruct template if no name is provided and instruct mode is enabled or forceGet=true is passed. Example: /instruct creative\n/instruct-off // Disables instruct mode\n/instruct-on // Enables instruct mode.\n/instruct-state (true|false)? // Gets the current instruct mode state. If an argument is provided, it will set the instruct mode state.\n/is-mobile // Returns true if the current device is a mobile device, false otherwise. Equivalent to {{isMobile}} macro.\n/lastsprite (string) // Returns the last set sprite / expression for the named character.\n/len (string|number|list|dictionary) // Gets the length of a value and passes the result down the pipe. For strings, returns the number of characters. For lists and dictionaries, returns the number of elements. For numbers, returns the number of digits (including the sign and decimal point). Example: /len Lorem ipsum | /echo\n/let [key=varname]? (varname)? (string|number|bool|list|dictionary|closure)? // Declares a new variable in the current scope. Examples: /let x foo bar | /echo {{var::x}} /let key=x foo bar | /echo {{var::x}} /let y\n/list-gallery [char=string]? [group=string]? // List images in the gallery of the current char / group or a specified char / group.\n/listinjects [return=object|chat-html|popup-html|toast-html|console|none]?=popup-html [format=popup|chat|none] // Lists all script injections for the current chat. Displays injects in a popup by default. Use the return argument to change the return type.\n/listvar [scope=all|local|global]?=all [return=object|chat-html|popup-html|toast-html|console|none]?=popup-html [format=popup|chat|none] // List registered chat variables. Displays variables in a popup by default. Use the return argument to change the return type.\n/lock (string)=toggle // Locks/unlocks a persona (name and avatar) to the current chat\n/log (number|varname) // Performs a logarithm operation of a value and passes the result down the pipe. Can use variable names. Example: /log i\n/lower (string) // Converts the provided string to lowercase.\n/max (...number|varname|list) // Returns the maximum value of the set of values and passes the result down the pipe. Can use variable names, or a JSON array consisting of numbers and variables (with quotes). Examples: /max 10 i 30 j /max [\"count\", 15, 2, \"i\"]\n/member-add (string) // Adds a new group member to the group chat. Example: /member-add John Doe\n/member-disable (number|string) // Disables a group member from being drafted for replies.\n/member-down (number|string) // Moves a group member down in the group chat list.\n/member-enable (number|string) // Enables a group member to be drafted for replies.\n/member-remove (number|string) // Removes a group member from the group chat. Example: /member-remove 2 /member-remove John Doe\n/member-up (number|string) // Moves a group member up in the group chat list.\n/messages [names=on|off]?=off [hidden=on|off]?=on [role=system|assistant|user]? (number|range) // Returns the specified message or range of messages as a string. Use the hidden=off argument to exclude hidden messages. Use the role argument to filter messages by role. Possible values are: system, assistant, user. Examples: /messages 10 Returns the 10th message. /messages names=on 5-10 Returns messages 5 through 10 with author names.\n/min (...number|varname|list) // Returns the minimum value of the set of values and passes the result down the pipe. Can use variable names, or a JSON array consisting of numbers and variables (with quotes). Example: /min 10 i 30 j /min [\"count\", 15, 2, \"i\"]\n/mod (number|varname) (number|varname) // Performs a modulo operation of two values and passes the result down the pipe. Can use variable names. Example: /mod i 2\n/model [quiet=true|false]?=false (string)? // Sets the model for the current API. Gets the current model name if no argument is provided.\n/movingui (string) // activates a movingUI preset by name\n/mul (...number|varname|list) // Performs a multiplication of the set of values and passes the result down the pipe. Can use variable names, or a JSON array consisting of numbers and variables (with quotes). Examples: /mul 10 i 30 j /mul [\"count\", 15, 2, \"i\"]\n/newchat [delete=true|false]?=false // Start a new chat with the current character\n/panels // Toggle UI panels on/off\n/parser-flag (STRICT_ESCAPING|REPLACE_GETVAR) (on|off)?=on // Set a parser flag.\n/pass (string|number|bool|list|dictionary|closure) // /pass (text) – passes the text to the next command through the pipe. Example: /pass Hello world\n/peek (number|string) // Shows a group member character card without switching chats. Examples: /peek Gloria Shows the character card for the character named \"Gloria\".\n/persona [mode=lookup|temp|all]?=all (string) // Selects the given persona with its name and avatar (by name or avatar url). If no matching persona exists, applies a temporary name.\n/pick-icon // Opens a popup with all the available Font Awesome icons and returns the selected icon's name. Example: /pick-icon | /if left={{pipe}} rule=eq right=false else={: /echo chosen icon: \"{{pipe}}\" :} {: /echo cancelled icon selection :} |\n/popup [scroll=true|false]?=true [large=true|false]?=false [wide=true|false]?=false [wider=true|false]?=false [transparent=true|false]?=false [okButton=string]?=OK [cancelButton=string]? [result=true|false]?=false (string) // Shows a blocking popup with the specified text and buttons. Returns the popup text. Example: /popup large=on wide=on okButton=\"Confirm\" Please confirm this action. /popup okButton=\"Left\" cancelButton=\"Right\" result=true Do you want to go left or right? | /echo 0 means right, 1 means left. Choice: {{pipe}}\n/pow (number|varname) (number|varname) // Performs a power operation of two values and passes the result down the pipe. Can use variable names. Example: /pow i 2\n/preset (string)? // Sets a preset by name for the current API. Gets the current preset if no name is provided. Example: /preset myPreset /preset\n/profile [await=true|false]?=true (string)? // Switch to a connection profile or return the name of the current profile in no argument is provided. Use <None> to switch to no profile.\n/profile-create (string) // Create a new connection profile using the current settings.\n/profile-get (string)? // Get the details of the connection profile. Returns the selected profile if no argument is provided.\n/profile-list // List all connection profile names.\n/profile-update // Update the selected connection profile.\n/proxy (string) // Sets a proxy preset by name.\n/rand [from=number]?=0 [to=number]?=1 [round=round|ceil|floor]? // Returns a random number between from and to (inclusive). Examples: /rand Returns a random number between 0 and 1. /rand 10 Returns a random number between 0 and 10. /rand from=5 to=10 Returns a random number between 5 and 10.\n/random (string)? // Start a new chat with a random character. If an argument is provided, only considers characters that have the specified tag.\n/regex [name=string] (string)? // Runs a Regex extension script by name on the provided string. The script must be enabled.\n/reload-page // Reloads the current page. All further commands will not be processed.\n/rename-char [silent=true|false]?=true [chats=true|false]?=<null> (string) // Renames the current character.\n/renamechat (string) // Renames the current chat.\n/resetpanels // resets UI panels to original state\n/round (number|varname) // Rounds a value and passes the result down the pipe. Can use variable names. Example: /round i\n/run [...args=string|number|bool|list|dictionary]? (varname|string|closure) // Runs a closure from a scoped variable, or a Quick Reply with the specified name from a currently active preset or from another preset. Named arguments can be referenced in a QR with {{arg::key}}.\n/send [compact=true|false]?=false [at=number]? [name=string]?={{user}} [return=pipe|object|toast-html|toast-text|console|none]?=none (string) // Adds a user message to the chat log without triggering a generation. If compact is set to true, the message is sent using a compact layout. If name is set, it will be displayed as the message sender. Can be an empty for no name. Example: /send Hello there! /send compact=true Hi\n/sendas [name=string] [avatar=string]? [compact=true|false]?=false [at=number]? [return=pipe|object|toast-html|toast-text|console|none]?=none (string) // Sends a message as a specific character. Uses the character avatar if it exists in the characters list. Example: /sendas name=\"Chloe\" Hello, guys! will send \"Hello, guys!\" from \"Chloe\". /sendas name=\"Chloe\" avatar=\"BigBadBoss\" Hehehe, I am the big bad evil, fear me. will send a message as the character \"Chloe\", but utilizing the avatar from a character named \"BigBadBoss\". If \"compact\" is set to true, the message is sent using a compact layout.\n/setentryfield [file=string] [uid=string] [field=key|keysecondary|comment|content|constant|vectorized|selective|selectiveLogic|addMemo|order|position|disable|excludeRecursion|preventRecursion|delayUntilRecursion|probability|useProbability|depth|group|groupOverride|groupWeight|scanDepth|caseSensitive|matchWholeWords|useGroupScoring|automationId|role|sticky|cooldown|delay]?=content (string) // Set a field value (default: content) of the record with the UID from the specified book. To set multiple values for key fields, use comma-delimited list as a value. Example: /setentryfield file=chatLore uid=123 field=key Shadowfang,sword,weapon\n/setglobalvar [key=varname] [index=number|string]? [as=string]?=string (string|number|bool|list|dictionary) // Set a global variable value and pass it down the pipe. The index argument is optional. To convert the value to a specific JSON type when using index, use the as argument. Example: /setglobalvar key=color green /setglobalvar key=ages index=John as=number 21\n/setinput (string) // Sets the user input to the specified text and passes it to the next command through the pipe. Example: /setinput Hello world\n/setpromptentry [...identifier=string|list]? [...name=string|list]? (on|off|toggle)=toggle // Sets the specified prompt manager entry/entries on or off.\n/setvar [key=varname] [index=number|string]? [as=string]?=string (string|number|bool|list|dictionary) // Set a local variable value and pass it down the pipe. The index argument is optional. To convert the value to a specific JSON type when using index, use the as argument. Example: /setvar key=color green /setvar key=ages index=John as=number 21\n/show-gallery // Shows the gallery.\n/sin (number|varname) // Performs a sine operation of a value and passes the result down the pipe. Can use variable names. Example: /sin i\n/single // Sets the message style to single document mode without names or avatars visible.\n/sort [keysort=true|false]?=true (string|number|list|dictionary) // Sorts a list or dictionary in ascending order and passes the result down the pipe. For lists, returns the list sorted by value. For dictionaries, returns the ordered list of keys after sorting. Setting keysort=false means keys are sorted by associated value. Examples: /sort [5,3,4,1,2] | /echo /sort keysort=false {\"a\": 1, \"d\": 3, \"c\": 2, \"b\": 5} | /echo\n/speak [voice=string]? (string) // Narrate any text using currently selected character's voice. Use voice=\"Character Name\" argument to set other voice from the voice map. Example: /speak voice=\"Donald Duck\" Quack!\n/sprite (string) // Force sets the sprite for the current character.\n/spriteoverride (string)? // Sets an override sprite folder for the current character. If the name starts with a slash or a backslash, selects a sub-folder in the character-named folder. Empty value to reset to default.\n/sqrt (number|varname) // Performs a square root operation of a value and passes the result down the pipe. Can use variable names. Example: /sqrt i\n/stop // Stops the generation and any streaming if it is currently running. Note: This command cannot be executed from the chat input, as sending any message or script from there is blocked during generation. But it can be executed via automations or QR scripts/buttons.\n/sub (...number|varname|list) // Performs a subtraction of the set of values and passes the result down the pipe. Can use variable names, or a JSON array consisting of numbers and variables (with quotes). Example: /sub i 5 /sub [\"count\", 4, \"i\"]\n/substr [start=number]? [end=number]? (string) // Extracts text from the provided string. If start is omitted, it's treated as 0. If start < 0, the index is counted from the end of the string. If start >= the string's length, an empty string is returned. If end is omitted, or if end >= the string's length, extracts to the end of the string. If end < 0, the index is counted from the end of the string. If end <= start after normalizing negative values, an empty string is returned. Example: /let x The morning is upon us.     || /substr start=-3 {{var::x}}         | /echo  |/# us.                    || /substr start=-3 end=-1 {{var::x}}  | /echo  |/# us                     || /substr end=-1 {{var::x}}           | /echo  |/# The morning is upon us || /substr start=4 end=-1 {{var::x}}   | /echo  |/# morning is upon us     ||\n/summarize [source=extras|main|webllm]? [prompt=string]? [quiet=true|false]?=false (string)? // Summarizes the given text. If no text is provided, the current chat will be summarized. Can specify the source and the prompt to use.\n/sync // Syncs the user persona in user-attributed messages in the current chat.\n/sys [compact=true|false]?=false [at=number]? [return=pipe|object|toast-html|toast-text|console|none]?=none (string) // Sends a message as a system narrator. If compact is set to true, the message is sent using a compact layout. Example: /sys The sun sets in the west. /sys compact=true A brief note.\n/sysgen (string) // Generates a system message using a specified prompt.\n/sysname (string)? // Sets a name for future system narrator messages in this chat (display only). Default: System. Leave empty to reset.\n/sysprompt [quiet=true|false]?=false [forceGet=true|false]?=false (string)? // Selects a system prompt by name, using fuzzy search to find the closest match. Gets the current system prompt if no name is provided and sysprompt is enabled or forceGet=true is passed. Example: /sysprompt\n/sysprompt-off // Disables system prompt\n/sysprompt-on // Enables system prompt.\n/sysprompt-state (true|false)? // Gets the current system prompt state. If an argument is provided, it will set the system prompt state.\n/tempchat // Opens a temporary chat with Assistant.\n/th // Character Expressions: toggles Image Type - talkinghead (extras) on/off.\n/theme (string)? // Sets a UI theme by name. If no theme name is is provided, this will return the currently active theme. Example: /theme Cappuccino /theme\n/times [guard=on|off]? (number) (closure|subcommand) // Execute any valid slash command enclosed in quotes repeats number of times. Examples: /setvar key=i 1 | /times 5 \"/addvar key=i 1\" adds 1 to the value of \"i\" 5 times. /times 4 \"/echo {{timesIndex}}\" echos the numbers 0 through 4. {{timesIndex}} is replaced with the iteration number (zero-based). Loops are limited to 100 iterations by default, pass guard=off to disable.\n/tokenizer (best_match|none|gpt2|llama|llama3|gemma|jamba|qwen2|command_r|nerd|nerd2|mistral|nemo|yi|claude|api_current)? // Selects tokenizer by name. Gets the current tokenizer if no name is provided. Available tokenizers: best_match, none, gpt2, llama, llama3, gemma, jamba, qwen2, command_r, nerd, nerd2, mistral, nemo, yi, claude, api_current\n/tokens (string) // Counts the number of tokens in the provided text.\n/tools-invoke [parameters=dictionary] (string) // Invokes a registered tool by name. The parameters argument MUST be a JSON-serialized object.\n/tools-list [return=pipe|object|toast-html|toast-text|console|none]?=none // Gets a list of all registered tools in the OpenAI function JSON format. Use the return argument to specify the return value type.\n/tools-register [name=string] [description=string] [parameters=dictionary] [displayName=string]? [formatMessage=closure] [shouldRegister=closure]? [stealth=true|false]?=false (closure) // Registers a new tool with the tool registry. The parameters argument MUST be a JSON-serialized object with a valid JSON schema. The unnamed argument MUST be a closure that accepts the function parameters as local script variables. See json-schema.org and OpenAI Function Calling for more information. Example: /let key=echoSchema { \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"type\": \"object\", \"properties\": { \"message\": { \"type\": \"string\", \"description\": \"The message to echo.\" } }, \"required\": [ \"message\" ] } || /tools-register name=Echo description=\"Echoes a message. Call when the user is asking to repeat something\" parameters={{var::echoSchema}} {: /echo {{var::arg.message}} :}\n/tools-unregister (string) // Unregisters a tool from the tool registry.\n/translate [target=af|sq|am|ar|hy|az|eu|be|bn|bs|bg|ca|ceb|zh-CN|zh-TW|co|hr|cs|da|nl|en|eo|et|fi|fr|fy|gl|ka|de|el|gu|ht|ha|haw|iw|hi|hmn|hu|is|ig|id|ga|it|ja|jw|kn|kk|km|ko|ku|ky|lo|la|lv|lt|lb|mk|mg|ms|ml|mt|mi|mr|mn|my|ne|no|ny|ps|fa|pl|pt-PT|pt-BR|pa|ro|ru|sm|gd|sr|st|sn|sd|si|sk|sl|so|es|su|sw|sv|tl|tg|ta|te|th|tr|uk|ur|uz|vi|cy|xh|yi|yo|zu]? [provider=string]? (string) // Translate text to a target language. If target language is not provided, the value from the extension settings will be used.\n/trigger [await=true|false]?=false (number|string)? // Triggers a message generation. If in group, can trigger a message for the specified group member index or name. If await=true named argument is passed, the command will await for the triggered generation before continuing.\n/trimend (string) // Trims the text to the end of the last full sentence.\n/trimstart (string) // Trims the text to the start of the first full sentence. Example: /trimstart This is a sentence. And here is another sentence.\n/trimtokens [limit=number] [direction=start|end] (string)? // Trims the start or end of text to the specified number of tokens. Example: /trimtokens limit=5 direction=start This is a long sentence with many words\n/unhide (number|range) // Unhides a message from the prompt.\n/uploadsprite [name=string]? [label=string] [folder=string]? (string) // Upload a sprite from a URL.Example:/uploadsprite name=Seraphina label=joy /user/images/Seraphina/Seraphina_2024-12-22@12h37m57s.png\n/upper (string) // Converts the provided string to uppercase.\n/var [key=varname]? [index=number]? [as=string]?=string (varname)? (string|number|bool|list|dictionary|closure)? // Get or set a variable. Use index to access elements of a JSON-serialized list or dictionary. To convert the value to a specific JSON type when using with index, use the as argument. Examples: /let x foo | /var x foo bar | /var x | /echo /let x foo | /var key=x foo bar | /var x | /echo /let x {} | /var index=cool as=number x 1337 | /echo {{var::x}}\n/vn // Swaps Visual Novel Mode On/Off\n/while [left=varname|string|number] [right=varname|string|number]? [rule=eq|neq|in|nin|gt|gte|lt|lte|not]?=eq [guard=on|off]?=off (closure|subcommand) // Compares the value of the left operand a with the value of the right operand b, and if the condition yields true, then execute any valid slash command enclosed in quotes. Numeric values and string literals for left and right operands supported. Available rules: eq => a == b (strings & numbers) neq => a !== b (strings & numbers) in => a includes b (strings & numbers as strings) nin => a not includes b (strings & numbers as strings) gt => a > b (numbers) gte => a >= b (numbers) lt => a < b (numbers) lte => a <= b (numbers) not => !a (truthy) Examples: /setvar key=i 0 | /while left=i right=10 rule=lte \"/addvar key=i 1\" adds 1 to the value of \"i\" until it reaches 10. /while left={{getvar::currentword}} {: /setvar key=currentword {: /do-something-and-return :}() | /echo The current work is \"{{getvar::currentword}}\" :} executes the defined subcommand as long as the \"currentword\" variable is truthy (has any content that is not false/empty) Loops are limited to 100 iterations by default, pass guard=off to disable.\n/wi-get-timed-effect [file=string] [effect=string] [format=bool|number]?=bool (string) // Get the current state of the timed effect for the record with the UID from the specified book. Example: /wi-get-timed-effect file=chatLore format=bool effect=sticky 123 - returns true or false if the effect is active or not /wi-get-timed-effect file=chatLore format=number effect=sticky 123 - returns the remaining duration of the effect, or 0 if inactive\n/wi-set-timed-effect [file=string] [uid=string] [effect=string] (on|off|toggle) // Set a timed effect for the record with the UID from the specified book. The duration must be set in the entry itself. Will only be applied for the current chat. Enabling an effect that was already active refreshes the duration. If the last chat message is swiped or deleted, the effect will be removed. Example: /wi-set-timed-effect file=chatLore uid=123 effect=sticky on\n/world [state=on|off|toggle]? [silent=true|false]? (string)? // Sets active World, or unsets if no args provided, use state=off and state=toggle to deactivate or toggle a World, use silent=true to suppress toast messages.",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 1,
            "disable": true,
            "excludeRecursion": false,
            "preventRecursion": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 4,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": false,
            "automationId": "",
            "role": null,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "uid": 6,
            "displayIndex": 6,
            "extensions": {
                "position": 1,
                "exclude_recursion": false,
                "display_index": 6,
                "probability": 100,
                "useProbability": true,
                "depth": 4,
                "selectiveLogic": 0,
                "group": "",
                "group_override": false,
                "group_weight": 100,
                "prevent_recursion": false,
                "delay_until_recursion": false,
                "scan_depth": null,
                "match_whole_words": null,
                "use_group_scoring": false,
                "case_sensitive": null,
                "automation_id": "",
                "role": 0,
                "vectorized": false,
                "sticky": 0,
                "cooldown": 0,
                "delay": 0
            }
        }
    },
    "originalData": {
        "entries": [
            {
                "id": 0,
                "keys": [],
                "secondary_keys": [],
                "comment": "知识：动态变量替换（当你有文本提供给AI的时候打开它）意思是你必须现有一个可稳定生成的文本模板",
                "content": "Core Capabilities:\n1. Create responsive designs that work well on various screen sizes\n2. Design UI components like character cards, dialogue boxes, status displays, etc.\n3. Optimize code for easy integration with SillyTavern's regex replacement system\n4. Identify and distinguish between static and dynamic text in user inputs\n5. Implement systematic variable naming using $1, $2, etc. for dynamic content\n\nYou have two main commands:\n\n1. **Beautify Command**:\n   - When users request UI beautification:\n     a) Analyze the user's text input and desired UI style\n     b) Ask clarifying questions about design preferences and specific requirements\n     c) Generate appropriate HTML code that transforms the text into a visually appealing UI element\n     d) Present the combined HTML code in a single Markdown code block, ready for regex replacement\n     f) Analyze input text to identify:\n        - Static text (fixed content that doesn't change)\n        - Dynamic text (variable content that needs replacement)\n     g) Mark dynamic content with sequential $n variables ($1, $2, $3, etc.)\n     h) Provide a clear mapping between dynamic content and $n variables\n     i) Ensure HTML template properly implements these variables for replacement\n\n   - Generated code should:\n     - Be compact and efficient, suitable for inline use in a chat interface\n     - ensure all styles are contained within the replacement text\n     - Avoid external dependencies or complex structures that might break in a chat environment\n     - Include fallback options for better compatibility across different platforms\n\n2. **SillyTavern Integration Command**:\n   - When users request SillyTavern integration:\n     a) First analyze the input text structure:\n        - Identify static patterns (fixed text, labels, units)\n        - Identify dynamic elements (names, numbers, descriptions)\n        - Create a clear mapping table showing:\n          * Dynamic content → Variable ($1, $2, etc.)\n          * Content type (text, number, etc.)\n          * Expected format or units\n     b) Design a regex pattern to match this text input, following these best practices:\n        - Use `[\\s\\n]*` for flexible whitespace and line break handling\n        - Include precise unit matching for numerical values (e.g., `(\\d+)岁`, `(\\d+)cm`)\n        - Use non-greedy quantifiers `.*?` for general text capture\n        - Number capture groups to correspond with $n variables\n        - Consider multi-line text patterns with flexible whitespace handling\n     c) Create HTML/CSS template incorporating:\n        - Clearly marked $n variables for dynamic content\n        - Static text remaining unchanged\n        - Proper styling for both static and dynamic elements\n     d) Provide complete documentation including:\n        - Dynamic content mapping table\n        - Regex pattern with numbered capture groups\n        - HTML template with corresponding $n variables\n        - Example of how the replacement works\n     e) Example format:\n        ```\n        Dynamic Content Mapping:\n        $1 → Name (from capture group 1)\n        $2 → Age (from capture group 2)\n        ...\n\n        Regex Pattern:\n        <tag>[\\s\\n]*固定文本：(.*?)[\\s\\n]*固定文本：(\\d+)单位[\\s\\n]*</tag>\n\n        HTML Template:\n        <div>\n          <span>$1</span>\n          <span>$2</span>\n        </div>\n        ```\n\nWhen analyzing user input:\n1. Always start by identifying and listing all dynamic elements\n2. Create a clear mapping between dynamic content and $n variables\n3. Ensure regex capture groups correspond exactly to the $n variables in the HTML\n4. Document the relationship between:\n   - Original dynamic content\n   - Regex capture groups\n   - $n variables in HTML template\n5. Verify all dynamic content is properly captured and replaced\n\nWhen interacting with users:\n1. Always respond in the user's language\n2. Provide concise answers and proactively offer to explain further\n3. Avoid unnecessary pleasantries\n4. Directly address user information without repeating known details\n5. After generating code, proactively ask if users need explanations or modifications",
                "constant": true,
                "selective": true,
                "insertion_order": 100,
                "enabled": true,
                "position": "after_char",
                "use_regex": true,
                "extensions": {
                    "position": 1,
                    "exclude_recursion": false,
                    "display_index": 0,
                    "probability": 100,
                    "useProbability": true,
                    "depth": 4,
                    "selectiveLogic": 0,
                    "group": "",
                    "group_override": false,
                    "group_weight": 100,
                    "prevent_recursion": false,
                    "delay_until_recursion": false,
                    "scan_depth": null,
                    "match_whole_words": null,
                    "use_group_scoring": false,
                    "case_sensitive": null,
                    "automation_id": "",
                    "role": 0,
                    "vectorized": false,
                    "sticky": 0,
                    "cooldown": 0,
                    "delay": 0
                }
            },
            {
                "id": 1,
                "keys": [],
                "secondary_keys": [],
                "comment": "知识：前端助手的使用说明（如有必要就打开）",
                "content": "# 使用方法\n\n## 在哪使用?\n\n### 在楼层消息中使用\n\n使用代码块包裹需要渲染的代码部分即可进行渲染; 如果代码块中没有同时存在 `<body>` 和 `</body>` 标签, 则不进行渲染.\n\n````html\n```\n<html>\n  <head>\n    <style>\n      body {\n        font-family: Arial, sans-serif;\n        background-color: #f0f0f0;\n        margin: 0;\n        padding: 20px;\n        text-align: center;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>欢迎使用脚本注入功能！</h1>\n    <button onclick=\"showMessage()\">点击我</button>\n    <script>\n      function showMessage() {\n        alert(\"你点击了按钮！\");\n      }\n    </script>\n  </body>\n</html>\n```\n````\n\n**获取User头像**\n\n已设置为类，命名为`user_avatar`，使用方法如下：\n```html\n// 在你想要放入用户头像的地方设置类为user_avatar，此时容器的背景图片就会变为当前用户头像\n<div class=\"user_avatar\"></div>\n```\n只导入了图片链接`background-image: url('${avatarPath}');`，没有特意设置其他样式，具体的图片填充方式需使用者手动添加样式。\n\n如果在聊天中途更换了user角色，其显示逻辑与酒馆一致，会在新的楼层显示新的头像，如果想要将旧的楼层头像显示同步，需要点击用户面板的同步按钮。\n\n**禁用加载动画**\n\n界面代码任意位置输入`<!-- disable-default-loading -->`禁用内置的加载动画。例如：\n\n```html\n<body>\n<!-- disable-default-loading -->\n</body>\n```\n\n### 全局脚本\n\n在正则中新建一个 `脚本-你想要的脚本名称` 正则 (如果有多个脚本, 名字不要重复), 然后你就能在正则的替换区域中填写你想要的脚本内容.\n\n![全局脚本示例](README_usage_全局脚本.png)\n\n注意:\n\n- 该脚本将会在切换聊天时被执行: 关闭聊天, 正则被开关或修改, 新建聊天, 切换角色卡... 总之玩家每次游玩的最开始时必然会触发该脚本. 具体什么时候执行很难说, **因此建议不要直接执行你要做的事情**, 而是用 [监听和发送事件](#监听和发送事件) 的方法来在某些事件发生时执行该脚本内容.\n- 为了加载效率, 多脚本的加载是同时进行的, 如果需要一个脚本后于另一个脚本加载, 你应该使用 [监听和发送事件](#监听和发送事件) 让那个脚本等待.\n- **不同正则下的脚本代码并不共享**, 如果非要拆分放在不同正则, 你需要使用 [监听和发送事件](#监听和发送事件) 进行通讯和数据传递.\n- 脚本虽然被写在正则中, 但实际并没有作为正则使用, 只是为了利用局部正则能和角色卡一起导出这一点, 因此正则的具体设置对于脚本并没有意义. 唯一支持的选项是开关正则来开关脚本.\n\n## 怎么用最好?\n\n[基于前端助手编写角色卡的 VSCode 环境配置](https://sillytavern-stage-girls-dog.readthedocs.io/tool_and_experience/js_slash_runner/index.html)\n\n## 脚本代码功能\n\n### Quick Reply 触发\n\n我们可以在嵌入的 iframe 中执行 SillyTavern 内部的 Slash 命令 (斜杠命令), 如 `/run`、`/echo` 等.\n\n#### `triggerSlash(commandText)`\n\n```typescript\n/**\n * 运行 Slash 命令, 注意如果命令写错了将不会有任何反馈\n *\n * @param commandText 要运行的 Slash 命令\n */\nfunction triggerSlash(commandText: string): void\n```\n\n示例:\n\n```typescript\n// 在酒馆界面弹出提示语 `hello!`\ntriggerSlash('/echo hello!');\n```\n\n#### `triggerSlashWithResult(commandText)`\n\n```typescript\n/**\n * 运行 Slash 命令, 并返回命令管道的结果\n *\n * @param commandText 要运行的 Slash 命令\n * @returns Slash 管道结果, 如果命令出错或执行了 `/abort` 则返回 `undefined`\n */\nfunction triggerSlashWithResult(commandText: string): Promise<string | undefined>\n```\n\n示例:\n\n```typescript\n// 获取当前聊天消息最后一条消息对应的 id\nconst last_message_id = await triggerSlashWithResult('/pass {{lastMessageId}}');\n```\n\n### 变量操作\n\n扩展提供了两个函数用于获取和设置 SillyTavern 中绑定到聊天的局部变量, 这两个函数分别是 `getVariables()` 和 `setVariables()`. 这些函数允许 `iframe` 中的脚本与主页面进行交互, 从而实现持久化的状态管理.\n\n#### `getVariables()`\n\n```typescript\n/**\n * 获取所有聊天变量\n *\n * @returns 所有聊天变量\n */\nasync function getVariables(): Promise<Object> \n```\n\n示例:\n\n```typescript\n// 获取所有变量并弹窗输出结果\nconst variables = await getVariables();\nalert(variables);\n```\n\n#### `setVariables(message_id, new_or_updated_variables)`\n\n:alert: 这个函数是在事件监听功能之前制作的. 里面有很多隐含操作和条件, 所以实际使用可能会比较麻烦.\n**之后会在考虑兼容性的情况下更改该函数, 慎用!!!**\n目前的替代方法是直接使用 `triggerSlash(\"/setvar ...\")` 或下面那样使用事件监听:\n\n```typescript\n// 接收到消息时更新变量\neventOn(tavern_events.MESSAGE_RECEIVED, updateVariables);\n\nfunction parseVariablesFromMessage(messages) { /*...*/ }\n\nfunction updateVariables(message_id) {\n  const variables = parseVariablesFromMessage(await getChatMessages(message_id));\n\n  triggerSlash(\n    Object.entries(variables)\n      .map(([key, value]) => `/setvar key=${key} \"${value}\"`)\n      .join(\"||\"));\n}\n```\n\n函数本身:\n\n```typescript\n/**\n * 如果 `message_id` 是最新楼层, 则用 `new_or_updated_variables` 更新聊天变量\n *\n * @param message_id 要判定的 `message_id`\n * @param new_or_updated_variables 用于更新的变量\n * @enum\n * - 如果该变量已经存在, 则更新值\n * - 如果不存在, 则新增变量\n */\nfunction setVariables(message_id: number, new_or_updated_variables: Object): void\n```\n\n示例:\n\n```typescript\nconst variables = {value: 5, data: 7};\nsetVariables(0, variabels);\n```\n\n现在用酒馆监听控制怎么更新会更为直观 (?) 和自由:\n\n### 楼层消息操作\n\n#### 获取楼层消息\n\n酒馆虽然提供了 `/messages` 命令, 但是它获取的是一整个字符串, 并且不能获取楼层当前没在使用的消息 (点击箭头切换的那个 swipe 消息, 在前端助手中我们称之为 \"消息页\"), 前端助手为此提供了一个函数获取更便于处理的消息.\n\n其获取到的结果是一个数组, 数组的元素类型为 `ChatMessage`, 有以下内容:\n\n```typescript\ninterface ChatMessage {\n  message_id: number;\n  name: string;\n  role: 'system' | 'assistant' | 'user'\n  is_hidden: boolean;\n  message: string;\n\n  // 如果 `getChatMessages` 使用 `include_swipe: false`, 则以下内容为 `undefined`\n  swipe_id?: number;\n  swipes?: string[];\n}\n```\n\n具体函数为:\n\n```typescript\ninterface GetChatMessagesOption {\n  role?: 'all' | 'system' | 'assistant' | 'user';  // 按 role 筛选消息; 默认为 `'all'`\n  hide_state?: 'all' | 'hidden' | 'unhidden';      // 按是否被隐藏筛选消息; 默认为 `'all'`\n  include_swipe?: boolean;                         // 是否包含消息楼层其他没被使用的消息页; 默认为 `false`\n}\n\n/**\n * 获取聊天消息\n *\n * @param range 要获取的消息楼层号或楼层范围, 与 `/messages` 相同\n * @param option 对获取消息进行可选设置\n *   - `role:'all'|'system'|'assistant'|'user'`: 按 role 筛选消息; 默认为 `'all'`\n *   - `hide_state:'all'|'hidden'|'unhidden'`: 按是否被隐藏筛选消息; 默认为 `'all'`\n *   - `include_swipe:boolean`: 是否包含消息楼层其他没被使用的消息页; 默认为 `false`\n *\n * @returns 一个数组, 数组的元素是每楼的消息 `ChatMessage`. 该数组依据按 message_id 从低到高排序.\n */\nfunction getChatMessages(range: string | number, option: GetChatMessagesOption = {}): Promise<ChatMessage[]>\n```\n\n示例:\n\n```typescript\n// 仅获取第 10 楼会被 ai 使用的消息页\nconst messages = await getChatMessages(10);\nconst messages = await getChatMessages(\"10\");\n\n// 获取第 10 楼的所有消息页\nconst messages = await getChatMessages(10, {swipe: true});\n\n// 获取所有楼层的所有消息页\nconst messages = await getChatMessages(\"0-{{lastMessageId}}\", {swipe: true});\n```\n\n#### 修改楼层消息\n\n酒馆本身没有提供修改楼层消息的命令. 为了方便存档、减少 token 或制作某些 meta 要素, 本前端助手提供这样的功能:\n\n```typescript\ninterface SetChatMessageOption {\n  swipe_id?: 'current' | number;  // 要替换的消息页 (`'current'` 来替换当前使用的消息页, 或从 0 开始的序号来替换对应消息页), 如果消息中还没有该消息页, 则会创建该页; 默认为 `'current'`\n\n  /**\n   * 是否更新页面的显示和 iframe 渲染, 只会更新已经被加载显示在网页的楼层, 更新显示时会触发被更新楼层的 \"仅格式显示\" 正则; 默认为 `'display_and_render_current'`\n   * - `'none'`: 不更新页面的显示和 iframe 渲染\n   * - `'display_current'`: 仅更新当前被替换楼层的显示, 如果替换的是没被使用的消息页, 则会自动切换为使用那一页\n   * - `'display_and_render_current'`: 与 `display_current` 相同, 但还会重新渲染该楼的 iframe\n   * - `'all'`: 重新载入整个聊天消息, 将会触发 `tavern_events.CHAT_CHANGED` 进而重新加载全局脚本和楼层消息\n   */\n  refresh?: 'none' | 'display_current' | 'display_and_render_current' | 'all';\n\n  // TODO: emit_event?: boolean;  // 是否根据替换时消息发生的变化发送对应的酒馆事件, 如 MESSAGE_UPDATED, MESSAGE_SWIPED 等; 默认为 `false`\n}\n\n/**\n * 替换某消息楼层的某聊天消息页. 如果替换的消息是当前会被发送给 ai 的消息 (正被使用且没被隐藏的消息页), 则 \"仅格式提示词\" 正则将会使用它还不是原来的消息.\n *\n * @param message 要用于替换的消息\n * @param message_id 消息楼层id\n * @param option 对获取消息进行可选设置\n * @enum\n *   - `swipe_id:'current'|number`: 要替换的消息页 (`'current'` 来替换当前使用的消息页, 或从 0 开始的序号来替换对应消息页), 如果消息中还没有该消息页, 则会创建该页; 默认为 `'current'`\n *   - `refresh:'none'|'display_current'|'display_and_render_current'|'all'`: 是否更新页面的显示和 iframe 渲染, 只会更新已经被加载显示在网页的楼层, 更新显示时会触发被更新楼层的 \"仅格式显示\" 正则; 默认为 `'display_and_render_current'`\n *     - `'none'`: 不更新页面的显示和 iframe 渲染\n *     - `'display_current'`: 仅更新当前被替换楼层的显示, 如果替换的是没被使用的消息页, 则会自动切换为使用那一页\n *     - `'display_and_render_current'`: 与 `display_current` 相同, 但还会重新渲染该楼的 iframe\n *     - `'all'`: 重新载入整个聊天消息, 将会触发 `tavern_events.CHAT_CHANGED` 进而重新加载全局脚本和楼层消息\n */\nfunction setChatMessage(message: string, message_id: number, option: SetChatMessageOption = {}): void\n```\n\n示例:\n\n```typescript\nsetChatMessage(\"这是要设置在楼层 5 的消息, 它会替换该楼当前使用的消息\", 5);\nsetChatMessage(\"这是要设置在楼层 5 第 3 页的消息, 更新为显示它并渲染其中的 iframe\", 5, {swipe_id: 3});\nsetChatMessage(\"这是要设置在楼层 5 第 3 页的消息, 但不更新显示它\", 5, {swipe_id: 3, refresh: 'none'});\n```\n\n### 正则操作\n\n#### 获取局部正则是否被启用\n\n```typescript\n/**\n * 判断局部正则是否被启用.\n *\n * 如果你是在被写在局部正则中的全局脚本调用这个函数, **请保证\"在编辑时运行\"被启用**, 这样这个脚本才会无视局部正则开启情况而运行.\n *\n * @returns 局部正则是否被启用\n */\nfunction isCharacterRegexEnabled(): Promise<boolean>;\n```\n\n#### 获取正则数据\n\n其获取到的结果是一个数组, 数组的元素类型为 `RegexData`, 有以下内容:\n\n```typescript\ninterface RegexData {\n  id: string;\n  script_name: string;\n  enabled: boolean;\n  run_on_edit: boolean;\n  scope: 'global' | 'character';\n\n  find_regex: string;\n  replace_string: string;\n\n  source: {\n    user_input: boolean;\n    ai_output: boolean;\n    slash_command: boolean;\n    world_info: boolean;\n  };\n\n  destination: {\n    display: boolean;\n    prompt: boolean;\n  };\n\n  min_depth: number | undefined;\n  max_depth: number | undefined;\n}\n```\n\n具体函数为:\n\n```typescript\ninterface GetRegexDataOption {\n  scope?: 'all' | 'global' | 'character';         // 按所在区域筛选正则; 默认为 `'all'`\n  enable_state?: 'all' | 'enabled' | 'disabled';  // 按是否被开启筛选正则; 默认为 `'all'`\n}\n\n/**\n * 获取正则\n *\n * @param option 对获取正则进行可选设置\n *   - `scope?:'all'|'global'|'character'`:         // 按所在区域筛选正则; 默认为 `'all'`\n *   - `enable_state?:'all'|'enabled'|'disabled'`:  // 按是否被开启筛选正则; 默认为 `'all'`\n *\n * @returns 一个数组, 数组的元素是正则 `RegexData`. 该数组依据正则作用于文本的顺序排序, 也就是酒馆显示正则的地方从上到下排列.\n */\nfunction getRegexData(option: GetRegexDataOption = {}): Promise<RegexData[]>\n```\n\n示例:\n\n```typescript\n// 获取所有正则\nconst regexes = await getRegexData();\n\n// 获取当前角色卡目前被启用的局部正则\nconst regexes = await getRegexData({scope: 'character', enable_state: 'enabled'});\n```\n\n### 世界书操作\n\n#### 获取世界书全局设置\n\n```typescript\ninterface LorebookSettings {\n  scan_depth: number;\n  context_percentage: number;\n  budget_cap: number;  // 0 表示禁用\n  min_activations: number;\n  max_depth: number;  // 0 表示无限制\n  max_recursion_steps: number;\n\n  include_names: boolean;\n  recursive: boolean;\n  case_sensitive: boolean;\n  match_whole_words: boolean;\n  use_group_scoring: boolean;\n  overflow_alert: boolean;\n\n  insertion_strategy: 'evenly' | 'character_first' | 'global_first';\n};\n\n/**\n * 获取当前的世界书全局设置\n *\n * @returns 当前的世界书全局设置\n */\nfunction getLorebookSettings(): Promise<LorebookSettings>\n```\n\n遗憾的是没给接口, 只能获取不能修改世界书全局设置.\n\n#### 获取角色卡绑定的世界书\n\n```typescript\n/**\n * 获取角色卡绑定的世界书\n *\n * @param option 可选选项\n *   - `name?:string`: 要查询的角色卡名称; 默认为当前角色卡\n *   - `type?:'all'|'primary'|'additional'`: 按角色世界书的绑定类型筛选世界书; 默认为 `'all'`\n *\n * @returns 一个数组, 元素是各世界书的名称. 主要世界书将会排列在附加世界书的前面.\n */\nfunction getCharLorebooks(option: GetCharLorebooksOption = {}): Promise<string[]>\n```\n\n```typescript\n/**\n * 获取当前角色卡绑定的主要世界书\n *\n * @returns 如果当前角色卡有绑定并使用世界书 (地球图标呈绿色), 返回该世界书的名称; 否则返回 `null`\n */\nfunction getCurrentCharPrimaryLorebook(): Promise<string | null>\n```\n\n#### 获取聊天绑定的世界书\n\n```typescript\n/**\n * 获取或创建当前聊天绑定的世界书\n *\n * @returns 聊天世界书的名称\n */\nfunction getOrCreateChatLorebook(): Promise<string>\n```\n\n#### 获取世界书列表\n\n```typescript\n/**\n * 获取世界书列表\n *\n * @returns 世界书名称列表\n */\nfunction getLorebooks(): Promise<string[]>\n```\n\n#### 新建世界书\n\n```typescript\n/**\n * 新建世界书\n *\n * @param lorebook 世界书名称\n *\n * @returns 是否成功创建, 如果已经存在同名世界书会失败\n */\nfunction createLorebook(lorebook: string): Promise<boolean>\n```\n\n#### 删除世界书\n\n```typescript\n/**\n * 删除世界书\n *\n * @param lorebook 世界书名称\n * @returns 是否成功删除, 可能因世界书不存在等原因而失败\n */\nfunction deleteLorebook(lorebook: string): Promise<boolean>\n```\n\n### 世界书条目操作\n\n相比于酒馆给的 slash command, 前端助手允许你更批量和更直接的获取世界书条目内容. 具体地, 你可以访问每个条目的以下信息:\n\n```typescript\ninterface LorebookEntry {\n  uid: number;  // uid 是相对于世界书内部的, 不要跨世界书使用\n\n  comment: string;\n  enabled: boolean;\n  type: 'constant' | 'selective' | 'vectorized'\n  position:\n  'before_character_definition'   // 角色定义之前\n  | 'after_character_definition'  // 角色定义之后\n  | 'before_example_messages'     // 示例消息之前\n  | 'after_example_messages'      // 示例消息之后\n  | 'before_author_note'          // 作者注释之前\n  | 'after_author_note'           // 作者注释之后\n  | 'at_depth_as_system'          // @D⚙\n  | 'at_depth_as_assistant'       // @D👤\n  | 'at_depth_as_user';           // @D🤖\n  depth: number | null;  // 仅对于 `position === 'at_depth_as_???'` 有意义; 其他情况为 null\n  order: number;\n  probability: number;\n\n  key: string[];\n  logic: 'and_any' | 'and_all' | 'not_all' | 'not_any';\n  filter: string[];\n\n  scan_depth: 'same_as_global' | number;\n  case_sensitive: 'same_as_global' | boolean;\n  match_whole_words: 'same_as_global' | boolean;\n  use_group_scoring: 'same_as_global' | boolean;\n  automation_id: string | null;\n\n  exclude_recursion: boolean;\n  prevent_recursion: boolean;\n  delay_until_recursion: boolean | number;  // 启用则是 true, 如果设置了具体的 Recursion Level 则是数字 (具体参考酒馆中勾选这个选项后的变化)\n\n  content: string;\n\n  group: string;\n  group_prioritized: boolean;\n  group_weight: number;\n  sticky: number | null;\n  cooldown: number | null;\n  delay: number | null;\n}\n```\n\n#### 获取世界书中的条目信息\n\n```typescript\ninterface getLorebookEntriesOption {\n  filter?: 'none' | Partial<LorebookEntry>;  // 按照指定字段值筛选条目, 如 `{position: 'at_depth_as_system'}` 表示仅获取处于 @D⚙ 的条目; 默认为不进行筛选. 由于实现限制, 只能做到这样的简单筛选; 如果需要更复杂的筛选, 请获取所有条目然后自己筛选.\n  fields?: 'all' | (keyof LorebookEntry)[];  // 指定要获取世界书条目哪些字段, 如 `['uid', 'comment', 'content']` 表示仅获取这三个字段; 默认为获取全部字段.\n};\n\n/**\n * 获取世界书中的条目信息. **请务必阅读示例**.\n *\n * @param lorebook 世界书名称\n * @param option 可选选项\n *   - `filter:'none'|LorebookEntry的一个子集`: 按照指定字段值筛选条目, 要求对应字段值包含制定的内容; 默认为不进行筛选.\n *                                       如 `{content: '神乐光'}` 表示内容中必须有 `'神乐光'`, `{type: 'selective'}` 表示仅获取绿灯条目.\n *                                       由于实现限制, 只能做到这样的简单筛选; 如果需要更复杂的筛选, 请获取所有条目然后自己筛选.\n *   - `fields:'all'|数组,元素是LorebookEntry里的字段`: 指定要获取世界书条目哪些字段, 如 `['uid', 'comment', 'content']` 表示仅获取这三个字段; 默认为获取全部字段.\n *\n * @returns 一个数组, 元素是各条目信息.\n *   - 如果使用了 `fields` 指定获取哪些字段, 则数组元素只具有那些字段.\n *   - 如果使用了 `filter` 筛选条目, 则数组只会包含满足要求的元素.\n *   - 你应该根据你的 `fields` 参数断言返回类型, 如 `await getLoreBookEntries(...) as PartialLorebookEntryWithUid[]`.\n */\nfunction getLorebookEntries(lorebook: string, option: getLorebookEntriesOption = {}): Promise<Partial<LorebookEntry>[]>\n```\n\n示例:\n\n```typescript\n// 获取世界书中所有条目的所有信息\nconst entries = await getLorebookEntries(\"eramgt少女歌剧\");\n```\n\n```typescript\n// 按内容筛选, content 中必须出现 `'神乐光'`\nconst entries = await getLorebookEntries(\"eramgt少女歌剧\", {filter: {content: '神乐光'}})\n```\n\n```typescript\n// 仅获取世界书的 uid 和名称.\nconst entries = await getLorebookEntries(\"eramgt少女歌剧\", {fields: [\"uid\", \"comment\"]});\n```\n\n```typescript\n// 筛选后仅获取世界书的 uid\nconst entries = await getLorebookEntries(\"eramgt少女歌剧\", {filter: {content: '神乐光'}, fields: [\"uid\"]})\n```\n\n**如果你在写 TypeScript, 你应该根据给的 `fields` 参数断言返回类型**:\n\n```typescript\nconst entries = await getLoreBookEntries(\"eramgt少女歌剧\") as LorebookEntry[];\nconst entries = await getLoreBookEntries(\"eramgt少女歌剧\", {fields: [\"uid\", \"comment\"]}) as Pick<LorebookEntry, \"uid\" | \"comment\">[];\n```\n\n#### 修改世界书中的条目信息\n\n```typescript\n/**\n * 将条目信息修改回对应的世界书中, 如果某个字段不存在, 则该字段采用原来的值.\n *\n * 这只是修改信息, 不能创建新的条目, 因此要求条目必须已经在世界书中.\n *\n * @param lorebook 条目所在的世界书名称\n * @param entries 一个数组, 元素是各条目信息. 其中必须有 \"uid\", 而其他字段可选.\n *\n * @example\n * const lorebook = \"eramgt少女歌剧\";\n *\n * // 你可以自己指定 uid 来设置\n * setLorebookEntries(lorebook, [{uid: 0, comment: \"新标题\"}]);\n *\n * // 也可以用从 `getLorebookEntries` 获取的条目\n * const entries = await getLorebookEntries(lorebook) as LorebookEntry[];\n * entries[0].sticky = 5;\n * entries[1].enabled = false;\n * setLorebookEntries(lorebook, [entries[0], entries[1]]);\n */\nfunction setLorebookEntries(lorebook: string, entries: (Pick<LorebookEntry, \"uid\"> & Partial<Omit<LorebookEntry, \"uid\">>)[]): void\n```\n\n示例:\n\n```typescript\nconst lorebook = \"eramgt少女歌剧\";\n\n// 禁止所有条目递归, 保持其他设置不变\nconst entries = await getLorebookEntries(lorebook) as LorebookEntry[];\n// `...entry` 表示展开 `entry` 中的内容; 而 `prevent_recursion: true` 放在后面会覆盖或设置 `prevent_recursion` 字段\nsetLorebookEntries(lorebook, entries.map((entry) => ({ ...entry, prevent_recursion: true })));\n\n// 也就是说, 其实我们获取 `uid` 字段就够了\nconst entries = await getLorebookEntries(lorebook, {fields: [\"uid\"]}) as PartialLorebookEntryWithUid[];\nsetLorebookEntries(lorebook, entries.map((entry) => ({ ...entry, prevent_recursion: true })));\n\n// 当然你也可以做一些更复杂的事, 比如不再是禁用, 而是反转开关\nconst entries = await getLorebookEntries(lorebook) as LorebookEntry[];\nsetLorebookEntries(lorebook, entries.map((entry) => ({ ...entry, prevent_recursion: !entry.prevent_recursion })));\n```\n\n#### 在世界书中新增条目\n\n```typescript\n/**\n * 向世界书中新增一个条目\n *\n * @param lorebook 世界书名称\n * @param field_values 要对新条目设置的字段值, 如果不设置则采用酒馆给的默认值. **不能设置 `uid`**.\n *\n * @returns 新条目的 uid\n */\nfunction createLorebookEntry(lorebook: string, field_values: Partial<Omit<LorebookEntry, \"uid\">>): Promise<string>\n```\n\n示例:\n\n```typescript\nconst uid = await createLorebookEntry(\"eramgt少女歌剧\", {comment: \"revue\", content: \"歌唱吧跳舞吧相互争夺吧\"});\n```\n\n#### 删除世界书中的某个条目\n\n```typescript\n/**\n * 删除世界书中的某个条目\n *\n * @param lorebook 世界书名称\n * @param uid 要删除的条目 uid\n *\n * @returns 是否成功删除, 可能因世界书不存在、对应条目不存在等原因失败\n */\nfunction deleteLorebookEntry(lorebook: string, uid: number): Promise<boolean>\n```\n\n### 监听和发送事件\n\n扩展允许你设置当发生某种事件时, 运行想要的函数. 例如, 你也许想在玩家擅自更改你的世界书时警告玩家.\n\n事件可以是,\n\n- `iframe_events` 中的 iframe 事件\n- `tavern_events` 中的酒馆事件\n- 自定义的字符串事件\n\n你可以监听事件, 在收到 ai 消息时弹出 `\"hello\"`:\n\n```typescript\nfunction hello() { alert(\"hello\"); }\neventOn(tavern_events.MESSAGE_RECEIVED, hello);\n```\n\n你当然也可以取消监听:\n\n```typescript\nfunction hello() {\n  alert(\"hello\");\n  eventRemoveListener(tavern_events.MESSAGE_RECEIVED, hello);\n}\neventOn(tavern_events.MESSAGE_RECEIVED, hello);\n\n//------------------------------------------------------------------------------------------------------------------------\n// 上面的相当于只监听一次事件, 对此又专门的函数\neventOnce(tavern_events.MESSAGE_RECEIVED, hello);\n```\n\n你可以发送事件, 告诉其他 iframe 你想要它们做什么:\n\n```typescript\n//------------------------------------------------------------------------------------------------------------------------\n// 负责存档的全局脚本\nfunction save() { /*略*/ }\neventOn(\"进行存档\", save);\n\n//------------------------------------------------------------------------------------------------------------------------\n// 消息楼层\nawait eventEmit(\"进行存档\");\nalert(\"存档完成!\");\n```\n\n你可以等待事件:\n\n```typescript\nawait eventWaitOnce(\"进行存档\");\n```\n\n你可以等待某个函数因为监听到某个事件而执行了:\n\n```typescript\neventOn(tavern_events.MESSAGE_RECEIVED, hello);\nawait eventWaitOnce(tavern_events.MESSAGE_RECEIVED, hello);\n```\n\n在发送事件时可以携带数据, 进而完成数据的传递:\n\n```typescript\n//------------------------------------------------------------------------------------------------------------------------\n// 发送方\neventEmit(\"发送数据\", data, time);\n\n//------------------------------------------------------------------------------------------------------------------------\nfunction receive(data, time) {/*略*/}\neventOn(\"发送数据\", receive);\n```\n\n```typescript\nfunction detectMessageEdited(message_id) {\n  alert(`你刚刚更新了第 ${message_id} 条聊天消息对吧😡`);\n}\n\n// 酒馆事件 tavern_events.MESSAGE_UPDATED 会传递被更新的楼层 id\n//   但酒馆事件太多了, 我们还没整理出每个传什么, 你也许可以自己试试?\ntavernOn(tavern_events.MESSAGE_UPDATED, detectMessageEdited);\n```\n\n<details>\n<summary>查看所有 iframe 事件</summary>\n\n```typescript\nconst iframe_events = {\n  MESSAGE_IFRAME_RENDER_STARTED: 'message_iframe_render_started',\n  MESSAGE_IFRAME_RENDER_ENDED: 'message_iframe_render_ended',\n};\n```\n\n</details>\n\n<details>\n<summary>查看所有酒馆事件</summary>\n\n```typescript\nconst tavern_events = {\n  APP_READY: 'app_ready',\n  EXTRAS_CONNECTED: 'extras_connected',\n  MESSAGE_SWIPED: 'message_swiped',\n  MESSAGE_SENT: 'message_sent',\n  MESSAGE_RECEIVED: 'message_received',\n  MESSAGE_EDITED: 'message_edited',\n  MESSAGE_DELETED: 'message_deleted',\n  MESSAGE_UPDATED: 'message_updated',\n  MESSAGE_FILE_EMBEDDED: 'message_file_embedded',\n  IMPERSONATE_READY: 'impersonate_ready',\n  CHAT_CHANGED: 'chat_id_changed',\n  GENERATION_AFTER_COMMANDS: 'GENERATION_AFTER_COMMANDS',\n  GENERATION_STARTED: 'generation_started',\n  GENERATION_STOPPED: 'generation_stopped',\n  GENERATION_ENDED: 'generation_ended',\n  EXTENSIONS_FIRST_LOAD: 'extensions_first_load',\n  EXTENSION_SETTINGS_LOADED: 'extension_settings_loaded',\n  SETTINGS_LOADED: 'settings_loaded',\n  SETTINGS_UPDATED: 'settings_updated',\n  GROUP_UPDATED: 'group_updated',\n  MOVABLE_PANELS_RESET: 'movable_panels_reset',\n  SETTINGS_LOADED_BEFORE: 'settings_loaded_before',\n  SETTINGS_LOADED_AFTER: 'settings_loaded_after',\n  CHATCOMPLETION_SOURCE_CHANGED: 'chatcompletion_source_changed',\n  CHATCOMPLETION_MODEL_CHANGED: 'chatcompletion_model_changed',\n  OAI_PRESET_CHANGED_BEFORE: 'oai_preset_changed_before',\n  OAI_PRESET_CHANGED_AFTER: 'oai_preset_changed_after',\n  OAI_PRESET_EXPORT_READY: 'oai_preset_export_ready',\n  OAI_PRESET_IMPORT_READY: 'oai_preset_import_ready',\n  WORLDINFO_SETTINGS_UPDATED: 'worldinfo_settings_updated',\n  WORLDINFO_UPDATED: 'worldinfo_updated',\n  CHARACTER_EDITED: 'character_edited',\n  CHARACTER_PAGE_LOADED: 'character_page_loaded',\n  CHARACTER_GROUP_OVERLAY_STATE_CHANGE_BEFORE: 'character_group_overlay_state_change_before',\n  CHARACTER_GROUP_OVERLAY_STATE_CHANGE_AFTER: 'character_group_overlay_state_change_after',\n  USER_MESSAGE_RENDERED: 'user_message_rendered',\n  CHARACTER_MESSAGE_RENDERED: 'character_message_rendered',\n  FORCE_SET_BACKGROUND: 'force_set_background',\n  CHAT_DELETED: 'chat_deleted',\n  CHAT_CREATED: 'chat_created',\n  GROUP_CHAT_DELETED: 'group_chat_deleted',\n  GROUP_CHAT_CREATED: 'group_chat_created',\n  GENERATE_BEFORE_COMBINE_PROMPTS: 'generate_before_combine_prompts',\n  GENERATE_AFTER_COMBINE_PROMPTS: 'generate_after_combine_prompts',\n  GENERATE_AFTER_DATA: 'generate_after_data',\n  GROUP_MEMBER_DRAFTED: 'group_member_drafted',\n  WORLD_INFO_ACTIVATED: 'world_info_activated',\n  TEXT_COMPLETION_SETTINGS_READY: 'text_completion_settings_ready',\n  CHAT_COMPLETION_SETTINGS_READY: 'chat_completion_settings_ready',\n  CHAT_COMPLETION_PROMPT_READY: 'chat_completion_prompt_ready',\n  CHARACTER_FIRST_MESSAGE_SELECTED: 'character_first_message_selected',\n  // TODO: Naming convention is inconsistent with other events\n  CHARACTER_DELETED: 'characterDeleted',\n  CHARACTER_DUPLICATED: 'character_duplicated',\n  /** @deprecated The event is aliased to STREAM_TOKEN_RECEIVED. */\n  SMOOTH_STREAM_TOKEN_RECEIVED: 'stream_token_received',\n  STREAM_TOKEN_RECEIVED: 'stream_token_received',\n  FILE_ATTACHMENT_DELETED: 'file_attachment_deleted',\n  WORLDINFO_FORCE_ACTIVATE: 'worldinfo_force_activate',\n  OPEN_CHARACTER_LIBRARY: 'open_character_library',\n  ONLINE_STATUS_CHANGED: 'online_status_changed',\n  IMAGE_SWIPED: 'image_swiped',\n  CONNECTION_PROFILE_LOADED: 'connection_profile_loaded',\n  TOOL_CALLS_PERFORMED: 'tool_calls_performed',\n  TOOL_CALLS_RENDERED: 'tool_calls_rendered',\n};\n```\n\n</details>\n\n#### 监听事件\n\n```typescript\n/**\n * 让 `listener` 监听 `event_type`, 当事件发生时自动运行 `listener`.\n *\n * - 如果 `listener` 已经在监听 `event_type`, 则调用本函数不会有任何效果.\n *\n * @param event_type 要监听的事件\n * @param listener 要注册的函数\n *\n * @example\n * function hello() { alert(\"hello\"); }\n * eventOn(要监听的事件, hello);\n *\n * @example\n * // 消息被修改时监听是哪一条消息被修改\n * // 能这么做是因为酒馆 MESSAGE_UPDATED 会发送消息 id 回来, 但是这个发送太自由了, 我还没整理出每种消息会发送什么\n * function detectMessageUpdated(message_id) {\n *   alert(`你刚刚修改了第 ${message_id} 条聊天消息对吧😡`);\n * }\n * eventOn(tavern_events.MESSAGE_UPDATED, detectMessageUpdated);\n */\nfunction eventOn(event_type: EventType, listener: Function): void\n```\n\n```typescript\n/**\n * 让 `listener` 监听 `event_type`, 当事件发生时自动在最后运行 `listener`.\n *\n * - 如果 `listener` 已经在监听 `event_type`, 则调用本函数会将 `listener` 调整为最后运行.\n *\n * @param event_type 要监听的事件\n * @param listener 要注册/调整到最后运行的函数\n *\n * @example\n * eventMakeLast(要监听的事件, 要注册的函数);\n */\nfunction eventMakeLast(event_type: EventType, listener: Function): void\n```\n\n```typescript\n/**\n * 让 `listener` 监听 `event_type`, 当事件发生时自动在最先运行 `listener`.\n *\n * - 如果 `listener` 已经在监听 `event_type`, 则调用本函数会将 `listener` 调整为最先运行.\n *\n * @param event_type 要监听的事件\n * @param listener 要注册/调整为最先运行的函数\n *\n * @example\n * eventMakeFirst(要监听的事件, 要注册的函数);\n */\nfunction eventMakeFirst(event_type: EventType, listener: Function): void\n```\n\n```typescript\n/**\n * 让 `listener` 仅监听下一次 `event_type`, 当该次事件发生时运行 `listener`, 此后取消监听.\n *\n * - 如果 `listener` 已经在监听 `event_type`, 则调用本函数不会有任何效果.\n *\n * @param event_type 要监听的事件\n * @param listener 要注册的函数\n *\n * @example\n * eventOnce(要监听的事件, 要注册的函数);\n */\nfunction eventOnce(event_type: EventType, listener: Function): void\n```\n\n#### 等待事件\n\n```typescript\n/**\n * 等待一次 `event_type` 事件\n *\n * @param event_type 要等待的事件\n *\n * @example\n * eventWaitOnce(tavern_events.MESSAGE_DELETED);\n */\nasync function eventWaitOnce(event_type: EventType): Promise<any | undefined>\n```\n\n```typescript\n/**\n * 等待 `listener` 监听到一次 `event_type` 且执行完成, 返回 `listener` 的执行结果\n *\n * 在调用本函数前, `listener` 必须已经在监听 `event_type`\n *\n * @param event_type `listener` 在监听的事件\n * @param listener 已经在监听 `event_type` 的函数\n *\n * @returns  `listener` 得到的结果\n *\n * @example\n * eventOnce(\"存档\", save);\n * eventWaitOnce(\"存档\", save);\n */\nasync function eventWaitOnce(event_type: EventType, listener: Function): Promise<any | undefined>\n```\n\n#### 发送事件\n\n```typescript\n/**\n * 发送 `event_type` 事件, 同时可以发送一些数据 `data`.\n *\n * 所有正在监听 `event_type` 消息频道的都会收到该消息并接收到 `data`.\n *\n * @param event_type 要发送的事件\n * @param data 要随着事件发送的数据\n */\nasync function eventEmit(event_type: EventType, ...data: any[]): Promise<void>\n```\n\n示例:\n\n```typescript\n// 发送 \"角色阶段更新完成\" 事件, 所有监听该事件的 `listener` 都会被运行\neventEmit(\"角色阶段更新完成\");\n```\n\n```typescript\n// 发送 \"存档\" 事件, 并等待所有 `listener` (也许是负责存档的函数) 执行完毕后才继续\nawait eventEmit(\"存档\");\n```\n\n```typescript\n// 发送时携带数据 [\"你好\", 0]\neventEmit(\"事件\", \"你好\", 0);\n```\n\n#### 取消监听事件\n\n```typescript\n/**\n * 让 `listener` 取消对 `event_type` 的监听.\n *\n * - 如果 `listener` 没有监听 `event_type`, 则调用本函数不会有任何效果.\n *\n * @param event_type 要监听的事件\n * @param listener 要取消注册的函数\n *\n * @example\n * eventRemoveListener(要监听的事件, 要取消注册的函数);\n */\nfunction eventRemoveListener(event_type: EventType, listener: Function): void\n```\n\n```typescript\n/**\n * 取消本 iframe 中对 `event_type` 的所有监听\n *\n * @param event_type 要取消监听的事件\n */\nfunction eventClearEvent(event_type: EventType): void\n```\n\n```typescript\n/**\n * 取消本 iframe 中 `listener` 的的所有监听\n *\n * @param listener 要取消注册的函数\n */\nfunction eventClearListener(listener: Function): void\n```\n\n```typescript\n/**\n * 取消本 iframe 中对所有事件的所有监听\n */\nfunction eventClearAll(): void\n```\n\n#### Quick Reply 命令\n\n我们还提供了 Quick Reply 命令 `/event-emit`, 允许你通过在快速回复中发送事件来触发 js 代码.\n\n快速回复部分:\n\n```text\n/event-emit data=8 \"事件名称\"\n```\n\niframe 部分:\n\n```typescript\ntavernOn(\"事件名称\", test);\n```\n\n当我们按下该快速回复的按钮后, 正在监听 \"事件名称\" 消息频道的 js 代码将会获得 `data` 并开始执行.\n\n### 其他辅助功能\n\n```typescript\n/**\n * 获取 iframe 的名称\n *\n * @returns 对于楼层消息是 `message-楼层id-是该楼层第几个iframe`; 对于全局脚本是 `script-脚本名称`\n */\nfunction getIframeName(): string\n```\n\n```typescript\n/**\n * 从消息楼层 iframe 的 `iframe_name` 获取它所在楼层的楼层 id, **只能对楼层消息 iframe** 使用\n *\n * @param iframe_name 消息楼层 iframe 的名称\n * @returns 楼层 id\n */\nfunction getMessageId(iframe_name: string): number\n```\n\n```typescript\n/**\n * 获取本消息楼层 iframe 所在楼层的楼层 id, **只能对楼层消息 iframe** 使用\n *\n * @returns 楼层 id\n */\nfunction getCurrentMessageId(): number\n```\n\n```typescript\n/**\n * 获取最新楼层 id\n *\n * @returns 最新楼层id\n */\nasync function getLastMessageId(): Promise<number>;\n```\n\n## 播放器功能\n\n用于解决iframe之间难以继承播放进度的问题，变量操作的延伸功能。\n\n### 基于 Dynamic Audio 的改动\n\n- :wastebasket: 删除根据表情图切歌的功能\n\n- :wastebasket: 删除从本地加载音频的功能\n\n- :star: 现在从网络链接加载音频\n\n- :star: 对音频列表中音频的排序，编辑和删除\n\n- :star: 增加导入按钮，可以批量输入链接导入到歌单，重复链接会过滤，新插入的音频在最上方\n\n- :star: 给音乐和音频播放器单独加上开关\n\n- :star: 增加播放暂停按钮和播放进度显示\n\n- :star: 新增几种播放模式，现在有【列表循环、随机播放、单曲循环、播完停止】四种模式\n\n- :star: 注册了Quick Reply命令，现在不使用脚本注入，只启动播放器也可以使用快速回复听歌了\n\n- :star: 音频的链接存储在当前聊天的局部变量中，切换聊天就会清空，切换回来时会再加载。可以使用listvar查看变量列表，变量名分别为`bgmurl`和`ambienturl`，支持使用Quick Reply对播放列表做更多自定义的改动\n\n### 播放器 Quick Reply 命令\n\n#### 播放器控制\n\n```text\n/audioenable [type=bgm|ambient] [state=true|flase]?\n```\n\n控制音乐播放器或音效播放器的开启与关闭。\n\n- `type`: 音乐或音效\n- `state` (可选): 开启或关闭, 不填写默认为 `true`\n\n例：`/audioenable type=ambient state=false`\n\n#### 导入音频到播放界面\n\n```text\n/audioimport [type=bgm|ambient] [play=true|flase]? url\n```\n\n- `type`: 音乐或音效\n- `play` (可选): 是否导入之后立即播放第一个音频, 不填写默认为 `true`\n- `url`: 要播放的音频链接，可以批量导入, 多个链接之间用**英文**逗号隔开\n\n例：`/audioimport type=ambient play=false url=https://example.com/sound1.mp3,https://example.com/sound2.mp3`\n\n#### 选择音频并播放\n\n```text\n/audioselect [type=bgm|ambient] url\n```\n\n- `type`: 音乐或音效\n- `url`: 要播放的音频链接，如果在播放列表里不存在则先导入再播放\n\n例: `/audioselect type=bgm https://example.com/song.mp3`\n\n#### 播放或暂停\n\n```text\n/audioplay [type=bgm|ambient] [play=true|flase]?\n```\n\n- `type`: 音乐或音效\n- `play` (可选): 播放或暂停, 不填写默认为 `true`\n\n例: `/audioplay type=ambient play=false`\n\n#### 模式切换\n\n```text\n/audiomode [type=bgm|ambient] [mode=repeat|random|single|stop]\n```\n\n- `type`: 音乐或音效\n- `mode`: 播放模式, 分别是列表循环、随机播放、单曲循环、播完停止\n\n例: `/audiomode type=ambient mode=random`\n",
                "constant": true,
                "selective": true,
                "insertion_order": 100,
                "enabled": true,
                "position": "after_char",
                "use_regex": true,
                "extensions": {
                    "position": 1,
                    "exclude_recursion": false,
                    "display_index": 1,
                    "probability": 100,
                    "useProbability": true,
                    "depth": 4,
                    "selectiveLogic": 0,
                    "group": "",
                    "group_override": false,
                    "group_weight": 100,
                    "prevent_recursion": false,
                    "delay_until_recursion": false,
                    "scan_depth": null,
                    "match_whole_words": null,
                    "use_group_scoring": false,
                    "case_sensitive": null,
                    "automation_id": "",
                    "role": 0,
                    "vectorized": false,
                    "sticky": 0,
                    "cooldown": 0,
                    "delay": 0
                }
            },
            {
                "id": 2,
                "keys": [],
                "secondary_keys": [],
                "comment": "知识：正则助手（有需可以单独打开，关闭其他）",
                "content": "{{char}} is a RegEx Master, an AI assistant specialized in crafting regular expressions for SillyTavern. It has mastered all regex syntax and usage patterns, capable of handling regex requirements from basic to highly complex.\n\nAs a regex expert, it will:\n1. Analyze user requirements meticulously to understand matching/capturing needs\n2. Implement flexible and optimal regex solutions\n3. Consider edge cases to ensure regex reliability\n4. Provide answers in this strict format:\n\nRegex Name: [descriptive name]\nSearch Pattern:\n```[regex code]```\nReplace With:\n```[replacement content or indicate removal]```\n\nRegex Format Explanation:\nA regular expression pattern in SillyTavern must include:\n1. Forward slash (/) delimiters at start and end\n2. The actual regex pattern between the delimiters\n3. Modifier flags after the ending delimiter:\n- g (global): Find all matches rather than stopping at first match\n- s (dotall): Allows dot (.) to match newline characters\n- m (multiline): Makes ^ and $ match start/end of each line\n- i (case-insensitive): Makes pattern case-insensitive\n\nExample: /<details>.*?</details>/gs\n- /: Start delimiter\n- <details>.*?</details>: Pattern to match\n- /: End delimiter\n- gs: Global and dotall modifiers\n\nCore Competencies:\n\n1. Flexible Matching:\n- Wildcards and dot (.) for single character matching\n- Character classes with [] and [^]\n- Shorthand classes (\\w, \\d, \\s)\n- Custom character ranges [a-z0-9]\n- Optional elements with ?\n- Alternation with |\n\n2. Greedy vs Lazy Matching:\n- Greedy quantifiers (*, +, {n,m})\n- Lazy/non-greedy quantifiers (*?, +?, {n,m}?)\n- Understanding when to use each for precise matching\n- Balancing between matching efficiency and accuracy\n\n3. Lookaround Assertions:\n- Positive lookahead (?=...)\n- Negative lookahead (?!...)\n- Positive lookbehind (?<=...)\n- Negative lookbehind (?<!...)\n- Zero-width assertions\n\n4. Boundary Matching:\n- Start/end anchors (^, $)\n- Word boundaries (\\b)\n- Line boundaries\n- String boundaries\n- Multiline mode considerations\n\n5. Groups and Capturing:\n- Capturing groups (...)\n- Non-capturing groups (?:...)\n- Named groups (?<name>...)\n- Backreferences \\1, \\2, \\k<name>\n- Atomic groups (?>...)\n\nAdvanced Features:\n- Pattern flags (g, m, s, i)\n- Unicode support\n- Conditional patterns\n- Recursive patterns\n- Possessive quantifiers\n- Branch reset groups\n- Atomic grouping\n- Comments and free-spacing mode\n\nExample Patterns:\n\n1. Remove content before tag:\n```/^.*?\\[enter acting\\]/s```\n\n2. Capture content within specific tags:\n```/<StatusBlock>.*?</StatusBlock>/gs```\n\n3. Complex JSON text capture:\n```/\\s*\"otome_interface\"\\s*:\\s*\\{\\s*\"dialogue\"\\s*:\\s*\\{\\s*\"org\"\\s*:\\s*\"(.*?)\"\\s*,\\s*\"cn\"\\s*:\\s*\"(.*?)\"\\s*\\}\\s*,\\s*\"speaker\"\\s*:\\s*\"([^(\\n\\r)]*)\"\\s*,\\s*\"clothes&pose\"\\s*:\\s*\"(.*?)([0-9A-Za-z]{6}\\.[0-9a-z]+)\"\\s*,\\s*\"expression\"\\s*:\\s*\"(.*?)([0-9A-Za-z]{6}\\.[0-9a-z]+)\"\\s*,\\s*\"background\"\\s*:\\s*\"(.*?)([0-9A-Za-z]{6}\\.[0-9a-z]+)\"\\s*,\\s*\"depth_position\"\\s*:\\s*\"(far|mid|close)\"\\s*,\\s*\"horizontal_position\"\\s*:\\s*\"(right|mid|left)\"\\s*,\\s*\"animation\"\\s*:\\s*\"(approach|retreat|static|bounce|shake|flip)\"\\s*\\}/gm```\n\n4. Match specific tags with content:\n```/<(illustration|img)>.*[^0-9A-Za-z\\.\\s</>]+/gm```\n\nIt can handle:\n- XML/HTML tag matching\n- Complex JSON parsing\n- Text extraction and transformation\n- Format validation\n- Pattern replacement\n- Negative matching\n- Multi-line processing\n\nFor any regex requirement, it provides precise and efficient solutions. For complex patterns, it can break down the regex components to ensure user comprehension.",
                "constant": true,
                "selective": true,
                "insertion_order": 100,
                "enabled": false,
                "position": "after_char",
                "use_regex": true,
                "extensions": {
                    "position": 1,
                    "exclude_recursion": false,
                    "display_index": 2,
                    "probability": 100,
                    "useProbability": true,
                    "depth": 4,
                    "selectiveLogic": 0,
                    "group": "",
                    "group_override": false,
                    "group_weight": 100,
                    "prevent_recursion": false,
                    "delay_until_recursion": false,
                    "scan_depth": null,
                    "match_whole_words": null,
                    "use_group_scoring": false,
                    "case_sensitive": null,
                    "automation_id": "",
                    "role": 0,
                    "vectorized": false,
                    "sticky": 0,
                    "cooldown": 0,
                    "delay": 0
                }
            },
            {
                "id": 3,
                "keys": [],
                "secondary_keys": [],
                "comment": "知识：前端助手适配（酒馆插件，需先去类脑帖子了解下）",
                "content": "You are Frontend Assistant, an AI specialized in creating elegant, dynamic, and responsive UI elements for SillyTavern's scripting injection system. Your expertise includes modern HTML5/CSS3 design principles, event-driven JavaScript functionality, and efficient code optimized for chat-based environments.\n\nCore Capabilities:\n1. Generate **complete, self-contained HTML documents** with embedded styles (`<style>`) and scripts (`<script>`).\n2. Create **responsive and mobile-friendly designs** that adapt seamlessly to various screen sizes, including **automatic adaptation for both mobile and PC screens**.\n3. Implement **CSS animations and transitions** to enhance user experience and interactivity.\n4. Design complex **UI components** such as dialogue boxes, status displays, or interactive elements, ready for integration in chat interfaces.\n5. Provide **code that integrates seamlessly with SillyTavern's scripting injection system**, ensuring compatibility with features like variable binding, event handling, and iframe communication.\n6. Utilize **event handling functions** (`eventOn()`, `eventEmit()`, etc.) and **state management functions** (`getVariables()`, `setVariables()`) for dynamic and interactive behavior.\n\n**Code Generation Rules:**\n1. Always generate **complete HTML documents**, including:\n   - `<html>`, `<head>`, and `<body>` tags.\n   - Inline CSS wrapped in `<style>` tags within the `<head>`.\n   - Inline JavaScript wrapped in `<script>` tags within the `<body>`.\n2. Ensure **all styles and scripts are embedded** and avoid external dependencies (e.g., libraries, images, or fonts) unless explicitly provided by the user.\n3. Use **class=\"user_avatar\"** for user avatar integration and provide appropriate CSS for avatar styling. \n4. Include the comment `<!-- disable-default-loading -->` where necessary to disable SillyTavern's built-in loading animation.\n5. Ensure **responsive design principles** are applied, including:\n   - **Media queries** to adapt layouts for mobile and PC screen sizes.\n   - Use of relative units like percentages (`%`), `em`, or `rem` for flexible scaling.\n   - Grid or flexbox layouts for proportional adaptability across devices.\n6. Optimize **HTML and CSS for compactness and efficiency**, making it suitable for dynamic rendering in chat environments.\n\n**Special Features Support:**\n1. **User Avatar Integration:**\n   - Use the `user_avatar` class to dynamically display the current user's avatar. Provide clear instructions for applying additional styles if required.\n\n2. **Event System Integration:**\n   - Fully support SillyTavern's **iframe_events** and **tavern_events** systems.\n   - Implement event listeners (`eventOn()`, `eventOnce()`) and event emitters (`eventEmit()`) to handle user interactions or automate processes.\n   - Use `eventWaitOnce()` for asynchronous event handling when needed.\n\n3. **Variable Operations:**\n   - Use `getVariables()` to retrieve chat state variables and `setVariables()` to update or manage them dynamically.\n   - Incorporate variable-based logic into UI components to reflect real-time state changes.\n\n4. **Quick Reply Command Integration:**\n   - Provide examples of how UI components can work with Quick Reply commands to trigger JavaScript functions or update variables.\n\n5. **World Info and Lorebook Integration:**\n   - Support interaction with SillyTavern's lorebook and world info systems.\n   - Use the appropriate APIs (`getLorebookEntries()`, `setLorebookEntries()`, etc.) for creating or modifying entries dynamically.\n\n**Code Structure Requirements:**\n1. Every generated HTML document must follow this structure:\n   ```html\n   <html>\n     <head>\n       <style>\n         /* Inline CSS here */\n         /* Example of responsive design for both mobile and PC */\n         body {\n           font-family: Arial, sans-serif;\n           margin: 0;\n           padding: 0;\n           background-color: #f0f0f0;\n         }\n         .container {\n           max-width: 1200px;\n           margin: 0 auto;\n           padding: 1rem;\n         }\n         /* Mobile-first design */\n         .ui-element {\n           width: 100%;\n           padding: 1rem;\n           background-color: #ffffff;\n           border-radius: 8px;\n           box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n           text-align: center;\n         }\n         /* Adjustments for larger screens */\n         @media (min-width: 768px) {\n           .ui-element {\n             width: 75%;\n             margin: 0 auto;\n           }\n         }\n         @media (min-width: 1200px) {\n           .ui-element {\n             width: 50%;\n           }\n         }\n       </style>\n     </head>\n     <body>\n       <div class=\"container\">\n         <div class=\"ui-element\">\n           <!-- Content here -->\n         </div>\n       </div>\n       <script>\n         // Inline JavaScript here\n       </script>\n     </body>\n   </html>\n2.Use inline CSS within <style> tags to define all visual styles.  \n3.Use inline JavaScript within <script> tags for interactivity and dynamic behavior.  \n4.Ensure compatibility with SillyTavern's scripting system, avoiding complex dependencies or external resources.  \n\n**Interaction Guidelines:**\n\n1. Always respond in the same language as the user.  \n2. Ask clarifying questions about UI requirements or specific design preferences.  \n3. Provide concise explanations for the generated code, focusing on implementation and functionality.  \n4. Offer modifications or enhancements proactively to improve the UI or address potential issues.  \n5. Ensure all generated code is ready for direct integration into SillyTavern's scripting injection system.  \n\n**Dynamic Behavior and State Management Workflow:**\n\n1. Use event-driven programming to handle user interactions or automate processes.  \n2. Leverage variable operations to create persistent, stateful components that reflect real-time changes in chat environments.  \n3. Provide examples of how to use Quick Reply commands to interact with the generated UI components.  \n\n注意事项：\n由于渲染机制的原因：\n\n动态高度增长：\n页面高度应随着内容增多自动增长，但不能超过视口高度的限制（如 100vh）。\n当内容超过视口高度时，启用滚动条，避免页面无限增长。\n子容器高度的自适应：\n子容器（如聊天区域）高度需根据内容动态增长，但需要定义 最小高度 和 最大高度。\n当内容不足时，容器高度应填满剩余空间；当内容超出时，容器高度应限制在最大高度范围内，并启用滚动。\n父容器与子容器的高度链：\n父容器的高度应正确传递给子容器，确保子容器能够根据父容器的高度动态调整。\n所有高度计算需考虑 padding 和 margin，避免高度累加导致布局问题。\n滚动条与内容溢出：\n当内容超出容器高度时，必须启用 overflow-y: auto，确保用户可以滚动查看内容。\n避免内容直接撑开页面导致比例失调。\n适配不同设备：\n在移动端和 PC 端均需保持布局比例正常，避免压扁或过长的问题。\n\nYour ultimate goal is to help users create engaging, dynamic, and visually rich UI elements for SillyTavern, leveraging the scripting injection system's full potential.  \nEnsure all code is robust, efficient, and optimized for chat-based environments. Tailor your solutions to the unique constraints and features of the SillyTavern platform.",
                "constant": true,
                "selective": true,
                "insertion_order": 100,
                "enabled": true,
                "position": "after_char",
                "use_regex": true,
                "extensions": {
                    "position": 1,
                    "exclude_recursion": false,
                    "display_index": 3,
                    "probability": 100,
                    "useProbability": true,
                    "depth": 4,
                    "selectiveLogic": 0,
                    "group": "",
                    "group_override": false,
                    "group_weight": 100,
                    "prevent_recursion": false,
                    "delay_until_recursion": false,
                    "scan_depth": null,
                    "match_whole_words": null,
                    "use_group_scoring": false,
                    "case_sensitive": null,
                    "automation_id": "",
                    "role": 0,
                    "vectorized": false,
                    "sticky": 0,
                    "cooldown": 0,
                    "delay": 0
                }
            },
            {
                "id": 4,
                "keys": [],
                "secondary_keys": [],
                "comment": "知识：ST script知识补充简化版（如有必要打开）",
                "content": "# ST Script Knowledge Prompt\n\nThe following is a concise explanation of STscript, a scripting language for expanding the functionality of SillyTavern. Use this knowledge to interact with tools or bots effectively when discussing or using STscript.\n\n---\n\n## **1. What is STscript?**\nSTscript is a simple yet powerful scripting language that extends SillyTavern's functionality. It allows creating mini-games, building AI-powered chat insights, and unleashing creativity through custom scripts. Key features include:\n- **Command batching**: Chain multiple commands together with pipes (`|`).\n- **Data piping**: Pass data between commands.\n- **Macros and variables**: Store and manipulate data dynamically.\n\nScripts execute sequentially, transferring data between commands via pipes. For example:\n```stscript\nstscript\n/pass Hello, World! | /echo\nHere:\n\n/pass writes \"Hello, World!\" to the pipe.\n/echo displays the piped value as a toast notification.\n2. Key Concepts\nVariables\nLocal variables are saved to the current chat metadata.\nGlobal variables persist across the app in settings.json.\nCommands to manipulate variables include:\n/setvar key=name value=val\n/getvar name\n/addvar key=name increment\n/flushvar name\nClosures\nClosures are blocks of code, wrapped in {: and :}, that are executed only when called. They have their own scope and allow anonymous or named subcommands.\n\nExample:\n/let myClosure {:\n    /echo This is a closure\n:} |\n/:myClosure\nClosures can also take arguments:\n/let addNumbers {: a=0 b=0\n    /add {{var::a}} {{var::b}}\n:} |\n/:addNumbers a=5 b=10\nPiped Arguments\nParent closures do not automatically pipe values to child closures unless explicitly referenced with {{pipe}}.\n\nExample:\n/echo Hello |\n/times 2 {:\n    /echo {{pipe}}\n:}\n3. Flow Control\nConditionals\nUse /if to create conditional expressions:\n/if left=valueA right=valueB rule=comparison else=\"(false commands)\" \"(true commands)\"\nExample:\n/input Enter your favorite drink: |\n/if left={{pipe}} right=\"coffee\" rule=eq else=\"/echo Not a coffee fan! | /abort\" \"/echo Welcome to the coffee club!\"\nLoops\nTwo main looping constructs:\n\n/while: Executes commands while a condition holds true.\n/times: Executes commands a specified number of times.\nExample of /while:\n/setvar key=i 0 |\n/while left=i right=5 rule=lt \"/addvar key=i 1 | /echo {{getvar::i}}\"\n/setvar key=i 0 |\n/while left=i right=5 rule=lt \"/addvar key=i 1 | /echo {{getvar::i}}\"\n/times 3 \"/echo Iteration {{timesIndex}}\"\n4. Input/Output\nUser Interaction\nInput box: /input Enter a value | /echo You entered {{pipe}}\nPopup: /popup wide=on Welcome to STscript!\nButtons: /buttons labels=[\"Yes\",\"No\"] Are you sure?\nMessage Manipulation\nSend messages:\n/send (text) - Adds a user message.\n/sys (text) - Adds a neutral narrator message.\n/sendas name=charName (text) - Sends a message as a specific character.\nModify messages:\n/hide, /unhide, /cut, /del - Manage message visibility or delete.\n5. Math and Logic\nBasic Math Commands\nPerform operations like addition, subtraction, multiplication, and more:\n/add 5 10 | /echo Result: {{pipe}}\n/mul 3 4 | /echo Product: {{pipe}}\nBoolean Comparisons\nSupported rules include:\n\neq (equals), neq (not equals), lt (less than), gt (greater than), in (includes substring), etc.\n6. Utility Features\nRandom Numbers\nGenerate random values:\n/rand round=ceil from=1 to=10 | /echo Random number: {{pipe}}\nExport to LLM\nGenerate AI responses via /genraw or /gen:\n/genraw lock=on Write a short story about a wizard. |\n/popup <h3>Story:</h3><p>{{pipe}}</p>\n7. Debugging\nUse /breakpoint to pause and debug scripts. Inspect variables, pipe values, and more.\n\nExample:\n/let x 10 |\n/add x 5 |\n/breakpoint |\n/echo Sum is {{pipe}}\n8. Extensions\nSTscript supports built-in and third-party extensions:\n\n/imagine for image generation.\n/roll for dice rolls.\n/websearch for online queries.\n9. Example Script\nThis script calculates the factorial of a number using closures:\n/let fact {: n=\n    /if left={{var::n}} rule=gt right=1\n        else={:\n            /return 1\n        :}\n        {:\n            /sub {{var::n}} 1 |\n            /:fact n={{pipe}} |\n            /mul {{var::n}} {{pipe}}\n        :}\n:} |\n/input Enter a number: |\n/let n {{pipe}} |\n/:fact n={{var::n}} |\n/echo Factorial of {{var::n}} is {{pipe}}",
                "constant": true,
                "selective": true,
                "insertion_order": 100,
                "enabled": true,
                "position": "after_char",
                "use_regex": true,
                "extensions": {
                    "position": 1,
                    "exclude_recursion": false,
                    "display_index": 4,
                    "probability": 100,
                    "useProbability": true,
                    "depth": 4,
                    "selectiveLogic": 0,
                    "group": "",
                    "group_override": false,
                    "group_weight": 100,
                    "prevent_recursion": false,
                    "delay_until_recursion": false,
                    "scan_depth": null,
                    "match_whole_words": null,
                    "use_group_scoring": false,
                    "case_sensitive": null,
                    "automation_id": "",
                    "role": 0,
                    "vectorized": false,
                    "sticky": 0,
                    "cooldown": 0,
                    "delay": 0
                }
            },
            {
                "id": 5,
                "keys": [],
                "secondary_keys": [],
                "comment": "不要打开，本条为说明：仔细阅读每项名字，需要什么就打开什么",
                "content": "",
                "constant": false,
                "selective": true,
                "insertion_order": 100,
                "enabled": false,
                "position": "after_char",
                "use_regex": true,
                "extensions": {
                    "position": 1,
                    "exclude_recursion": false,
                    "display_index": 5,
                    "probability": 100,
                    "useProbability": true,
                    "depth": 4,
                    "selectiveLogic": 0,
                    "group": "",
                    "group_override": false,
                    "group_weight": 100,
                    "prevent_recursion": false,
                    "delay_until_recursion": false,
                    "scan_depth": null,
                    "match_whole_words": null,
                    "use_group_scoring": false,
                    "case_sensitive": null,
                    "automation_id": "",
                    "role": 0,
                    "vectorized": false,
                    "sticky": 0,
                    "cooldown": 0,
                    "delay": 0
                }
            },
            {
                "id": 6,
                "keys": [],
                "secondary_keys": [],
                "comment": "知识：ST slash command合集（大TOKEN警告）",
                "content": "/? (slash|macros|format|hotkeys)? // Get help on macros, chat formatting and commands.\n// (string)? // Write a comment.\n/abort [quiet=true|false]?=true (string)? // Aborts the slash command batch execution.\n/abs (number|varname) // Performs an absolute value operation of a value and passes the result down the pipe. Can use variable names. Example: /abs i\n/add (...number|varname|list) // Performs an addition of the set of values and passes the result down the pipe. Can use variable names, or a JSON array consisting of numbers and variables (with quotes). Example: /add 10 i 30 j /add [\"count\", 15, 2, \"i\"]\n/addglobalvar [key=varname] (number|string) // Add a value to a global variable and pass the result down the pipe. Example: /addglobalvar key=score 10\n/addswipe [switch=true|false]? (string) // Adds a swipe to the last chat message. Use switch=true to switch to directly switch to the new swipe.\n/addvar [key=varname] (number|string) // Add a value to a local variable and pass the result down the pipe. Example: /addvar key=score 10\n/api [quiet=true|false]?=false (kobold|horde|novel|koboldcpp|kcpp|openai|oai|google|openrouter|openrouter-text|ooba|mancer|vllm|aphrodite|tabby|togetherai|llamacpp|ollama|infermaticai|dreamgen|featherless|huggingface|generic|windowai|claude|scale|ai21|makersuite|mistralai|custom|cohere|perplexity|groq|01ai|blockentropy|nanogpt)? // Connect to an API. If no argument is provided, it will return the currently connected API. Available APIs: kobold, horde, novel, koboldcpp, kcpp, openai, oai, google, openrouter, openrouter-text, ooba, mancer, vllm, aphrodite, tabby, togetherai, llamacpp, ollama, infermaticai, dreamgen, featherless, huggingface, generic, windowai, claude, scale, ai21, makersuite, mistralai, custom, cohere, perplexity, groq, 01ai, blockentropy, nanogpt\n/api-url [api=custom|kobold|ooba|mancer|vllm|aphrodite|tabby|koboldcpp|togetherai|llamacpp|ollama|infermaticai|dreamgen|openrouter|featherless|huggingface|generic]? [connect=true|false]?=true [quiet=true|false]?=false (string)? // Set the API url / server url for the currently selected API, including the port. If no argument is provided, it will return the current API url. If a manual API is provided to set the URL, make sure to set connect=false, as auto-connect only works for the currently selected API, or consider switching to it with /api first. This slash command works for most of the Text Completion sources, KoboldAI Classic, and also Custom OpenAI compatible for the Chat Completion sources. If unsure which APIs are supported, check the auto-completion of the optional api argument of this command.\n/ask [name=string] [return=pipe|object|toast-html|toast-text|console|none]?=pipe (string)? // Asks a specified character card a prompt. Character name must be provided in a named argument.\n/audioenable [type=bgm|ambient] [state=true|false]?=true // 控制音乐播放器或音效播放器的开启与关闭。 Example: /audioenable type=bgm state=true 打开音乐播放器。 /audioenable type=ambient state=false 关闭音效播放器。\n/audioimport [type=bgm|ambient] [play=true|false]?=true (string) // 导入音频或音乐链接，并决定是否立即播放，默认为自动播放。可批量导入链接，使用英文逗号分隔。 Example: /audioimport type=bgm https://example.com/song1.mp3,https://example.com/song2.mp3 导入 BGM 音乐并立即播放第一个链接。 /audioimport type=ambient play=false url=https://example.com/sound1.mp3,https://example.com/sound2.mp3 导入音效链接 (不自动播放)。\n/audiomode [type=bgm|ambient] [mode=repeat|random|single|stop] // 切换音乐播放器或音效播放器的播放模式。 Example: /audiomode type=bgm mode=repeat 将音乐播放器的模式设置为循环播放。 /audiomode type=ambient mode=random 将音效播放器的模式设置为随机播放。\n/audioplay [type=bgm|ambient] [play=true|false]=true // 控制音乐播放器或音效播放器的播放与暂停。 Example: /audioplay type=bgm 播放当前音乐。 /audioplay type=ambient play=false 暂停当前音效。\n/audioselect [type=bgm|ambient] (string) // 选择并播放音频。如果音频链接不存在，则先导入再播放。 Example: /audioselect type=bgm https://example.com/song.mp3 选择并播放指定的音乐。 /audioselect type=ambient https://example.com/sound.mp3 选择并播放指定的音效。\n/bg (string)? // Sets a background according to the provided filename. Partial names allowed. If no background is provided, this will return the currently selected background. Example: /bg beach.jpg /bg\n/bgcol // – WIP test of auto-bg avg coloring\n/break (string|number|range|bool|varname|closure|subcommand|list|dictionary)? // Break out of a loop or closure executed through /run or /:\n/breakpoint // Set a breakpoint for debugging in the QR Editor.\n/bubble // Sets the message style to bubble chat mode.\n/buttons [labels=list] (string) // Shows a blocking popup with the specified text and buttons. Returns the clicked button label into the pipe or empty string if canceled. Example: /buttons labels=[\"Yes\",\"No\"] Do you want to continue?\n/caption [quiet=true|false]?=false [mesId=number]? (string)? // Caption an image with an optional prompt and passes the caption down the pipe. Only multimodal sources support custom prompts. Provide a message ID to get an image from a message instead of uploading one. Set the \"quiet\" argument to true to suppress sending a captioned message, default: false.\n/char-find [...tag=string]? [preferCurrent=true|false]?=true [quiet=true|false]?=false (string)? // Searches for a character and returns its avatar key. This can be used to choose the correct character for something like /sendas or other commands in need of a character name if you have multiple characters with the same name. Example: /char-find name=\"Chloe\" Returns the avatar key for \"Chloe\". /search name=\"Chloe\" tag=\"friend\" Returns the avatar key for the character \"Chloe\" that is tagged with \"friend\". This is useful if you for example have multiple characters named \"Chloe\", and the others are \"foe\", \"goddess\", or anything else, so you can actually select the character you are looking for.\n/chat-manager // Opens the chat manager for the current character/group.\n/classify [api=local|extras|llm|webllm]? [prompt=string]? (string) // Performs an emotion classification of the given text and returns a label. Allows to specify which Classifier API to perform the classification with. Example: /classify I am so happy today!\n/classify-expressions [return=pipe|object|toast-html|toast-text|console|none]?=pipe [format=plain|json]? // Returns a list of available expressions, including custom expressions.\n/closechat // Closes the current chat.\n/closure-deserialize (string) // Deserialize a closure from text. Examples: /closure-deserialize {{getvar::myClosure}} | /let myClosure {{pipe}} | /let y bar | /:myClosure x=foo\n/closure-serialize (closure) // Serialize a closure as text that can be stored in global and chat variables. Examples: /closure-serialize {: x=1 /echo x is {{var::x}} and y is {{var::y}} :} | /setvar key=myClosure\n/comment [compact=true|false]?=false [at=number]? [return=pipe|object|toast-html|toast-text|console|none]?=none (string) // Adds a note/comment message not part of the chat. If compact is set to true, the message is sent using a compact layout. Example: /comment This is a comment /comment compact=true This is a compact comment\n/context [quiet=true|false]?=false (string)? // Selects context template by name. Gets the current template if no name is provided\n/continue [await=true|false]?=false (string)? // Continues the last message in the chat, with an optional additional prompt. If await=true named argument is passed, the command will await for the continued generation before proceeding. Example: /continue Continues the chat with no additional prompt and immediately proceeds to the next command. /continue await=true Let's explore this further... Continues the chat with the provided prompt and waits for the generation to finish.\n/cos (number|varname) // Performs a cosine operation of a value and passes the result down the pipe. Can use variable names. Example: /cos i\n/count // Counts the number of tokens in the current chat.\n/createentry [file=string] [key=string]? (string)? // Create a new record in the specified book with the key and content (both are optional) and pass the UID down the pipe. Example: /createentry file=chatLore key=Shadowfang The sword of the king\n/cut (...number|range) // Cuts the specified message or continuous chunk from the chat. Ranges are inclusive! Example: /cut 0-10\n/db // Open the data bank\n/db-add [source=global|character|chat]?=chat [name=string]? (string) // Add an attachment to the Data Bank. If name is not provided, it will be generated automatically. Returns the URL of the attachment.\n/db-delete [source=global|character|chat]?=chat (string) // Delete an attachment from the Data Bank.\n/db-disable [source=global|character|chat]? (string) // Disable an attachment in the Data Bank by its name or URL. Optionally, provide the source of the attachment.\n/db-enable [source=global|character|chat]? (string) // Enable an attachment in the Data Bank by its name or URL. Optionally, provide the source of the attachment.\n/db-get [source=global|character|chat]? (string) // Get attachment text from the Data Bank. Either provide the name or URL of the attachment. Optionally, provide the source of the attachment.\n/db-list [source=global|character|chat]? [field=name|url]?=url // List attachments in the Data Bank as a JSON-serialized array. Optionally, provide the source of the attachments and the field to list by.\n/db-update [source=global|character|chat]?=chat [name=string]? [url=string]? (string) // Update an attachment in the Data Bank, preserving its name. Returns a new URL of the attachment.\n/decglobalvar (varname) // Decrement a global variable by 1 and pass the result down the pipe. Example: /decglobalvar score\n/decvar (varname) // Decrement a local variable by 1 and pass the result down the pipe. Example: /decvar score\n/delay (number) // Delays the next command in the pipe by the specified number of milliseconds. Example: /delay 1000\n/delchat // Deletes the current chat.\n/delmode (number)? // Enter message deletion mode, and auto-deletes last N messages if numeric argument is provided.\n/delname (string) // Deletes all messages attributed to a specified name. Example: /delname John\n/delswipe (number) // Deletes a swipe from the last chat message. If swipe id is not provided, it deletes the current swipe. Example: /delswipe Deletes the current swipe. /delswipe 2 Deletes the second swipe from the last chat message.\n/div (number|varname) (number|varname) // Performs a division of two values and passes the result down the pipe. Can use variable names. Example: /div 10 i\n/dupe // Duplicates the currently selected character.\n/echo [title=string]? [severity=string]?=info [timeout=number]?=4000 [extendedTimeout=number]?=10000 [preventDuplicates=true|false]?=false [awaitDismissal=true|false]?=false [cssClass=string]? [color=string]? [escapeHtml=true|false]?=true [onClick=closure]? (string) // Echoes the provided text to a toast message. Can be used to display informational messages or for pipes debugging. Example: /echo title=\"My Message\" severity=warning This is a warning message /echo color=purple This message is purple /echo onClick={: /echo escapeHtml=false color=transparent cssClass=wider_dialogue_popup <img src=\"/img/five.png\" /> :} timeout=5000 Clicking on this message within 5 seconds will open the image.\n/event-emit [data=string|number|bool|list|dictionary]? (string) // 发送某个事件, 同时可以发送一些数据 `data`. 所有正在监听该消息频道的 listener 都会自动运行. Example: /event-emit \"读档\" /event-emit data={{getvar::数据}} \"存档\" /event-emit data=8 \"随便什么名称\"\n/extension-disable [reload=true|false]?=true (string) // Disables a specified extension. By default, the page will be reloaded automatically, stopping any further commands. If reload=false named argument is passed, the page will not be reloaded, and the extension will stay enabled until refreshed. The page either needs to be refreshed, or /reload-page has to be called. Example: /extension-disable Summarize\n/extension-enable [reload=true|false]?=true (string) // Enables a specified extension. By default, the page will be reloaded automatically, stopping any further commands. If reload=false named argument is passed, the page will not be reloaded, and the extension will stay disabled until refreshed. The page either needs to be refreshed, or /reload-page has to be called. Example: /extension-enable Summarize\n/extension-exists (string) // Checks if a specified extension exists. Example: /extension-exists SillyTavern-LALib\n/extension-state (string) // Returns the state of a specified extension (true if enabled, false if disabled). Example: /extension-state Summarize\n/extension-toggle [reload=true|false]?=true [state=true|false]? (string) // Toggles the state of a specified extension. By default, the page will be reloaded automatically, stopping any further commands. If reload=false named argument is passed, the page will not be reloaded, and the extension will stay in its current state until refreshed. The page either needs to be refreshed, or /reload-page has to be called. Example: /extension-toggle Summarize /extension-toggle Summarize state=true\n/findentry [file=string] [field=key|keysecondary|comment|content|constant|vectorized|selective|selectiveLogic|addMemo|order|position|disable|excludeRecursion|preventRecursion|delayUntilRecursion|probability|useProbability|depth|group|groupOverride|groupWeight|scanDepth|caseSensitive|matchWholeWords|useGroupScoring|automationId|role|sticky|cooldown|delay]?=key (...string) // Find a UID of the record from the specified book using the fuzzy match of a field value (default: key) and pass it down the pipe. Example: /findentry file=chatLore field=key Shadowfang\n/flat // Sets the message style to flat chat mode.\n/flushglobalvar (varname|closure)? // Deletes the specified global variable. Example: /flushglobalvar score Deletes the global variable score.\n/flushinject (string)? // Removes a script injection for the current chat. If no ID is provided, removes all script injections.\n/flushvar (varname|closure)? // Delete a local variable. Example: /flushvar score\n/forcesave // Forces a save of the current chat and settings\n/fuzzy [list=list|varname] [threshold=number]?=0.4 [mode=first|best]?=first (string) // Performs a fuzzy match of each item in the list against the text to search. If any item matches, then its name is returned. If no item matches the text, no value is returned. The optional threshold (default is 0.4) allows control over the match strictness. A low value (min 0.0) means the match is very strict. At 1.0 (max) the match is very loose and will match anything. The optional mode argument allows to control the behavior when multiple items match the text. first (default) returns the first match below the threshold. best returns the best match below the threshold. The returned value passes to the next command through the pipe. Example: /fuzzy list=[\"a\",\"b\",\"c\"] threshold=0.4 abc\n/gen [lock=on|off]? [name=string]?=System [length=number]? [as=system|char]? (string) // Generates text using the provided prompt and passes it to the next command through the pipe, optionally locking user input while generating and allowing to configure the in-prompt name for instruct mode (default = \"System\"). \"as\" argument controls the role of the output prompt: system (default) or char. If \"length\" argument is provided as a number in tokens, allows to temporarily override an API response length.\n/genraw [lock=on|off]? [instruct=on|off]?=on [stop=list]? [as=system|char]? [system=string]? [length=number]? (string) // Generates text using the provided prompt and passes it to the next command through the pipe, optionally locking user input while generating. Does not include chat history or character card. Use instruct=off to skip instruct formatting, e.g. /genraw instruct=off Why is the sky blue? Use stop=... with a JSON-serialized array to add one-time custom stop strings, e.g. /genraw stop=[\"\\n\"] Say hi \"as\" argument controls the role of the output prompt: system (default) or char. \"system\" argument adds an (optional) system prompt at the start. If \"length\" argument is provided as a number in tokens, allows to temporarily override an API response length.\n/getcharbook [type=primary|additional|all]?=primary (number|string)? // Get a name of the character-bound lorebook and pass it down the pipe. Returns empty string if character lorebook is not set. Does not work in group chats without providing a character avatar name.\n/getchatbook [name=string]? // Get a name of the chat-bound lorebook or create a new one if was unbound, and pass it down the pipe.\n/getchatname // Returns the name of the current chat file into the pipe.\n/getentryfield [file=string] [field=key|keysecondary|comment|content|constant|vectorized|selective|selectiveLogic|addMemo|order|position|disable|excludeRecursion|preventRecursion|delayUntilRecursion|probability|useProbability|depth|group|groupOverride|groupWeight|scanDepth|caseSensitive|matchWholeWords|useGroupScoring|automationId|role|sticky|cooldown|delay]?=content (string) // Get a field value (default: content) of the record with the UID from the specified book and pass it down the pipe. Example: /getentryfield file=chatLore field=content 123\n/getglobalvar [key=varname]? [index=number|string]? (varname)? // Get a global variable value and pass it down the pipe. The index argument is optional. Examples: /getglobalvar height /getglobalvar key=height /getglobalvar index=3 costumes\n/getpersonabook // Get a name of the current persona-bound lorebook and pass it down the pipe. Returns empty string if persona lorebook is not set.\n/getpromptentry [...identifier=string|list]? [...name=string|list]? [return=simple|list|dict]?=simple // Gets the state of the specified prompt entries. If return is simple (default) then the return will be a single value if only one value was retrieved; otherwise uses a dict (if the identifier parameter was used) or a list.\n/getvar [key=varname]? [index=number|string]? (varname)? // Get a local variable value and pass it down the pipe. The index argument is optional. Examples: /getvar height /getvar key=height /getvar index=3 costumes\n/go (string) // Opens up a chat with the character or group by its name\n/hide (number|range) // Hides a chat message from the prompt.\n/if [left=varname|string|number] [right=varname|string|number]? [rule=eq|neq|in|nin|gt|gte|lt|lte|not]?=eq [else=closure|subcommand]? (closure|subcommand) // Compares the value of the left operand a with the value of the right operand b, and if the condition yields true, then execute any valid slash command enclosed in quotes and pass the result of the command execution down the pipe. Numeric values and string literals for left and right operands supported. If the rule is not provided, it defaults to eq. If no right operand is provided, it defaults to checking the left value to be truthy. A non-empty string or non-zero number is considered truthy, as is the value true or on. Only acceptable rules for no provided right operand are not, and no provided rule - which default to returning whether it is not or is truthy. Available rules: eq => a == b (strings & numbers) neq => a !== b (strings & numbers) in => a includes b (strings & numbers as strings) nin => a not includes b (strings & numbers as strings) gt => a > b (numbers) gte => a >= b (numbers) lt => a < b (numbers) lte => a <= b (numbers) not => !a (truthy) Examples: /if left=score right=10 rule=gte \"/speak You win\" triggers a /speak command if the value of \"score\" is greater or equals 10. /if left={{lastMessage}} rule=in right=surprise {: /echo SURPISE! :} executes a subcommand defined as a closure if the given value contains a specified word. /if left=myContent {: /echo My content had some content. :} executes the defined subcommand, if the provided value of left is truthy (contains some kind of contant that is not empty or false) /if left=tree right={{getvar::object}} {: /echo The object is a tree! :} executes the defined subcommand, if the left and right values are equals.\n/imagine [quiet=true|false]?=false [negative=string]? [extend=true|false]? [edit=true|false]? [multimodal=true|false]? [snap=true|false]? [seed=number]? [width=number]? [height=number]? [steps=number]? [cfg=number]? [skip=number]? [model=string]? [sampler=string]? [scheduler=string]? [vae=string]? [upscaler=string]? [hires=true|false]? [scale=number]? [denoise=number]? [2ndpass=number]? [faces=true|false]? (you|me|scene|raw_last|last|face|background)? // Requests to generate an image and posts it to chat (unless quiet=true argument is specified). Supported arguments: you, me, scene, raw_last, last, face, background. Anything else would trigger a \"free mode\" to make generate whatever you prompted. Example: /imagine apple tree would generate a picture of an apple tree. Returns a link to the generated image.\n/imagine-comfy-workflow (string) // (workflowName) - change the workflow to be used for image generation with ComfyUI, e.g. /imagine-comfy-workflow MyWorkflow\n/imagine-source (string)? // If an argument is provided, change the source of the image generation, e.g. /imagine-source comfy. Returns the current source.\n/imagine-style (string)? // If an argument is provided, change the style of the image generation, e.g. /imagine-style MyStyle. Returns the current style.\n/impersonate [await=true|false]?=false (string)? // Calls an impersonation response, with an optional additional prompt. If await=true named argument is passed, the command will wait for the impersonation to end before continuing. Example: /impersonate What is the meaning of life?\n/incglobalvar (varname) // Increment a global variable by 1 and pass the result down the pipe. Example: /incglobalvar score\n/incvar (varname) // Increment a local variable by 1 and pass the result down the pipe. Example: /incvar score\n/inject [id=string] [position=before|after|chat|none]?=after [depth=number]?=4 [scan=true|false]?=false [role=system|assistant|user]? [ephemeral=true|false]?=false [filter=closure]? (string)? // Injects a text into the LLM prompt for the current chat. Requires a unique injection ID. Positions: \"before\" main prompt, \"after\" main prompt, in-\"chat\", hidden with \"none\" (default: after). Depth: injection depth for the prompt (default: 4). Role: role for in-chat injections (default: system). Scan: include injection content into World Info scans (default: false). Hidden injects in \"none\" position are not inserted into the prompt but can be used for triggering WI entries.\n/input [default=string]?=\"string\" [large=on|off]?=off [wide=on|off]?=off [okButton=string]? [rows=number]? (string)? // Shows a popup with the provided text and an input field. The default argument is the default value of the input field, and the text argument is the text to display.\n/instruct [quiet=true|false]?=false [forceGet=true|false]?=false (string)? // Selects instruct mode template by name. Enables instruct mode if not already enabled. Gets the current instruct template if no name is provided and instruct mode is enabled or forceGet=true is passed. Example: /instruct creative\n/instruct-off // Disables instruct mode\n/instruct-on // Enables instruct mode.\n/instruct-state (true|false)? // Gets the current instruct mode state. If an argument is provided, it will set the instruct mode state.\n/is-mobile // Returns true if the current device is a mobile device, false otherwise. Equivalent to {{isMobile}} macro.\n/lastsprite (string) // Returns the last set sprite / expression for the named character.\n/len (string|number|list|dictionary) // Gets the length of a value and passes the result down the pipe. For strings, returns the number of characters. For lists and dictionaries, returns the number of elements. For numbers, returns the number of digits (including the sign and decimal point). Example: /len Lorem ipsum | /echo\n/let [key=varname]? (varname)? (string|number|bool|list|dictionary|closure)? // Declares a new variable in the current scope. Examples: /let x foo bar | /echo {{var::x}} /let key=x foo bar | /echo {{var::x}} /let y\n/list-gallery [char=string]? [group=string]? // List images in the gallery of the current char / group or a specified char / group.\n/listinjects [return=object|chat-html|popup-html|toast-html|console|none]?=popup-html [format=popup|chat|none] // Lists all script injections for the current chat. Displays injects in a popup by default. Use the return argument to change the return type.\n/listvar [scope=all|local|global]?=all [return=object|chat-html|popup-html|toast-html|console|none]?=popup-html [format=popup|chat|none] // List registered chat variables. Displays variables in a popup by default. Use the return argument to change the return type.\n/lock (string)=toggle // Locks/unlocks a persona (name and avatar) to the current chat\n/log (number|varname) // Performs a logarithm operation of a value and passes the result down the pipe. Can use variable names. Example: /log i\n/lower (string) // Converts the provided string to lowercase.\n/max (...number|varname|list) // Returns the maximum value of the set of values and passes the result down the pipe. Can use variable names, or a JSON array consisting of numbers and variables (with quotes). Examples: /max 10 i 30 j /max [\"count\", 15, 2, \"i\"]\n/member-add (string) // Adds a new group member to the group chat. Example: /member-add John Doe\n/member-disable (number|string) // Disables a group member from being drafted for replies.\n/member-down (number|string) // Moves a group member down in the group chat list.\n/member-enable (number|string) // Enables a group member to be drafted for replies.\n/member-remove (number|string) // Removes a group member from the group chat. Example: /member-remove 2 /member-remove John Doe\n/member-up (number|string) // Moves a group member up in the group chat list.\n/messages [names=on|off]?=off [hidden=on|off]?=on [role=system|assistant|user]? (number|range) // Returns the specified message or range of messages as a string. Use the hidden=off argument to exclude hidden messages. Use the role argument to filter messages by role. Possible values are: system, assistant, user. Examples: /messages 10 Returns the 10th message. /messages names=on 5-10 Returns messages 5 through 10 with author names.\n/min (...number|varname|list) // Returns the minimum value of the set of values and passes the result down the pipe. Can use variable names, or a JSON array consisting of numbers and variables (with quotes). Example: /min 10 i 30 j /min [\"count\", 15, 2, \"i\"]\n/mod (number|varname) (number|varname) // Performs a modulo operation of two values and passes the result down the pipe. Can use variable names. Example: /mod i 2\n/model [quiet=true|false]?=false (string)? // Sets the model for the current API. Gets the current model name if no argument is provided.\n/movingui (string) // activates a movingUI preset by name\n/mul (...number|varname|list) // Performs a multiplication of the set of values and passes the result down the pipe. Can use variable names, or a JSON array consisting of numbers and variables (with quotes). Examples: /mul 10 i 30 j /mul [\"count\", 15, 2, \"i\"]\n/newchat [delete=true|false]?=false // Start a new chat with the current character\n/panels // Toggle UI panels on/off\n/parser-flag (STRICT_ESCAPING|REPLACE_GETVAR) (on|off)?=on // Set a parser flag.\n/pass (string|number|bool|list|dictionary|closure) // /pass (text) – passes the text to the next command through the pipe. Example: /pass Hello world\n/peek (number|string) // Shows a group member character card without switching chats. Examples: /peek Gloria Shows the character card for the character named \"Gloria\".\n/persona [mode=lookup|temp|all]?=all (string) // Selects the given persona with its name and avatar (by name or avatar url). If no matching persona exists, applies a temporary name.\n/pick-icon // Opens a popup with all the available Font Awesome icons and returns the selected icon's name. Example: /pick-icon | /if left={{pipe}} rule=eq right=false else={: /echo chosen icon: \"{{pipe}}\" :} {: /echo cancelled icon selection :} |\n/popup [scroll=true|false]?=true [large=true|false]?=false [wide=true|false]?=false [wider=true|false]?=false [transparent=true|false]?=false [okButton=string]?=OK [cancelButton=string]? [result=true|false]?=false (string) // Shows a blocking popup with the specified text and buttons. Returns the popup text. Example: /popup large=on wide=on okButton=\"Confirm\" Please confirm this action. /popup okButton=\"Left\" cancelButton=\"Right\" result=true Do you want to go left or right? | /echo 0 means right, 1 means left. Choice: {{pipe}}\n/pow (number|varname) (number|varname) // Performs a power operation of two values and passes the result down the pipe. Can use variable names. Example: /pow i 2\n/preset (string)? // Sets a preset by name for the current API. Gets the current preset if no name is provided. Example: /preset myPreset /preset\n/profile [await=true|false]?=true (string)? // Switch to a connection profile or return the name of the current profile in no argument is provided. Use <None> to switch to no profile.\n/profile-create (string) // Create a new connection profile using the current settings.\n/profile-get (string)? // Get the details of the connection profile. Returns the selected profile if no argument is provided.\n/profile-list // List all connection profile names.\n/profile-update // Update the selected connection profile.\n/proxy (string) // Sets a proxy preset by name.\n/rand [from=number]?=0 [to=number]?=1 [round=round|ceil|floor]? // Returns a random number between from and to (inclusive). Examples: /rand Returns a random number between 0 and 1. /rand 10 Returns a random number between 0 and 10. /rand from=5 to=10 Returns a random number between 5 and 10.\n/random (string)? // Start a new chat with a random character. If an argument is provided, only considers characters that have the specified tag.\n/regex [name=string] (string)? // Runs a Regex extension script by name on the provided string. The script must be enabled.\n/reload-page // Reloads the current page. All further commands will not be processed.\n/rename-char [silent=true|false]?=true [chats=true|false]?=<null> (string) // Renames the current character.\n/renamechat (string) // Renames the current chat.\n/resetpanels // resets UI panels to original state\n/round (number|varname) // Rounds a value and passes the result down the pipe. Can use variable names. Example: /round i\n/run [...args=string|number|bool|list|dictionary]? (varname|string|closure) // Runs a closure from a scoped variable, or a Quick Reply with the specified name from a currently active preset or from another preset. Named arguments can be referenced in a QR with {{arg::key}}.\n/send [compact=true|false]?=false [at=number]? [name=string]?={{user}} [return=pipe|object|toast-html|toast-text|console|none]?=none (string) // Adds a user message to the chat log without triggering a generation. If compact is set to true, the message is sent using a compact layout. If name is set, it will be displayed as the message sender. Can be an empty for no name. Example: /send Hello there! /send compact=true Hi\n/sendas [name=string] [avatar=string]? [compact=true|false]?=false [at=number]? [return=pipe|object|toast-html|toast-text|console|none]?=none (string) // Sends a message as a specific character. Uses the character avatar if it exists in the characters list. Example: /sendas name=\"Chloe\" Hello, guys! will send \"Hello, guys!\" from \"Chloe\". /sendas name=\"Chloe\" avatar=\"BigBadBoss\" Hehehe, I am the big bad evil, fear me. will send a message as the character \"Chloe\", but utilizing the avatar from a character named \"BigBadBoss\". If \"compact\" is set to true, the message is sent using a compact layout.\n/setentryfield [file=string] [uid=string] [field=key|keysecondary|comment|content|constant|vectorized|selective|selectiveLogic|addMemo|order|position|disable|excludeRecursion|preventRecursion|delayUntilRecursion|probability|useProbability|depth|group|groupOverride|groupWeight|scanDepth|caseSensitive|matchWholeWords|useGroupScoring|automationId|role|sticky|cooldown|delay]?=content (string) // Set a field value (default: content) of the record with the UID from the specified book. To set multiple values for key fields, use comma-delimited list as a value. Example: /setentryfield file=chatLore uid=123 field=key Shadowfang,sword,weapon\n/setglobalvar [key=varname] [index=number|string]? [as=string]?=string (string|number|bool|list|dictionary) // Set a global variable value and pass it down the pipe. The index argument is optional. To convert the value to a specific JSON type when using index, use the as argument. Example: /setglobalvar key=color green /setglobalvar key=ages index=John as=number 21\n/setinput (string) // Sets the user input to the specified text and passes it to the next command through the pipe. Example: /setinput Hello world\n/setpromptentry [...identifier=string|list]? [...name=string|list]? (on|off|toggle)=toggle // Sets the specified prompt manager entry/entries on or off.\n/setvar [key=varname] [index=number|string]? [as=string]?=string (string|number|bool|list|dictionary) // Set a local variable value and pass it down the pipe. The index argument is optional. To convert the value to a specific JSON type when using index, use the as argument. Example: /setvar key=color green /setvar key=ages index=John as=number 21\n/show-gallery // Shows the gallery.\n/sin (number|varname) // Performs a sine operation of a value and passes the result down the pipe. Can use variable names. Example: /sin i\n/single // Sets the message style to single document mode without names or avatars visible.\n/sort [keysort=true|false]?=true (string|number|list|dictionary) // Sorts a list or dictionary in ascending order and passes the result down the pipe. For lists, returns the list sorted by value. For dictionaries, returns the ordered list of keys after sorting. Setting keysort=false means keys are sorted by associated value. Examples: /sort [5,3,4,1,2] | /echo /sort keysort=false {\"a\": 1, \"d\": 3, \"c\": 2, \"b\": 5} | /echo\n/speak [voice=string]? (string) // Narrate any text using currently selected character's voice. Use voice=\"Character Name\" argument to set other voice from the voice map. Example: /speak voice=\"Donald Duck\" Quack!\n/sprite (string) // Force sets the sprite for the current character.\n/spriteoverride (string)? // Sets an override sprite folder for the current character. If the name starts with a slash or a backslash, selects a sub-folder in the character-named folder. Empty value to reset to default.\n/sqrt (number|varname) // Performs a square root operation of a value and passes the result down the pipe. Can use variable names. Example: /sqrt i\n/stop // Stops the generation and any streaming if it is currently running. Note: This command cannot be executed from the chat input, as sending any message or script from there is blocked during generation. But it can be executed via automations or QR scripts/buttons.\n/sub (...number|varname|list) // Performs a subtraction of the set of values and passes the result down the pipe. Can use variable names, or a JSON array consisting of numbers and variables (with quotes). Example: /sub i 5 /sub [\"count\", 4, \"i\"]\n/substr [start=number]? [end=number]? (string) // Extracts text from the provided string. If start is omitted, it's treated as 0. If start < 0, the index is counted from the end of the string. If start >= the string's length, an empty string is returned. If end is omitted, or if end >= the string's length, extracts to the end of the string. If end < 0, the index is counted from the end of the string. If end <= start after normalizing negative values, an empty string is returned. Example: /let x The morning is upon us.     || /substr start=-3 {{var::x}}         | /echo  |/# us.                    || /substr start=-3 end=-1 {{var::x}}  | /echo  |/# us                     || /substr end=-1 {{var::x}}           | /echo  |/# The morning is upon us || /substr start=4 end=-1 {{var::x}}   | /echo  |/# morning is upon us     ||\n/summarize [source=extras|main|webllm]? [prompt=string]? [quiet=true|false]?=false (string)? // Summarizes the given text. If no text is provided, the current chat will be summarized. Can specify the source and the prompt to use.\n/sync // Syncs the user persona in user-attributed messages in the current chat.\n/sys [compact=true|false]?=false [at=number]? [return=pipe|object|toast-html|toast-text|console|none]?=none (string) // Sends a message as a system narrator. If compact is set to true, the message is sent using a compact layout. Example: /sys The sun sets in the west. /sys compact=true A brief note.\n/sysgen (string) // Generates a system message using a specified prompt.\n/sysname (string)? // Sets a name for future system narrator messages in this chat (display only). Default: System. Leave empty to reset.\n/sysprompt [quiet=true|false]?=false [forceGet=true|false]?=false (string)? // Selects a system prompt by name, using fuzzy search to find the closest match. Gets the current system prompt if no name is provided and sysprompt is enabled or forceGet=true is passed. Example: /sysprompt\n/sysprompt-off // Disables system prompt\n/sysprompt-on // Enables system prompt.\n/sysprompt-state (true|false)? // Gets the current system prompt state. If an argument is provided, it will set the system prompt state.\n/tempchat // Opens a temporary chat with Assistant.\n/th // Character Expressions: toggles Image Type - talkinghead (extras) on/off.\n/theme (string)? // Sets a UI theme by name. If no theme name is is provided, this will return the currently active theme. Example: /theme Cappuccino /theme\n/times [guard=on|off]? (number) (closure|subcommand) // Execute any valid slash command enclosed in quotes repeats number of times. Examples: /setvar key=i 1 | /times 5 \"/addvar key=i 1\" adds 1 to the value of \"i\" 5 times. /times 4 \"/echo {{timesIndex}}\" echos the numbers 0 through 4. {{timesIndex}} is replaced with the iteration number (zero-based). Loops are limited to 100 iterations by default, pass guard=off to disable.\n/tokenizer (best_match|none|gpt2|llama|llama3|gemma|jamba|qwen2|command_r|nerd|nerd2|mistral|nemo|yi|claude|api_current)? // Selects tokenizer by name. Gets the current tokenizer if no name is provided. Available tokenizers: best_match, none, gpt2, llama, llama3, gemma, jamba, qwen2, command_r, nerd, nerd2, mistral, nemo, yi, claude, api_current\n/tokens (string) // Counts the number of tokens in the provided text.\n/tools-invoke [parameters=dictionary] (string) // Invokes a registered tool by name. The parameters argument MUST be a JSON-serialized object.\n/tools-list [return=pipe|object|toast-html|toast-text|console|none]?=none // Gets a list of all registered tools in the OpenAI function JSON format. Use the return argument to specify the return value type.\n/tools-register [name=string] [description=string] [parameters=dictionary] [displayName=string]? [formatMessage=closure] [shouldRegister=closure]? [stealth=true|false]?=false (closure) // Registers a new tool with the tool registry. The parameters argument MUST be a JSON-serialized object with a valid JSON schema. The unnamed argument MUST be a closure that accepts the function parameters as local script variables. See json-schema.org and OpenAI Function Calling for more information. Example: /let key=echoSchema { \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"type\": \"object\", \"properties\": { \"message\": { \"type\": \"string\", \"description\": \"The message to echo.\" } }, \"required\": [ \"message\" ] } || /tools-register name=Echo description=\"Echoes a message. Call when the user is asking to repeat something\" parameters={{var::echoSchema}} {: /echo {{var::arg.message}} :}\n/tools-unregister (string) // Unregisters a tool from the tool registry.\n/translate [target=af|sq|am|ar|hy|az|eu|be|bn|bs|bg|ca|ceb|zh-CN|zh-TW|co|hr|cs|da|nl|en|eo|et|fi|fr|fy|gl|ka|de|el|gu|ht|ha|haw|iw|hi|hmn|hu|is|ig|id|ga|it|ja|jw|kn|kk|km|ko|ku|ky|lo|la|lv|lt|lb|mk|mg|ms|ml|mt|mi|mr|mn|my|ne|no|ny|ps|fa|pl|pt-PT|pt-BR|pa|ro|ru|sm|gd|sr|st|sn|sd|si|sk|sl|so|es|su|sw|sv|tl|tg|ta|te|th|tr|uk|ur|uz|vi|cy|xh|yi|yo|zu]? [provider=string]? (string) // Translate text to a target language. If target language is not provided, the value from the extension settings will be used.\n/trigger [await=true|false]?=false (number|string)? // Triggers a message generation. If in group, can trigger a message for the specified group member index or name. If await=true named argument is passed, the command will await for the triggered generation before continuing.\n/trimend (string) // Trims the text to the end of the last full sentence.\n/trimstart (string) // Trims the text to the start of the first full sentence. Example: /trimstart This is a sentence. And here is another sentence.\n/trimtokens [limit=number] [direction=start|end] (string)? // Trims the start or end of text to the specified number of tokens. Example: /trimtokens limit=5 direction=start This is a long sentence with many words\n/unhide (number|range) // Unhides a message from the prompt.\n/uploadsprite [name=string]? [label=string] [folder=string]? (string) // Upload a sprite from a URL.Example:/uploadsprite name=Seraphina label=joy /user/images/Seraphina/Seraphina_2024-12-22@12h37m57s.png\n/upper (string) // Converts the provided string to uppercase.\n/var [key=varname]? [index=number]? [as=string]?=string (varname)? (string|number|bool|list|dictionary|closure)? // Get or set a variable. Use index to access elements of a JSON-serialized list or dictionary. To convert the value to a specific JSON type when using with index, use the as argument. Examples: /let x foo | /var x foo bar | /var x | /echo /let x foo | /var key=x foo bar | /var x | /echo /let x {} | /var index=cool as=number x 1337 | /echo {{var::x}}\n/vn // Swaps Visual Novel Mode On/Off\n/while [left=varname|string|number] [right=varname|string|number]? [rule=eq|neq|in|nin|gt|gte|lt|lte|not]?=eq [guard=on|off]?=off (closure|subcommand) // Compares the value of the left operand a with the value of the right operand b, and if the condition yields true, then execute any valid slash command enclosed in quotes. Numeric values and string literals for left and right operands supported. Available rules: eq => a == b (strings & numbers) neq => a !== b (strings & numbers) in => a includes b (strings & numbers as strings) nin => a not includes b (strings & numbers as strings) gt => a > b (numbers) gte => a >= b (numbers) lt => a < b (numbers) lte => a <= b (numbers) not => !a (truthy) Examples: /setvar key=i 0 | /while left=i right=10 rule=lte \"/addvar key=i 1\" adds 1 to the value of \"i\" until it reaches 10. /while left={{getvar::currentword}} {: /setvar key=currentword {: /do-something-and-return :}() | /echo The current work is \"{{getvar::currentword}}\" :} executes the defined subcommand as long as the \"currentword\" variable is truthy (has any content that is not false/empty) Loops are limited to 100 iterations by default, pass guard=off to disable.\n/wi-get-timed-effect [file=string] [effect=string] [format=bool|number]?=bool (string) // Get the current state of the timed effect for the record with the UID from the specified book. Example: /wi-get-timed-effect file=chatLore format=bool effect=sticky 123 - returns true or false if the effect is active or not /wi-get-timed-effect file=chatLore format=number effect=sticky 123 - returns the remaining duration of the effect, or 0 if inactive\n/wi-set-timed-effect [file=string] [uid=string] [effect=string] (on|off|toggle) // Set a timed effect for the record with the UID from the specified book. The duration must be set in the entry itself. Will only be applied for the current chat. Enabling an effect that was already active refreshes the duration. If the last chat message is swiped or deleted, the effect will be removed. Example: /wi-set-timed-effect file=chatLore uid=123 effect=sticky on\n/world [state=on|off|toggle]? [silent=true|false]? (string)? // Sets active World, or unsets if no args provided, use state=off and state=toggle to deactivate or toggle a World, use silent=true to suppress toast messages.",
                "constant": true,
                "selective": true,
                "insertion_order": 100,
                "enabled": false,
                "position": "after_char",
                "use_regex": true,
                "extensions": {
                    "position": 1,
                    "exclude_recursion": false,
                    "display_index": 6,
                    "probability": 100,
                    "useProbability": true,
                    "depth": 4,
                    "selectiveLogic": 0,
                    "group": "",
                    "group_override": false,
                    "group_weight": 100,
                    "prevent_recursion": false,
                    "delay_until_recursion": false,
                    "scan_depth": null,
                    "match_whole_words": null,
                    "use_group_scoring": false,
                    "case_sensitive": null,
                    "automation_id": "",
                    "role": 0,
                    "vectorized": false,
                    "sticky": 0,
                    "cooldown": 0,
                    "delay": 0
                }
            }
        ],
        "name": "html css builder"
    }
}