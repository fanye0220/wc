{
    "name": "水色小熊(๑¯㉨¯๑)",
    "blur_strength": 0,
    "main_text_color": "rgba(142, 154, 173, 1)",
    "italics_text_color": "rgba(0, 0, 0, 1)",
    "underline_text_color": "rgba(200, 204, 235, 1)",
    "quote_text_color": "rgba(157, 189, 250, 1)",
    "blur_tint_color": "rgba(255, 255, 255, 1)",
    "chat_tint_color": "rgba(255, 255, 255, 0)",
    "user_mes_blur_tint_color": "rgba(255, 255, 255, 0)",
    "bot_mes_blur_tint_color": "rgba(255, 255, 255, 0)",
    "shadow_color": "rgba(255, 255, 255, 0.9)",
    "shadow_width": 3,
    "border_color": "rgba(255, 255, 255, 0)",
    "font_scale": 0.96,
    "fast_ui_mode": true,
    "waifuMode": false,
    "avatar_style": 0,
    "chat_display": 1,
    "toastr_position": "toast-top-center",
    "noShadows": true,
    "chat_width": 60,
    "timer_enabled": true,
    "timestamps_enabled": true,
    "timestamp_model_icon": false,
    "mesIDDisplay_enabled": true,
    "hideChatAvatars_enabled": false,
    "message_token_count_enabled": true,
    "expand_message_actions": false,
    "enableZenSliders": false,
    "enableLabMode": false,
    "hotswap_enabled": true,
    "custom_css": "/*美化来源于dc@𝐒𝐨𝐥𝐞𝐢𝐥,严禁二传商用 */\n/*移除消息操作按钮（mes_buttons）的模糊阴影/辉光效果 */\n/* \n   这个效果通常是由 filter: drop-shadow() 或 text-shadow 产生的。\n   我们同时禁用这两者来确保彻底移除。\n*/\n.mes .mes_buttons .mes_button {\n    text-shadow: none !important; /* 移除文字阴影 */\n    box-shadow: none !important;  /* 移除盒子阴影 */\n    filter: none !important;      /* 移除所有滤镜效果，这对于辉光效果至关重要 */\n}\n\n\n/* 3. 再次确保全局所有图标都没有阴影（作为补充和覆盖） */\n.fa,\n.fa-solid,\n.fa-regular,\n.fa-brands,\n.fa-fw {\n    text-shadow: none !important;\n}\n\n/*\n * 此CSS代码用于将SillyTavern中的聊天头像移动到聊天文本的正上方。\n * 版本6：修正了用户头像无法正确靠右的问题，并确保布局完全符合要求。\n */\n\n/*\n * 解决方案：强制设置头像大小，并确保内部图片正确缩放。\n */\n.mes .avatar {\n    /*\n     * 您可以在这里修改数值来放大或缩小头像。\n     * !important 用于确保这条规则不会被其他样式覆盖。\n     */\n    width: 60px !important;\n    height: 60px !important;\n}\n\n.mes .avatar img {\n    /* 强制让头像图片完全填满它的容器 */\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n}\n/*\n * =========================================\n * 2. 通用头像与信息元素布局 (General Layout for Avatar & Metadata)\n * =========================================\n */\n\n/*\n * 将头像容器(.mesAvatarWrapper)设置为flex布局。\n * 这是实现所有间距和对齐控制的核心。\n */\n.mes .mesAvatarWrapper {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    padding: 0 !important;\n\n    /*\n     * --- 可自行调整的间距 ---\n     * 在这里修改下面的四个值来控制头像行与边缘的距离。\n     * “px”是像素单位，您可以增大或减小数字来调整。\n     */\n    margin-top: 30px;      /* 控制头像行顶部的间距 */\n    margin-bottom: 30px;   /* 控制头像行与下方聊天气泡的间距 */\n    margin-left: 0px;     /* 控制AI头像行与屏幕左边缘的间距 */\n    margin-right: -10px;    /* 控制User头像行与屏幕右边缘的间距 */\n}\n\n/*\n * 统一设置ID、计时器、Token计数器的样式。\n */\n.mes .mesIDDisplay,\n.mes .mes_timer,\n.mes .tokenCounterDisplay {\n    font-size: 0.8em;\n    color: rgba(127, 189, 250, 1);\n    display: inline-block;\n}\n\n/*\n * =========================================\n * 3. 用户消息的特殊布局 (Specific Layout for User Messages)\n * =========================================\n */\n\n/*\n * 【仅对用户消息生效】\n * 使用 order 属性重新排列元素，实现 [信息] [头像] 的顺序。\n * order值越小，元素越靠前。\n */\n.mes[is_user=\"true\"] .mesIDDisplay {\n    order: 1; /* 第一个显示 */\n}\n\n.mes[is_user=\"true\"] .tokenCounterDisplay {\n    order: 2; /* 第二个显示 */\n}\n\n.mes[is_user=\"true\"] .avatar {\n    order: 3; /* 第三位，显示在ID和Token之后 */\n}\n\n.mes[is_user=\"true\"] .mes_timer {\n    order: 4; /* 计时器保持在最后 */\n}\n\n\n/*\n * =========================================\n * 4. 整体消息布局 (Overall Message Layout)\n * =========================================\n */\n\n/*\n * 更改主消息容器(.mes)的flex方向为“column”，\n * 使“头像+信息”行 和 下方的“消息气泡”垂直堆叠。\n */\n.mes {\n    flex-direction: column;\n    align-items: flex-start !important; /* AI消息（对方）的整体内容块靠左 */\n}\n\n/*\n * 对于用户消息，将其整体内容块靠右。\n */\n.mes[is_user=\"true\"] {\n    align-items: flex-end !important;\n}\n\n.mes_block,\n.mes_text {\n    /*\n     * 同时移除消息气泡容器(.mes_block)和内部文本(.mes_text)的左右内边距，\n     * 彻底解决两侧的空白问题。\n     */\n    padding-inline: 0;\n}\n\n.mes_text {\n    /*\n     * 将文本设置为“两端对齐”，使其填满整个气泡宽度。\n     */\n    text-align: justify;\n}\n/* 为所有消息气泡设置统一的圆角、阴影和自定义内边距 */\n.mes_block {\n  border-radius: 15px !important;\n  box-shadow: 0px 4px 12px #D9E5F7 !important;\n  background-color: rgba(255, 255, 255, 0.7);\n  /* \n   * 使用四个值来精确控制内边距：padding: top right bottom left;\n   * 我们把第三个值（bottom）从 10px 增加到了 20px。\n   */\n  padding: 10px 15px 30px 15px !important; \n}\n/* 增加AI和用户消息之间的垂直间距 */\n.mes {\n  margin-bottom: 25px !important; /* 您可以按需调整这个数值，比如 15px 或 30px */\n}\n\n/* --- 最终完美版：您的平滑动画 + V4的完美布局 --- */\n/* 这是结合了所有成功经验的最终代码 */\n\n/* 步骤1：外层容器，负责宽度和居中 (来自V4布局) */\n#form_sheld {\n    position: relative !important;\n    width: 98% !important;\n    margin-left: auto !important;\n    margin-right: auto !important;\n}\n\n/* 步骤2：内层输入栏，负责外观和覆盖 (来自V4布局) */\n#send_form {\n    margin-top: -20px !important; /* 您调整过的有效值 */\n    background-color: black;\n    border-radius: 30px;\n    box-shadow: inset 0 0 0 2px #D9E5F7;\n    padding: 8px 15px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    box-sizing: border-box;\n}\n\n/* 底栏QR按键隐藏 */\n#send_form:hover \n#qr--bar {\n    height: 40px;\n    transition: all 0.5s ease;\n}\n\n#qr--bar {\n    height: 0.1px;\n}\n/* --- 顶部图标自定义 - 尺寸优化 & 默认暗淡版 --- */\n\n/* \n  1. 基础样式：为所有图标容器做准备。\n  - 保持优化的 24px 小尺寸和 6px 的外边距。\n  --- 核心改动在这里 ---\n  - 设置默认状态的透明度为 0.5，使其“暗淡”。\n*/\n#top-settings-holder .drawer-icon {\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center;\n    width: 25px;\n    height: 25px;\n    margin-top: 10px;\n    margin-bottom: 6px;\n    \n    opacity: 1; /* 默认状态：半透明，即“暗淡” */\n    transition: opacity 0.2s ease-in-out;\n}\n\n/* 2. 隐藏原有的Font Awesome图标字体 */\n#top-settings-holder .drawer-icon::before {\n    content: '' !important;\n    display: none;\n}\n\n/*\n  3. 核心改动：设置触发状态的样式。\n  - 当鼠标悬停或抽屉打开时，我们将图标的透明度设置为 1，使其“常亮”。\n*/\n#top-settings-holder .drawer-toggle:hover .drawer-icon,\n#top-settings-holder .drawer-icon.openIcon {\n    opacity: 0.6; /* 触发状态：完全不透明，即“常亮” */\n}\n\n\n/* --- 4. 为每个顶部按钮强制指定新的图标 (这部分保持不变) --- */\n#leftNavDrawerIcon {\n    background-image: url('https://files.catbox.moe/9isouu.png');\n}\n#API-status-top {\n    background-image: url('https://files.catbox.moe/iogfdw.png');\n}\n#advanced-formatting-button .drawer-icon {\n    background-image: url('https://files.catbox.moe/xinycd.png');\n}\n#WIDrawerIcon {\n    background-image: url('https://files.catbox.moe/iogfdw.png');\n}\n#user-settings-button .drawer-icon {\n    background-image: url('https://files.catbox.moe/q4boje.png');\n}\n#logo_block .drawer-icon {\n    background-image: url('https://files.catbox.moe/iogfdw.png');\n}\n#extensions-settings-button .drawer-icon {\n    background-image: url('https://files.catbox.moe/wtadaa.png');\n}\n#persona-management-button .drawer-icon {\n    background-image: url('https://files.catbox.moe/f32f5n.png');\n}\n#rightNavDrawerIcon {\n    background-image: url('https://files.catbox.moe/iogfdw.png');\n}\n#table_database_settings_drawer .drawer-icon {\n    background-image: url('https://files.catbox.moe/iogfdw.png') !important;\n}\n/* 1. 菜单按钮 (左侧三条杠) - 修正方案 */\n#options_button {\n    /* 强制将字体大小设为0，这是隐藏Font Awesome图标的关键 */\n    font-size: 0 !important; \n    \n    /* 应用背景图片 */\n    background-image: url('https://files.catbox.moe/td795o.png') !important;\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center;\n    \n    /* 确保元素有尺寸来显示背景图 */\n    width: 40px;\n    height: 40px;\n}\n\n/* 2. 发送按钮 (纸飞机) */\n#send_but {\n    font-size: 0 !important; /* 隐藏原始图标 */\n    background-image: url('https://files.catbox.moe/fk3017.png') !important;\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center;\n    width: 30px;\n    height: 30px;\n}\n\n/* 3. 停止生成按钮 (圆圈停止) */\n#mes_stop {\n    background-image: url('https://files.catbox.moe/cb6caw.png') !important;\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center;\n    width: 30px;\n    height: 30px;\n}\n\n#mes_stop i {\n    display: none !important; /* 隐藏内部的 <i> 标签图标 */\n}\n\n/* 4. 拓展菜单按钮 (extensionsMenuButton) */\n/* 注意：这个ID在默认的SillyTavern中不存在，可能由插件添加。*/\n#extensionsMenuButton {\n    font-size: 0 !important; /* 隐藏原始图标 */\n    background-image: url('https://files.catbox.moe/znfm07.png') !important;\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center;\n    width: 15px;\n    height: 15px;\n}\n/* 在 #top-bar 下方添加装饰性背景图，并使其横向平铺 */\n#top-bar::after {\n  /* 创建一个伪元素用于显示背景 */\n  content: \"\";\n\n  /* 将其定位在 #top-bar 正下方 */\n  position: absolute;\n  top: 100%; /* 从 #top-bar 的底部开始 */\n  left: 0;\n  width: 100%;\n  \n  /* 设置装饰区域的高度，您可以按需调整此值 */\n  height: 60px; \n\n  /* 设置您提供的背景图 */\n  background-image: url('https://files.catbox.moe/7bbfn6.png');\n  \n  /* === 以下是关键改动 === */\n  \n  /* 1. 让图片在水平方向上重复平铺 */\n  background-repeat: repeat-x;\n  \n  /* 2. 设置图片的高度为100%（即80px），宽度自动缩放以保持比例，解决模糊问题 */\n  background-size: auto 40%;\n  \n  /* 3. 让平铺从左上角开始，效果更整齐 */\n  background-position: top left;\n  \n  /* 确保这个图层不会阻挡下方内容的鼠标点击等交互 */\n  pointer-events: none;\n}\n/* --- 最终修正版 --- */\n/* 在 #top-settings-holder 元素之前创建一个伪元素来显示装饰图 */\n#top-settings-holder::before {\n  /* 伪元素必需的属性 */\n  content: \"\";\n\n  /* --- 定位：使用 fixed 让它相对于浏览器窗口定位 --- */\n  position: fixed;\n  top: 33px;  /* 这是顶部栏的标准高度，让图片正好出现在它下方 */\n  right: 0;   /* 紧贴屏幕右侧 */\n\n  /* --- 尺寸：根据您的图片比例，设定一个合适的尺寸 --- */\n  width: 250px; /* 您可以按需微调 */\n  height: 60px; /* 您可以按需微调 */\n\n  /* --- 背景图设置 --- */\n  background-image: url('https://files.catbox.moe/2ds1pw.png');\n  background-repeat: no-repeat; /* 禁止平铺 */\n  \n  /* 让图片完整地显示在设定的尺寸内，不裁剪也不拉伸变形 */\n  background-size: contain; \n  background-position: top right; /* 确保图片在容器内也靠右上角 */\n\n  /* 确保这个装饰图层不会影响下方内容的点击等交互 */\n  pointer-events: none;\n\n  /* 设置一个较高的层级，防止被其他UI元素遮挡 */\n  z-index: 99;\n}\n\n/* 取消 top-bar 底部的阴影 */\n#top-bar {\n  box-shadow: none !important;\n}\n/*\n  SillyTavern 自定义样式：\n  为顶部栏 #top-bar 添加自适应背景图。\n*/\n\n#top-bar {\n    /* 1. 设置背景图片 */\n    background-image: url('https://files.catbox.moe/cijeyp.png') !important;\n\n    /* 2. 实现自适应效果 */\n    background-size: cover !important; /* 关键：缩放图片以完全覆盖容器，保持宽高比 */\n    background-position: center center !important; /* 将图片居中显示，裁剪时从中心向外裁剪 */\n    background-repeat: no-repeat !important; /* 防止图片平铺重复 */\n    \n    /* 3. （可选）如果背景图较暗，可以移除原有的底部阴影，让界面更融合 */\n    box-shadow: none !important; \n}\n#send_textarea {\n    /* 1. 设置背景图片 */\n    background-image: url('https://files.catbox.moe/cijeyp.png') !important;\n    background-size: cover !important; /* 覆盖整个区域 */\n    background-position: center center !important; /* 图片居中 */\n    background-repeat: no-repeat !important; /* 不重复 */\n    background-attachment: fixed !important; /* 关键：固定背景，使其不随文字滚动 */\n\n    /* 2. 提升文字可读性 */\n\n    \n    /* 确保文字颜色足够亮，与深色遮罩形成对比 */\n    color: #CBD6E6 !important; \n\n    /* 3. （可选）美化边框和占位符文字 */\n    border: 1px solid rgba(255, 255, 255, 0.3) !important; /* 添加一个淡淡的亮色边框 */\n}\n\n/* 调整占位符文字（\"Type a message...\"）的颜色，使其更清晰 */\n#send_textarea::placeholder {\n    color: rgba(255, 255, 255, 0.7) !important;\n    opacity: 1; /* 确保在所有浏览器中占位符都可见 */\n}\n/*\n  SillyTavern 自定义样式：\n  全局隐藏浏览器滚动条。\n*/\n\n/* --- 方案一：适用于 WebKit 内核的浏览器 (Chrome, Safari, Edge, Opera) --- */\n/* \n  我们将滚动条的宽度和高度都设置为0，从而让它彻底消失。\n*/\nbody::-webkit-scrollbar {\n    width: 0px;\n    height: 0px;\n    display: none; /* 再次确认隐藏 */\n}\n\n\n/* --- 方案二：适用于 Firefox 浏览器 --- */\n/*\n  这是Firefox的标准方法，直接将滚动条宽度设置为 none。\n*/\nhtml {\n    scrollbar-width: none;\n}\n\n\n/*\n  额外处理：确保SillyTavern内部的一些可滚动区域（如聊天记录、角色列表）的滚动条也被隐藏。\n  我们通过一个通用选择器来覆盖它们。\n*/\n*::-webkit-scrollbar {\n    width: 0px;\n    height: 0px;\n    display: none;\n}\n\n* {\n    -ms-overflow-style: none; /* 适用于 IE 和 Edge (旧版) */\n    scrollbar-width: none;  /* 适用于 Firefox */\n}\n/*\n  SillyTavern 自定义样式：\n  为所有 input, select, textarea, button 添加统一的背景图。\n*/\n/*\n  SillyTavern 自定义样式：\n  为所有 input 和 textarea 元素设置背景图和文字颜色。\n*/\n\n/* \n  使用一个通用选择器来覆盖所有文本输入框和多行文本区域。\n  我们排除了 type=\"checkbox\", \"radio\", \"range\", \"file\", \"submit\", \"hidden\", \"button\"\n  以避免影响这些非文本输入控件。\n*/\ninput[type=\"text\"],\ninput[type=\"number\"],\ninput[type=\"search\"],\ninput[type=\"password\"],\ntextarea {\n    /* 1. 设置背景图片 */\n    background-image: url('https://files.catbox.moe/cijeyp.png') !important;\n    background-size: cover !important;\n    background-position: center center !important;\n    background-repeat: no-repeat !important;\n    background-attachment: local !important; /* 使用 local 让背景随内容滚动，这在多行文本框中效果更自然 */\n\n    /* 2. 强制设置文字颜色 */\n    color: #8E9AAD !important;\n    \n    /* 3. （可选）为了让背景图更清晰，可以移除默认的边框和内阴影 */\n    border: 1px solid rgba(157, 189, 250, 0.5) !important; /* 使用文字颜色作为淡淡的边框 */\n    box-shadow: none !important;\n}\n/* \n  单独处理占位符文字（\"Search...\", \"Type a message...\" 等），\n  也将其颜色设置为您指定的颜色，但带一点透明度以作区分。\n*/\ninput[type=\"text\"]::placeholder,\ninput[type=\"number\"]::placeholder,\ninput[type=\"search\"]::placeholder,\ninput[type=\"password\"]::placeholder,\ntextarea::placeholder {\n    color: #8E9AAD !important;\n    opacity: 0.7; /* 稍微降低不透明度 */\n}\n/* \n  特别为 select (下拉菜单) 也应用相似的样式，使其风格统一。\n*/\nselect {\n    background-image: url('https://files.catbox.moe/cijeyp.png') !important;\n    background-size: cover !important;\n    background-position: center center !important;\n    background-repeat: no-repeat !important;\n    color: #8E9AAD !important;\n    border: 1px solid rgba(157, 189, 250, 0.5) !important;\n    box-shadow: none !important;\n}\n\n/* 确保下拉菜单的选项也有正确的颜色 */\nselect option {\n    background-color: #8E9AAD; /* 给选项一个深色背景以保证可读性 */\n    color: #8E9AAD;\n}\n/*\n  使用通用选择器 h4 来定位所有四级标题。\n*/\nh4 {\n    /* 1. 设置背景图片 */\n    background-image: url('') !important;\n    background-size: cover !important; /* 覆盖整个标题区域 */\n    background-position: center center !important; /* 图片居中显示 */\n    background-repeat: no-repeat !important; /* 不重复 */\n\n\n    /* 2. (可选但推荐) 为了让背景图完整显示，增加一些内边距 */\n    padding: 5px 10px !important; /* 上下5px，左右10px的内边距 */\n    \n    /* 3. (可选但推荐) 添加圆角，让标题块更好看 */\n    border-radius: 6px !important;\n    \n    /* 4. (可选) 如果原有的 h4 标题有边框或背景色，移除它们 */\n    border: none !important;\n    background-color: transparent !important;\n}\n\n/* \n  额外处理：确保 h4 内部的文字或链接（<a>, <span>）不会因为继承了背景而出现问题。\n  我们将它们的背景设置为透明。\n*/\nh4 span,\nh4 a,\nh4 small {\n    background: none !important;\n    background-color: transparent !important;\n}\n/* \n  我们使用属性选择器 [data-i18n=\"openaipresets\"] 来精确定位这个标题。\n  这个标题在HTML中是一个 <span> 元素。\n*/\n[data-i18n=\"openaipresets\"] {\n    /* 1. 设置背景图片 */\n    background-image: url('https://files.catbox.moe/cijeyp.png') !important;\n    background-size: cover !important;\n    background-position: center center !important;\n    background-repeat: no-repeat !important;\n\n    /* 2. 强制设置文字颜色 */\n    color: #6FC5F5 !important;\n\n    /* 3. 应用与 h4 相同的视觉样式，确保一致性 */\n    display: inline-block; /* 必须设置为块级或内联块级元素才能应用padding和圆角 */\n    padding: 5px 10px !important;\n    border-radius: 6px;\n    \n    /* (可选) 如果需要，可以添加文字阴影以提高对比度 */\n    /* text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5); */\n}\n\n/* \n  由于这个标题的父级容器可能有一些默认样式，\n  我们最好也重置一下，确保背景能正确显示。\n*/\n#openai_api-presets .standoutHeader {\n    background: none !important; /* 移除父容器的背景 */\n    padding: 0 !important;       /* 移除父容器的内边距 */\n    border: none !important;     /* 移除父容器的边框 */\n}\n/*\n  SillyTavern 自定义样式：\n  移除“AI响应配置”面板内的所有阴影和模糊效果。\n*/\n\n/* \n  使用父级容器 #left-nav-panel 来限定作用范围，\n  确保这些样式只影响“AI响应配置”面板内的元素。\n*/\n\n/* 1. 全局性移除面板内所有元素的文字阴影和滤镜效果 */\n#left-nav-panel * {\n    text-shadow: none !important; /* 移除所有文字阴影 */\n    box-shadow: none !important;  /* 移除所有元素的盒子阴影 */\n    filter: none !important;      /* 移除所有滤镜，包括辉光和模糊 */\n}\n/* 2. 移除面板背景的模糊效果（如果存在） */\n#left-nav-panel {\n    -webkit-backdrop-filter: none !important; /* 移除 Webkit 内核浏览器的模糊效果 */\n    backdrop-filter: none !important;         /* 移除标准模糊效果 */\n}\n\n/* 3. 确保面板内的 Font Awesome 图标也没有阴影 */\n/* \n   虽然上面的通配符选择器(*)已经处理了大部分，\n   但再次明确指定可以增加样式的优先级，确保覆盖。\n*/\n#left-nav-panel .fa,\n#left-nav-panel .fa-solid,\n#left-nav-panel .fa-regular,\n#left-nav-panel .fa-brands,\n#left-nav-panel .fa-fw {\n    text-shadow: none !important;\n}\n\n/* 4. 移除 neo-range-slider (范围滑块) 的阴影 */\n#left-nav-panel .neo-range-slider {\n    /* 浏览器通常会为滑块的“轨道”和“拇指”应用特殊的阴影，需要单独处理 */\n    box-shadow: none !important;\n}\n\n/* 针对 WebKit 浏览器的滑块拇指 */\n#left-nav-panel .neo-range-slider::-webkit-slider-thumb {\n    box-shadow: none !important;\n}\n\n/* 针对 Firefox 浏览器的滑块拇指 */\n#left-nav-panel .neo-range-slider::-moz-range-thumb {\n    box-shadow: none !important;\n}\n/*\n  SillyTavern 自定义样式 (最终滤镜修正版)\n  目标：修正滑块颜色发灰、图片颜色失真的问题。\n*/\n\n/* --- 步骤 1: 强制重置所有目标滑块的基础样式 --- */\n.neo-range-slider,\ninput[type=\"range\"] {\n    -webkit-appearance: none !important;\n    -moz-appearance: none !important;\n    appearance: none !important;\n    width: 100% !important;\n    background: transparent !important;\n    cursor: pointer !important;\n    padding: 0 !important;\n    \n    /* 核心修正：重置滤镜！ */\n    /* 这会使滑块不受父容器可能存在的饱和度、亮度等滤镜影响。 */\n    filter: none !important; \n}\n\n/* --- 步骤 2: 强制设置滑块轨道 (Track) 样式 --- */\n/* 我们同样需要在轨道上重置滤镜，以防万一 */\n\n/* WebKit (Chrome, Safari, Edge) */\n.neo-range-slider::-webkit-slider-runnable-track,\ninput[type=\"range\"]::-webkit-slider-runnable-track {\n    height: 8px !important;\n    background: #D9E5F7 !important;\n    border-radius: 4px !important;\n    border: none !important;\n    filter: none !important; /* 轨道也重置滤镜 */\n}\n\n/* Firefox */\n.neo-range-slider::-moz-range-track,\ninput[type=\"range\"]::-moz-range-track {\n    height: 8px !important;\n    background: #C3E6FA !important;\n    border-radius: 4px !important;\n    border: none !important;\n    filter: none !important; /* 轨道也重置滤镜 */\n}\n\n\n/* --- 步骤 3: 强制设置滑块拖动按钮 (Thumb) 样式 --- */\n/* 在拖动按钮上也重置滤镜，确保图片颜色正确 */\n\n/* WebKit (Chrome, Safari, Edge) */\n.neo-range-slider::-webkit-slider-thumb,\ninput[type=\"range\"]::-webkit-slider-thumb {\n    -webkit-appearance: none !important;\n    height: 24px !important;\n    width: 24px !important;\n    border-radius: 50% !important;\n    background-color: transparent !important;\n    background-image: url('https://files.catbox.moe/cdvrc9.png') !important;\n    background-size: contain !important;\n    background-repeat: no-repeat !important;\n    background-position: center !important;\n    border: none !important;\n    box-shadow: none !important;\n    margin-top: -8px !important;\n    filter: none !important; /* 按钮也重置滤镜 */\n}\n\n/* Firefox */\n.neo-range-slider::-moz-range-thumb,\ninput[type=\"range\"]::-moz-range-thumb {\n    height: 24px !important;\n    width: 24px !important;\n    border-radius: 50% !important;\n    background-color: transparent !important;\n    background-image: url('https://files.catbox.moe/cdvrc9.png') !important;\n    background-size: contain !important;\n    background-repeat: no-repeat !important;\n    background-position: center !important;\n    border: none !important;\n    box-shadow: none !important;\n    filter: none !important; /* 按钮也重置滤镜 */\n}\n/*\n  SillyTavern 自定义样式：\n  尝试将 select 下拉菜单中 option 的背景设置为透明。\n*/\n\n/* \n  主要规则：定位所有 <option> 元素，并将其背景设为透明。\n  这在支持自定义的浏览器（如部分版本的Chrome/Firefox on Desktop）上可能生效。\n*/\nselect option {\n    background-color: transparent !important;\n    background: transparent !important; /* 再次确认 */\n    \n    /* 确保文字颜色仍然是您之前设置的粉色，以保证在透明背景下可见 */\n    color: #8E9AAD !important; \n}\n/* \n  额外处理：针对 WebKit 浏览器 (Chrome/Edge/Safari) 的下拉菜单容器。\n  有时候需要同时将下拉菜单的容器背景也设为透明。\n*/\nselect:focus,\nselect {\n    /* \n      我们可以尝试将 select 元素本身的背景也设为透明，\n      这有时会影响到它的下拉列表外观。\n    */\n    background-color: transparent !important;\n}\n\n/* \n  如果上面的代码在您的浏览器上无效，可以尝试下面这个更激进的、\n  针对 WebKit 内核的非标准伪元素。但它的支持度并不广泛。\n*/\n/*\nselect::-webkit-scrollbar-track-piece {\n    background-color: transparent !important;\n}\nselect::-webkit-inner-spin-button,\nselect::-webkit-calendar-picker-indicator {\n    display: none;\n}\n/*\n  SillyTavern 自定义样式 (修正版)：\n  移除单个标签元素 (.tag) 的背景色。\n*/\n\n/* \n  核心规则：直接定位到 class 为 .tag 的单个标签元素。\n  在 SillyTavern 中，这才是真正带有背景色的元素。\n*/\n.tag {\n    background: none !important;              /* 移除所有背景属性 */\n    background-color: transparent !important; /* 强制背景色为透明 */\n    \n    /* \n      (可选但推荐)\n      由于背景被移除了，标签可能需要一个边框来保持其形状和可识别性。\n      我们使用您之前定义的粉色作为边框颜色。\n    */\n    border: 1px solid rgba(157, 189, 250, 0.6) !important;\n    \n    /* 确保标签内的文字颜色也是您期望的粉色 */\n    color: #8E9AAD !important;\n}\n\n/* \n  如果标签内还有其他子元素（比如用于删除的x图标），\n  确保它们的颜色也正确。\n*/\n.tag .tag_name,\n.tag .tag_remove {\n    color: #/*\n  SillyTavern 自定义样式 (修正版)：\n  移除单个标签元素 (.tag) 的背景色。\n*/\n\n/* \n  核心规则：直接定位到 class 为 .tag 的单个标签元素。\n  在 SillyTavern 中，这才是真正带有背景色的元素。\n*/\n.tag {\n    background: none !important;              /* 移除所有背景属性 */\n    background-color: transparent !important; /* 强制背景色为透明 */\n    \n    /* \n      (可选但推荐)\n      由于背景被移除了，标签可能需要一个边框来保持其形状和可识别性。\n      我们使用您之前定义的粉色作为边框颜色。\n    */\n    border: 1px solid rgba(157, 189, 250, 1) !important;\n    \n    /* 确保标签内的文字颜色也是您期望的粉色 */\n    color: #8E9AAD !important;\n}\n\n/* \n  如果标签内还有其他子元素（比如用于删除的x图标），\n  确保它们的颜色也正确。\n*/\n.tag .tag_name,\n.tag .tag_remove {\n    color: #8E9AAD !important;\n}\n\n/* \n  当鼠标悬停在标签上时，为了提供反馈，\n  我们可以让边框颜色变亮一些。\n*/\n.tag:hover {\n    border-color: rgba(157, 189, 250, 1) !important;\n} !important;\n}\n\n/* \n  当鼠标悬停在标签上时，为了提供反馈，\n  我们可以让边框颜色变亮一些。\n*/\n.tag:hover {\n    border-color: rgba(157, 189, 250, 1) !important;\n}\n/*\n  SillyTavern 自定义样式：\n  移除“AI回复格式化”面板中“Activation Regex”输入框的背景。\n*/\n\n/*\n  使用 ID 选择器 #instruct_activation_regex 来精确定位目标元素。\n  ID 选择器具有很高的优先级，可以轻松覆盖通用的类样式。\n*/\n#instruct_activation_regex {\n    background: none !important;              /* 移除所有背景属性 */\n    background-color: transparent !important; /* 强制背景色为透明 */\n    box-shadow: none !important;              /* 移除可能存在的内阴影 */\n}\n/*\n  SillyTavern 自定义样式：\n  移除一系列特定按钮、下拉菜单和标题的背景。\n*/\n\n/* \n  1. 移除一组特定按钮的背景。\n     我们使用组合类名选择器来确保精确性。\n*/\n.menu_button.fa-solid.fa-save,\n.menu_button.fa-pencil.fa-solid,\n.menu_button.fa-solid.fa-file-circle-plus,\n.menu_button.fa-solid.fa-recycle,\n.menu_button.fa-solid.fa-trash-can {\n    background: none !important;\n    background-color: transparent !important;\n    border: none !important;\n    box-shadow: none !important;\n}\n\n/* \n  2. 移除 \"Include Names\" 下拉菜单的背景。\n     这个下拉菜单的 ID 是 #instruct_names_behavior。\n*/\n#instruct_names_behavior {\n    background: none !important;\n    background-color: transparent !important;\n    border: 1px solid rgba(243, 134, 206, 0.4) !important; /* 保留一个淡淡的边框以示边界 */\n    box-shadow: none !important;\n}\n\n/* \n  3. 移除带有 .standoutHeader 和 .title_restorable 类的标题背景。\n     这两个类通常用于面板中的分组标题。\n*/\n.standoutHeader.title_restorable {\n    background: none !important;\n    background-color: transparent !important;\n    border: none !important;\n    box-shadow: none !important;\n    padding: 0 !important; /* 移除内边距，避免留下空白区域 */\n    margin-top: 5px !important; /* 增加一点上边距，保持布局清晰 */\n}\n\n/* \n  额外覆盖：确保 .standoutHeader 单独存在时也没有背景。\n*/\n.standoutHeader {\n    background: none !important;\n    background-color: transparent !important;\n    border: none !important;\n    box-shadow: none !important;\n    padding: 2px 0 !important; /* 稍微保留一点垂直内边距 */\n}\n/*\n  SillyTavern 自定义样式：\n  移除 Select2 多选框的背景色。\n*/\n\n/* \n  1. 定位到 Select2 多选框的主容器，并移除其背景。\n*/\n.select2-selection--multiple {\n    background: none !important;\n    background-color: transparent !important;\n    \n    /* \n      (可选但推荐) \n      由于背景没了，我们需要一个边框来界定它的范围。\n      我们使用您主题中的粉色作为边框。\n    */\n    border: 1px solid rgba(243, 134, 206, 0.4) !important;\n}\n\n\n/* \n  2. 定位到多选框内部已经选中的项目（那些小标签/pills），\n     并同样移除它们的背景色。\n*/\n.select2-selection--multiple .select2-selection__choice {\n    background-color: transparent !important;\n    background: none !important;\n    \n    /* \n      为选中的项目也添加一个边框，使其看起来像一个独立的标签。\n    */\n    border: 1px solid rgba(111, 197, 245, 0.6) !important; /* 使用蓝色边框以作区分 */\n    \n    /* 确保标签内的文字颜色正确 */\n    color: #F386CE !important;\n}\n\n\n/* \n  3. 定位到选中项目后面的 \"x\"（移除）按钮，\n     并确保它的颜色正确。\n*/\n.select2-selection--multiple .select2-selection__choice__remove {\n    color: #F386CE !important;\n    opacity: 0.7;\n}\n\n.select2-selection--multiple .select2-selection__choice__remove:hover {\n    color: #6FC5F5 !important; /* 鼠标悬停时变为蓝色以提供反馈 */\n    opacity: 1;\n}\n/*\n  SillyTavern 自定义样式 (全局)：\n  移除所有标题类元素的背景，并统一其外观。\n*/\n\n/* \n  1. 使用一个组合选择器，定位所有标准的标题标签和SillyTavern中常用的标题类。\n*/\nh1, h2, h3, h4, h5, h6,\n.standoutHeader,\n.title_restorable,\n.range-block-title,\n.inline-drawer-toggle, /* 这个类通常用于可折叠区域的标题栏 */\n.popup-header,\n.dragTitle {\n    background: none !important;              /* 移除所有背景属性（颜色、图片、渐变） */\n    background-color: transparent !important; /* 再次确认背景色为透明 */\n    border: none !important;                  /* 移除所有边框 */\n    box-shadow: none !important;              /* 移除所有阴影 */\n    padding-left: 0 !important;               /* (可选) 移除左内边距，使其左对齐 */\n    padding-right: 0 !important;              /* (可选) 移除右内边距 */\n}\n/* \n  2. 为了在移除背景后保持视觉上的分隔，我们可以为标题添加一个下边框。\n     这是一个推荐的优化，可以让UI更清晰。\n*/\nh1, h2, h3, h4, h5, h6,\n.standoutHeader,\n.title_restorable,\n.range-block-title,\n.inline-drawer-toggle {\n    border-bottom: 1px solid rgba(111, 197, 245, 0.3) !important; /* 使用蓝色系的半透明边框 */\n    padding-bottom: 5px !important;  /* 在下边框和文字之间增加一点空间 */\n    margin-bottom: 10px !important; /* 在标题和其他内容之间增加一点垂直距离 */\n}\n\n/* \n  3. 对于一些紧凑的标题，我们可能不需要下边框和那么大的间距，\n     可以单独进行微调。\n*/\n.range-block-title {\n    margin-bottom: 5px !important;\n    padding-bottom: 3px !important;\n}\n/*\n  SillyTavern 自定义样式：\n  修改所有 .text_pole 元素的背景和文字颜色。\n*/\n\n.text_pole {\n    /* 1. 移除背景颜色，使其变为透明 */\n    background-color: transparent !important;\n    background: none !important; /* 再次确认，覆盖可能存在的 background 简写属性 */\n\n    /* 2. 强制设置文字颜色 */\n    color: #6FC5F5 !important;\n\n    /* 3. (可选但推荐) 为了在透明背景下依然能看清输入框的轮廓，\n       我们可以给它一个与文字颜色匹配的淡淡的边框。\n    */\n    border: 1px solid rgba(111, 197, 245, 0.3) !important; /* 使用 #F386CE 的半透明色作为边框 */\n}\n\n/* \n  额外处理：确保下拉菜单（select）的选项在展开时有合适的背景，\n  否则在透明背景下可能看不到选项文字。\n*/\n.text_pole option {\n    background-color: #242425; /* 给选项一个深色背景以保证可读性 */\n    color: #D9E5F7;\n}\n/*\n  SillyTavern 自定义样式 (复选框终极版)\n  目标：强制将所有复选框的“选中”状态替换为自定义图片。\n*/\n\n/* 1. 基础重置：隐藏原始复选框，并创建一个容器 */\ninput[type=\"checkbox\"] {\n    /* 彻底隐藏原始的勾选框 */\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    \n    /* 移除所有背景和边框 */\n    background: transparent !important;\n    border: none !important;\n    \n    /* 设置尺寸并作为定位参考 */\n    width: 20px;\n    height: 20px;\n    position: relative;\n    vertical-align: middle;\n    cursor: pointer;\n    \n    /* 添加一个基础的“未选中”框样式，直接应用在元素上 */\n    border: 1px solid #6FC5F5 !important; /* 蓝色边框作为未选中状态 */\n    border-radius: 4px;\n    transition: border-color 0.2s;\n}\n\n/* 2. 鼠标悬停时，改变未选中框的颜色 */\ninput[type=\"checkbox\"]:not(:checked):hover {\n    border-color: #D9E5F7 !important; /* 悬停时边框变粉色 */\n}\n\n/* 3. 核心：当复选框被选中时 (:checked) 的样式 */\ninput[type=\"checkbox\"]:checked {\n    /* 当被选中时，我们可以让边框也变成粉色，与图标协调 */\n    border-color: rgba(111, 197, 245, 0.7) !important;\n}\n\n/* \n   4. 使用 ::after 伪元素来显示“选中”状态的图标。\n      这个伪元素将作为一个图层覆盖在上面。\n*/\ninput[type=\"checkbox\"]:checked::after {\n    content: ''; /* 必须 */\n    position: absolute;\n    top: -2px;  /* 微调位置，使其完全覆盖边框 */\n    left: -2px;\n    right: -2px;\n    bottom: -2px;\n\n    /* 关键：将您的图片作为伪元素的内容背景 */\n    background-image: url('https://files.catbox.moe/5owqaw.png') !important;\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center;\n    \n    /* 添加平滑的出现效果 */\n    transform: scale(1);\n    opacity: 1;\n    transition: transform 0.2s, opacity 0.2s;\n}\n\n/*\n   5. 默认情况下，隐藏这个“选中”图标。\n*/\ninput[type=\"checkbox\"]::after {\n    content: '';\n    position: absolute;\n    top: 0; left: 0; right: 0; bottom: 0;\n    transform: scale(0); /* 默认缩放到0，即不可见 */\n    opacity: 0;\n}\n/* \n  使用通用选择器，覆盖所有类型的 toast 通知 \n*/\n#toast-container > .toast {\n    /* 使用您截图中的新背景图片 */\n    background-image: url('https://files.catbox.moe/kbxxg0.jpg') !important;\n\n    /* 设置一个浅色的备用背景，以防图片加载失败 */\n    background-color: rgba(240, 240, 245, 0.9) !important;\n    \n    /* 确保图片填满整个弹窗，不变形 */\n    background-size: cover !important;\n    background-position: center !important;\n    background-repeat: no-repeat !important;\n\n    /* 为弹窗添加圆角 */\n    border-radius: 12px;\n\n    /* \n      --- 修复黑边的关键代码 ---\n      为弹窗的上下左右设置统一的内边距。\n      这可以避免渲染缝隙，并让文字居中更美观。\n    */\n    padding: 12px 20px !important;\n\n    /* \n      因为背景是浅色的，所以需要深色的文字才能看清。\n      这里使用了深灰色文字并配上一点柔和的白色阴影。\n    */\n    color: #4B455A !important; /* 深紫色/灰色文字 */\n    text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.6); /* 柔和的白色阴影 */\n    \n    /* (可选) 增加一点阴影和边框，让弹窗更有立体感 */\n    box-shadow: 0 4px 12px rgba(111, 197, 245, 0.15);\n    border: 1px solid rgba(111, 197, 245, 0.1);\n}\n/* 隐藏默认图标 */\n#toast-container > .toast:before {\n    display: none !important;\n}\n/* --- 最终版：彻底移除消息编辑图标的发光效果 --- */\n\n/*  */\n.mes_buttons .mes_button, \n.mes_edit_buttons .menu_button {\n    text-shadow: none !important; /* 彻底移除图标字体的阴影/发光效果 */\n    box-shadow: none !important;  /* 同时移除任何可能的容器阴影 */\n    background: none !important;  /* 移除背景 */\n    border: none !important;      /* 移除边框 */\n    backdrop-filter: none !important; /* 移除背景模糊 */\n}\n\n/*\n  为确保万无一失，再次清理编辑栏容器本身。\n*/\n.mes_edit_buttons {\n    background: none !important;\n    border: none !important;\n    box-shadow: none !important;\n    backdrop-filter: none !important;\n}\n/* --- 统一顶部栏抽屉内 <code> 标签的背景色 --- */\n\n/*\n  这个选择器会选中所有位于顶部设置栏容器(#top-settings-holder)\n  内部的 <code> 标签，并修改它们的样式。\n*/\n#top-settings-holder code {\n    /* 将背景色设置为您指定的蓝色 */\n    background-color: rgba(157, 189, 250, 0.3) !important;\n    \n    /* (推荐) 为了让深色文字在蓝色背景上更清晰，将文字颜色设为白色 */\n    color: #FFFFFF !important;\n    \n    /* (可选) 增加一点内边距和圆角，让它看起来更像一个标签 */\n    padding: 2px 5px;\n    border-radius: 4px;\n}\n/* 为 SillyTavern 的主聊天输入框添加粉色边框 */\n#send_textarea {\n  border: 2px solid #D9E5F7 !important;\n  border-radius: 10px; /* 可选：添加圆角使外观更柔和 */\n}\n\n/* 当输入框被选中（获得焦点）时，添加匹配的光晕效果 */\n#send_textarea:focus {\n  border-color: #D9E5F7 !important;\n  box-shadow: 0 0 8px rgba(157, 189, 250, 0.7); /* 粉色光晕 */\n  outline: none; /* 移除浏览器默认的蓝色或橙色轮廓 */\n}\n/* 为输入框和其容器添加 #FAB1DF 颜色的虚线边框 */\n\n\n\n#send_textarea {\n  border: 2px dashed #D9E5F7 !important;\n  min-height: 40px; /* 增加输入框的最小高度 */\n}\n\n/* \n  --- 步骤 2: 覆盖标题和特定文本为蓝色 ---\n  我们为所有标题标签 (h1-h6) 和一些常见的标题类设置更优先的蓝色。\n*/\n\n/* 所有标题标签 (h1, h2, h3, h4, h5, h6) */\nh1:not(#chat h1),\nh2:not(#chat h2),\nh3:not(#chat h3),\nh4:not(#chat h4),\nh5:not(#chat h5),\nh6:not(#chat h6) {\n    color: #C8CCEB !important;\n}\n\n/* 一些在SillyTavern中常见的、用作标题的特殊类或元素 */\n.standoutHeader,\n.standoutHeader *,\n.title_restorable,\n.title_restorable *,\n.range-block-title,\n.range-block-title * {\n    color: #C8CCEB !important;\n}\n\n/* 特别为您之前提到的“对话补全预设”标题再次确认颜色 */\n[data-i18n=\"openaipresets\"] {\n    color: #C8CCEB !important;\n}\n/* \n  --- 步骤 3: 维持其他UI元素的一致性 ---\n  这部分代码来自您之前的版本，确保输入框等元素颜色正确。\n  它们的颜色将遵循步骤1中设置的基础粉色。\n*/\n\n/* 输入框、文本区域和下拉菜单的文字颜色 (基础粉色) */\ninput,\ntextarea,\nselect,\n}\n\n/* 占位符文字的颜色 (基础粉色，带透明度) */\n::placeholder {\n    color: #C8CCEB !important;\n    opacity: 0.7 !important;\n}\n\n/* 下拉菜单选项的颜色 (基础粉色，配深色背景) */\nselect option {\n    background-color: #242425;\n    color: #C8CCEB !important;\n}\n\n/* \n  --- 步骤 3: 维持其他UI元素的一致性 ---\n  这部分代码来自您之前的版本，确保输入框等元素颜色正确。\n  它们的颜色将遵循步骤1中设置的基础粉色。\n*/\n\n/* 输入框、文本区域和下拉菜单的文字颜色 (基础粉色) */\ninput,\ntextarea,\nselect,\n}\n\n/* 占位符文字的颜色 (基础粉色，带透明度) */\n::placeholder {\n    color: #C8CCEB !important;\n    opacity: 0.7 !important;\n}\n\n/* 下拉菜单选项的颜色 (基础粉色，配深色背景) */\nselect option {\n    background-color: #242425;\n    color: #C8CCEB !important;\n}\n\n/* 链接和按钮的文字颜色 (基础粉色) */\na:not(#chat a),\n\n.menu_button_icon:not(#chat .menu_button_icon) {\n    color: #C8CCEB !important;\n}\n/* --- 角色管理：为选中的 Persona 添加高亮边框 --- */\n/*\n  这个样式会定位到“角色管理”面板中，当前被选中的那个 persona 的容器\n  (.avatar-container.selected)，并为其添加一个醒目的边框和光晕效果，\n  使其在列表中脱颖而出，提高可视性。\n*/\n#persona-management-block .avatar-container.selected {\n  /* \n    使用您主题中的蓝色 (#6FC5F5) 创建一个 2px 粗的实线边框。\n    !important 是为了确保它能覆盖任何可能存在的默认边框样式。\n  */\n  border: 2px solid #C8CCEB !important;\n\n  /* (可选但推荐) 添加一个匹配的蓝色光晕效果，让高亮更明显 */\n  box-shadow: 0 0 8px rgba(111, 197, 245, 0.7);\n\n  /* (可选但推荐) 为容器添加圆角，使其与UI其他部分的圆角风格保持一致 */\n  border-radius: 10px;\n}\n#completion_prompt_manager .completion_prompt_manager_header {\ncolor: #C8CCEB;\n}\n/*\n  SillyTavern 自定义样式：\n  【最终且最强的尝试】彻底移除消息编辑按钮的所有阴影和模糊效果。\n*/\n\n/* 针对所有消息编辑按钮的 Font Awesome 图标本身 */\n/* \n  这里我们使用 `*` 通配符作用于按钮内部，\n  因为 Font Awesome 图标通常是通过伪元素或 `<i>` 标签实现的。\n  确保覆盖它们可能继承或自身拥有的滤镜和阴影。\n*/\n.mes_edit_done *,\n.mes_edit_copy *,\n.mes_edit_add_reasoning *,\n.mes_edit_delete *,\n.mes_edit_up *,\n.mes_edit_down *,\n.mes_edit_cancel *,\n/* \n  也直接作用于按钮元素本身，因为 `filter` 通常会应用在元素上。\n*/\n.mes_edit_done,\n.mes_edit_copy,\n.mes_edit_add_reasoning,\n.mes_edit_delete,\n.mes_edit_up,\n.mes_edit_down,\n.mes_edit_cancel {\n    text-shadow: none !important;       /* 移除图标字体本身的阴影 */\n    box-shadow: none !important;        /* 移除按钮容器的任何盒子阴影 */\n    filter: none !important;            /* 【这是最关键的一行】移除所有CSS滤镜（包括发光、模糊等） */\n    background: none !important;        /* 确保没有背景色或背景图产生模糊效果 */\n    border: none !important;            /* 移除边框，如果它有阴影的话 */\n    backdrop-filter: none !important;   /* 移除背景模糊效果，如果父容器有应用 */\n}\n\n.mes_reasoning_header.flex-container{\n    background-image: url('https://files.catbox.moe/fssbeg.png') !important;\n    background-size: cover !important;         /* 缩放图片以完全覆盖背景区域，保持比例 */\n    background-position: center !important;     /* 将图片的中心对准容器的中心 */\n    background-repeat: no-repeat !important;    /* 禁止图片平铺 */\n    color: #D9E5F7 !important;\n}\n/* \n  【额外增强】针对这些按钮的父容器 `.mes_edit_buttons` \n  再次强调移除所有滤镜和阴影。\n  有时候阴影可能是由父容器应用然后继承下来的。\n*/\n.mes_edit_buttons {\n    background: none !important;\n    border: none !important;\n    box-shadow: none !important;\n    backdrop-filter: none !important;\n    filter: none !important; /* 在父容器上再次强制移除滤镜 */\n}\n\n/* 移除复制和编辑图标的阴影模糊效果 */\n.mes_reasoning_copy,\n.mes_reasoning_edit {\n    box-shadow: none !important;    /* 移除盒阴影，使用 !important 确保覆盖 */\n    text-shadow: none !important;   /* 移除文字阴影，使用 !important 确保覆盖 */\n    filter: none !important;        /* 移除任何可能的滤镜效果（如模糊），使用 !important 确保覆盖 */\n}\n\n/* 如果这些按钮还有 :hover 或 :active 状态的阴影，也可以移除 */\n.mes_reasoning_copy:hover,\n.mes_reasoning_edit:hover,\n.mes_reasoning_copy:active,\n.mes_reasoning_edit:active {\n    box-shadow: none !important;\n    text-shadow: none !important;\n    filter: none !important;\n}\n.mes_reasoning_header_title::before {\n    content: \"正在输入中 \";\n    font-size: var(--mainFontSize);\n}\n\n.mes_reasoning_header_title {\n    font-size: 0;\n} \n\n/* --- 用户消息：按钮、名字、时间的最终布局 --- */\n\n/* 1. 选中包含所有顶部元素（按钮、名字、时间）的父容器 */\n.mes[is_user=\"true\"] .ch_name {\n  /*\n   * 设置为flex布局，这是所有魔法的基础。\n   * justify-content: space-between; (核心)\n   * 这个属性会让容器内的子元素自动分开，\n   * 第一个子元素贴着左边，最后一个子元素贴着右边。\n   */\n  display: flex !important;\n  justify-content: space-between !important;\n  align-items: baseline !important; /* 让所有元素的文字基线对齐，看起来更整齐 */\n  width: 100%; /* 确保容器撑满宽度，这样才能实现左右分离 */\n}\n\n/* 2. 创建一个新的容器来包裹名字和时间，以便它们能作为一个整体被推到右侧 */\n.mes[is_user=\"true\"] .flex-container.flex1.alignitemscenter {\n    display: flex;\n    justify-content: flex-end; /* 让这个新容器内部的元素也靠右 */\n    align-items: baseline;\n    order: 2; /* (关键) 让这个 [名字+时间] 的整体排在第二位 */\n}\n\n/* 3. 重新排列 [名字+时间] 容器内部的元素顺序 */\n.mes[is_user=\"true\"] .timestamp {\n  order: 1 !important; /* 时间排第一 */\n  margin-right: 8px !important; /* 在时间和名字之间增加一点间距 */\n}\n\n.mes[is_user=\"true\"] .name_text {\n  order: 2 !important; /* 名字排第二 */\n}\n\n/* 4. (关键) 将操作按钮的顺序设为第一，它就会被 space-between 推到最左边 */\n.mes[is_user=\"true\"] .mes_buttons {\n  order: 1 !important;\n}\n/* --- 交换“编辑”(铅笔)和“更多”(省略号)按钮的位置 --- */\n\n/* 1. 必须将按钮的父容器(.mes_buttons)设置为 flex 布局 */\n.mes_buttons {\n  display: flex !important;\n  align-items: center !important; /* 让按钮垂直居中对齐，更美观 */\n}\n\n/* 2. 为“更多”按钮(省略号)设置一个较高的 order 值，让它排在后面 */\n.mes_button.extraMesButtonsHint {\n  order: 2 !important;\n}\n\n/* 3. 为“编辑”按钮(铅笔)设置一个较低的 order 值，让它排在前面 */\n.mes_button.mes_edit {\n  order: 1 !important;\n}\n#send_textarea {\n  /* 顶部边框完整显示 */\n  clip-path: none !important;\n  /* 隐藏容器视觉效果 */\n  background-color: transparent !important;\n  border-color: transparent !important;\n}\n/*\n * SillyTavern 自定义聊天界面样式 (背景色优化版)\n * 根据用户反馈，降低了斜体文字的背景色深度。\n */\n\n/* \n * 1. 斜体文字样式 (`*...*`)\n *    - 优化：背景色不透明度从 0.2 降低到 0.1，使其更浅、更柔和。\n */\n.mes_text em,\n.mes_text i {\n    color: #A1A6CB;\n}\n\n\n/* \n * 2. 所有代码元素 (`...` 和 ```...```) 的统一美化 (保持不变)\n *    - #6FC5F5 字体颜色\n *    - #6FC5F5 虚线边框\n *    - 完全透明背景\n */\n.mes_block code, \n.mes_block pre {\n    color: #9DBDFA;\n    border: 1px dashed #DFE6FD; /* 虚线边框 */\n    background-color: transparent; /* 确保无背景色 */\n    font-family: \"Noto Sans Mono\", monospace;\n}\n\n/* 内联代码 (`) 的特定内边距和圆角 */\n.mes_block code {\n    padding: 1px 4px;\n    border-radius: 4px;\n    font-size: 0.9em;\n}\n\n/* 代码块 (```) 的特定内边距和圆角 */\n.mes_block pre {\n    padding: 12px;\n    border-radius: 8px;\n    overflow-x: auto;\n}\n\n/* \n * 重置代码块内部的 <code> 元素样式\n */\n.mes_block pre code {\n    border: none;\n    padding: 0;\n    font-size: 1em;\n    background-color: transparent;\n    text-shadow: none;\n\n}\n/* --- 将思维链编辑按钮的背景色变为透明 --- */\n.mes_reasoning_actions .edit_button {\n  background-color: transparent !important;\n  background-image: none !important; /* 同时移除可能存在的背景渐变或图片 */\n  border: none !important;         /* (可选) 通常透明背景的按钮去掉边框更好看 */\n  box-shadow: none !important;     /* (可选) 移除可能存在的阴影 */\n}\n.drawer-content.openDrawer {\n    max-height: calc(100dvh - var(--topBarBlockSize));\n/* 想让所有界面的高度都填满就加这个height: calc(100dvh - var(--topBarBlockSize));*/\n}\n\n#left-nav-panel,\n#right-nav-panel {\n    height: 100dvh;\n    max-height: 100dvh;\n}\n#form_sheld {\n    margin: 0 !important;\n}\n\n#sheld {\n    top: var(--bottomFormBlockSize);\n    height: calc(100dvh - var(--bottomFormBlockSize));\n    max-height: calc(100dvh - var(--bottomFormBlockSize));\n}\n@media (max-width: 600px) {\n    #right-nav-panel {\n        max-height: calc(100dvh - var(--topBarBlockSize));\n    }\n} \n",
    "bogus_folders": true,
    "zoomed_avatar_magnification": true,
    "reduced_motion": true,
    "compact_input_area": true,
    "show_swipe_num_all_messages": true,
    "click_to_edit": false
}